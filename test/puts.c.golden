*** ARGS:
  [0] out/test/puts.pexe
*** ENVIRONMENT:
entry: 1
module version: 1
*** SUBBLOCK BLOCKINFO (0)
block id: 14
block id: 11
block id: 12
block id: 19
*** END BLOCK
*** SUBBLOCK TYPE (17)
num types: 19
0: type integer 32
1: type void
2: type integer 1
3: type integer 16
4: type integer 8
5: type function is_varargs:0 ret:1 
6: type function is_varargs:0 ret:0 
7: type function is_varargs:0 ret:1 0 
8: type function is_varargs:0 ret:0 0 0 
9: type function is_varargs:0 ret:0 0 0 0 0 
10: type integer 64
11: type function is_varargs:0 ret:1 0 0 0 
12: type function is_varargs:0 ret:0 0 0 0 
13: type function is_varargs:0 ret:1 0 0 0 0 2 
14: type function is_varargs:0 ret:0 0 
15: type function is_varargs:0 ret:1 0 0 
16: type function is_varargs:0 ret:1 0 4 0 0 2 
17: type function is_varargs:0 ret:0 0 10 0 0 
18: type function is_varargs:0 ret:0 0 0 0 0 0 10 
*** END BLOCK
%0. module function: (type:13,cc:0,is_proto:1,linkage:0)
%1. module function: (type:6,cc:0,is_proto:0,linkage:3)
%2. module function: (type:5,cc:0,is_proto:1,linkage:0)
%3. module function: (type:5,cc:0,is_proto:0,linkage:3)
%4. module function: (type:7,cc:0,is_proto:0,linkage:0)
%5. module function: (type:11,cc:0,is_proto:0,linkage:3)
%6. module function: (type:7,cc:0,is_proto:0,linkage:3)
%7. module function: (type:9,cc:0,is_proto:0,linkage:3)
%8. module function: (type:8,cc:0,is_proto:0,linkage:3)
%9. module function: (type:17,cc:0,is_proto:0,linkage:3)
%10. module function: (type:9,cc:0,is_proto:0,linkage:3)
%11. module function: (type:9,cc:0,is_proto:0,linkage:3)
%12. module function: (type:8,cc:0,is_proto:0,linkage:3)
%13. module function: (type:8,cc:0,is_proto:0,linkage:3)
%14. module function: (type:14,cc:0,is_proto:0,linkage:3)
%15. module function: (type:12,cc:0,is_proto:0,linkage:3)
%16. module function: (type:7,cc:0,is_proto:0,linkage:3)
%17. module function: (type:5,cc:0,is_proto:0,linkage:3)
%18. module function: (type:12,cc:0,is_proto:0,linkage:3)
%19. module function: (type:12,cc:0,is_proto:0,linkage:3)
%20. module function: (type:8,cc:0,is_proto:0,linkage:3)
%21. module function: (type:8,cc:0,is_proto:0,linkage:3)
%22. module function: (type:8,cc:0,is_proto:0,linkage:3)
%23. module function: (type:7,cc:0,is_proto:0,linkage:3)
%24. module function: (type:7,cc:0,is_proto:0,linkage:3)
%25. module function: (type:9,cc:0,is_proto:0,linkage:3)
%26. module function: (type:9,cc:0,is_proto:0,linkage:3)
%27. module function: (type:9,cc:0,is_proto:0,linkage:3)
%28. module function: (type:8,cc:0,is_proto:0,linkage:3)
%29. module function: (type:14,cc:0,is_proto:0,linkage:3)
%30. module function: (type:7,cc:0,is_proto:0,linkage:3)
%31. module function: (type:6,cc:0,is_proto:0,linkage:3)
%32. module function: (type:15,cc:0,is_proto:0,linkage:3)
%33. module function: (type:6,cc:0,is_proto:1,linkage:0)
%34. module function: (type:16,cc:0,is_proto:1,linkage:0)
%35. module function: (type:13,cc:0,is_proto:1,linkage:0)
%36. module function: (type:9,cc:0,is_proto:1,linkage:0)
%37. module function: (type:8,cc:0,is_proto:1,linkage:0)
%38. module function: (type:11,cc:0,is_proto:1,linkage:0)
*** SUBBLOCK GLOBALVAR (19)
global var count: 31
%39. var. alignment:1 is_constant:1 offset:1024
  data. num_bytes: 15 offset:1024
%40. var. alignment:1 is_constant:1 offset:1039
  data. num_bytes: 19 offset:1039
%41. var. alignment:4 is_constant:0 offset:1060
  zerofill. num_bytes: 4, data_offset:1060
%42. var. alignment:4 is_constant:0 offset:1064
  compound. num initializers: 8
  writing reloc value. offset:1064 value:160 (0xa0)
  reloc. index: 14 addend: 0 data_offset:1064
  writing reloc value. offset:1068 value:156 (0x9c)
  reloc. index: 13 addend: 0 data_offset:1068
  writing reloc value. offset:1072 value:152 (0x98)
  reloc. index: 12 addend: 0 data_offset:1072
  writing reloc value. offset:1076 value:148 (0x94)
  reloc. index: 11 addend: 0 data_offset:1076
  writing reloc value. offset:1080 value:144 (0x90)
  reloc. index: 10 addend: 0 data_offset:1080
  writing reloc value. offset:1084 value:140 (0x8c)
  reloc. index: 9 addend: 0 data_offset:1084
  writing reloc value. offset:1088 value:136 (0x88)
  reloc. index: 8 addend: 0 data_offset:1088
  writing reloc value. offset:1092 value:132 (0x84)
  reloc. index: 7 addend: 0 data_offset:1092
%43. var. alignment:4 is_constant:0 offset:1096
  zerofill. num_bytes: 4, data_offset:1096
%44. var. alignment:1 is_constant:1 offset:1100
  data. num_bytes: 33 offset:1100
%45. var. alignment:1 is_constant:1 offset:1133
  data. num_bytes: 52 offset:1133
%46. var. alignment:4 is_constant:0 offset:1188
  zerofill. num_bytes: 24, data_offset:1188
%47. var. alignment:4 is_constant:0 offset:1212
  zerofill. num_bytes: 12, data_offset:1212
%48. var. alignment:4 is_constant:0 offset:1224
  zerofill. num_bytes: 8, data_offset:1224
%49. var. alignment:4 is_constant:0 offset:1232
  zerofill. num_bytes: 56, data_offset:1232
%50. var. alignment:1 is_constant:1 offset:1288
  data. num_bytes: 19 offset:1288
%51. var. alignment:1 is_constant:1 offset:1307
  data. num_bytes: 20 offset:1307
%52. var. alignment:1 is_constant:1 offset:1327
  data. num_bytes: 20 offset:1327
%53. var. alignment:1 is_constant:1 offset:1347
  data. num_bytes: 20 offset:1347
%54. var. alignment:1 is_constant:1 offset:1367
  data. num_bytes: 17 offset:1367
%55. var. alignment:4 is_constant:0 offset:1384
  zerofill. num_bytes: 4, data_offset:1384
%56. var. alignment:4 is_constant:0 offset:1388
  writing reloc value. offset:1388 value:1384 (0x568)
  reloc. index: 55 addend: 0 data_offset:1388
%57. var. alignment:4 is_constant:0 offset:1392
  zerofill. num_bytes: 4, data_offset:1392
%58. var. alignment:1 is_constant:0 offset:1396
  zerofill. num_bytes: 1, data_offset:1396
%59. var. alignment:1 is_constant:0 offset:1397
  zerofill. num_bytes: 1, data_offset:1397
%60. var. alignment:8 is_constant:0 offset:1400
  compound. num initializers: 7
  zerofill. num_bytes: 4, data_offset:1400
  writing reloc value. offset:1404 value:2152 (0x868)
  reloc. index: 60 addend: 752 data_offset:1404
  writing reloc value. offset:1408 value:2280 (0x8e8)
  reloc. index: 60 addend: 880 data_offset:1408
  writing reloc value. offset:1412 value:2408 (0x968)
  reloc. index: 60 addend: 1008 data_offset:1412
  zerofill. num_bytes: 36, data_offset:1416
  reloc. index: 61 addend: 0 data_offset:1452
  data. num_bytes: 1080 offset:1456
%61. var. alignment:1 is_constant:1 offset:2536
  data. num_bytes: 2 offset:2536
%62. var. alignment:1 is_constant:1 offset:2538
  data. num_bytes: 2 offset:2538
%63. var. alignment:4 is_constant:0 offset:2540
  zerofill. num_bytes: 24, data_offset:2540
%64. var. alignment:4 is_constant:0 offset:2564
  zerofill. num_bytes: 476, data_offset:2564
%65. var. alignment:4 is_constant:0 offset:3040
  zerofill. num_bytes: 4, data_offset:3040
%66. var. alignment:1 is_constant:1 offset:3044
  data. num_bytes: 22 offset:3044
%67. var. alignment:1 is_constant:1 offset:3066
  data. num_bytes: 18 offset:3066
%68. var. alignment:1 is_constant:1 offset:3084
  data. num_bytes: 22 offset:3084
%69. var. alignment:8 is_constant:1 offset:3112
  compound. num initializers: 7
  data. num_bytes: 12 offset:3112
  writing reloc value. offset:3124 value:2152 (0x868)
  reloc. index: 60 addend: 752 data_offset:3124
  writing reloc value. offset:3128 value:2280 (0x8e8)
  reloc. index: 60 addend: 880 data_offset:3128
  writing reloc value. offset:3132 value:2408 (0x968)
  reloc. index: 60 addend: 1008 data_offset:3132
  zerofill. num_bytes: 36, data_offset:3136
  writing reloc value. offset:3172 value:2536 (0x9e8)
  reloc. index: 61 addend: 0 data_offset:3172
  data. num_bytes: 1080 offset:3176
  writing reloc value. offset:1452 value:2536 (0x9e8)
*** END BLOCK
*** SUBBLOCK VALUE_SYMTAB (14)
  entry: id:34 name:"llvm.memset.p0i8.i32"
    intrinsic "llvm.memset.p0i8.i32" (10)
  entry: id:36 name:"llvm.nacl.atomic.rmw.i32"
    intrinsic "llvm.nacl.atomic.rmw.i32" (21)
  entry: id:35 name:"llvm.memmove.p0i8.p0i8.i32"
    intrinsic "llvm.memmove.p0i8.p0i8.i32" (9)
  entry: id:37 name:"llvm.nacl.atomic.load.i32"
    intrinsic "llvm.nacl.atomic.load.i32" (17)
  entry: id:33 name:"llvm.nacl.read.tp"
    intrinsic "llvm.nacl.read.tp" (28)
  entry: id:2 name:"llvm.trap"
    intrinsic "llvm.trap" (34)
  entry: id:38 name:"llvm.nacl.atomic.store.i32"
    intrinsic "llvm.nacl.atomic.store.i32" (25)
  entry: id:4 name:"_start"
    intrinsic "_start" (35)
  entry: id:0 name:"llvm.memcpy.p0i8.p0i8.i32"
    intrinsic "llvm.memcpy.p0i8.p0i8.i32" (8)
*** END BLOCK
*** SUBBLOCK FUNCTION (12)
function %1
num bbs:12
*** SUBBLOCK CONSTANTS (11)
  constants settype 0 (int32)
  %70. integer 0
  %71. integer 1
  %72. integer 12
  %73. integer 4
  %74. integer 8
  %75. integer 3
  %76. integer -2139062144
  %77. integer 8192
  %78. integer 16
  %79. integer -1144
  %80. integer -16843009
  %81. integer 2
  %82. integer 120
  %83. integer -8193
  constants settype 4 (int8)
  %84. integer 0
*** END BLOCK
bb:0 (succs: 3 1)
 defs: [%85,%91]
  %85(int32). alloca %72(int32) align=4
  %86(int32). alloca %78(int32) align=4
  %87(int32). call %33(int32())(llvm.nacl.read.tp) args:
  %88(int32). binop op:add(0) %87(int32) %79(int32) (flags:0)
  %89(int32). load src:%88(int32) align=1
  %90(int32). binop op:and(10) %39(int32) %75(int32) (flags:0)
  %91(int1). cmp2 op:icmp_eq(32) %90(int32) %70(int32)
  br %91(int1) ? 3 : 1
bb:1 (succs: 9 2)
 defs: [%92,%95]
  forwardtyperef %96(int32) int32
  %92(int32). phi bb:2=>%96(int32) bb:0=>%39(int32)
  %93(int32). phi bb:2=>%96(int32) bb:0=>%39(int32)
  %94(int8). load src:%93(int32) align=1
  %95(int1). cmp2 op:icmp_eq(32) %94(int8) %84(int8)
  br %95(int1) ? 9 : 2
bb:2 (succs: 3 1)
 defs: [%96,%98]
  %96(int32). binop op:add(0) %93(int32) %71(int32) (flags:0)
  %97(int32). binop op:and(10) %96(int32) %75(int32) (flags:0)
  %98(int1). cmp2 op:icmp_eq(32) %97(int32) %70(int32)
  br %98(int1) ? 3 : 1
bb:3 (succs: 4)
 defs: [%99,%99]
  %99(int32). phi bb:0=>%39(int32) bb:2=>%96(int32)
  br 4
bb:4 (succs: 4 5)
 defs: [%100,%107]
  forwardtyperef %107(int32) int32
  %100(int32). phi bb:3=>%99(int32) bb:4=>%107(int32)
  %101(int32). load src:%100(int32) align=1
  %102(int32). binop op:add(0) %101(int32) %80(int32) (flags:0)
  %103(int32). binop op:and(10) %101(int32) %76(int32) (flags:0)
  %104(int32). binop op:xor(12) %103(int32) %76(int32) (flags:0)
  %105(int32). binop op:and(10) %104(int32) %102(int32) (flags:0)
  %106(int1). cmp2 op:icmp_eq(32) %105(int32) %70(int32)
  %107(int32). binop op:add(0) %100(int32) %73(int32) (flags:0)
  br %106(int1) ? 4 : 5
bb:5 (succs: 6)
 defs: [%108,%108]
  %108(int8). cast op:trunc(0) %101(int32)
  br 6
bb:6 (succs: 8 7)
 defs: [%109,%112]
  forwardtyperef %113(int8) int8
  %109(int8). phi bb:5=>%108(int8) bb:7=>%113(int8)
  forwardtyperef %112(int32) int32
  %110(int32). phi bb:5=>%100(int32) bb:7=>%112(int32)
  %111(int1). cmp2 op:icmp_eq(32) %109(int8) %84(int8)
  %112(int32). binop op:add(0) %110(int32) %71(int32) (flags:0)
  br %111(int1) ? 8 : 7
bb:7 (succs: 6)
 defs: [%113,%113]
  %113(int8). load src:%112(int32) align=1
  br 6
bb:8 (succs: 9)
  br 9
bb:9 (succs: 10 11)
 defs: [%114,%128]
  %114(int32). phi bb:8=>%110(int32) bb:1=>%92(int32)
  %115(int32). binop op:sub(1) %114(int32) %39(int32) (flags:0)
  store dest:%86(int32) value:%39(int32) align=1
  %116(int32). binop op:add(0) %86(int32) %73(int32) (flags:0)
  store dest:%116(int32) value:%115(int32) align=1
  %117(int32). binop op:add(0) %86(int32) %74(int32) (flags:0)
  store dest:%117(int32) value:%62(int32) align=1
  %118(int32). binop op:add(0) %86(int32) %72(int32) (flags:0)
  store dest:%118(int32) value:%71(int32) align=1
  %119(int32). binop op:add(0) %115(int32) %71(int32) (flags:0)
  %120(int32). binop op:add(0) %85(int32) %74(int32) (flags:0)
  store dest:%120(int32) value:%119(int32) align=1
  store dest:%85(int32) value:%86(int32) align=1
  %121(int32). binop op:add(0) %85(int32) %73(int32) (flags:0)
  store dest:%121(int32) value:%81(int32) align=1
  %122(int32). binop op:add(0) %89(int32) %74(int32) (flags:0)
  %123(int32). load src:%122(int32) align=1
  %124(int32). binop op:add(0) %123(int32) %72(int32) (flags:0)
  %125(int16). load src:%124(int32) align=1
  %126(int32). cast op:sext(2) %125(int16)
  %127(int32). binop op:and(10) %126(int32) %77(int32) (flags:0)
  %128(int1). cmp2 op:icmp_eq(32) %127(int32) %70(int32)
  br %128(int1) ? 10 : 11
bb:10 (succs: 11)
 defs: [%129,%133]
  %129(int32). binop op:or(11) %126(int32) %77(int32) (flags:0)
  %130(int16). cast op:trunc(0) %129(int32)
  store dest:%124(int32) value:%130(int16) align=1
  %131(int32). binop op:add(0) %123(int32) %82(int32) (flags:0)
  %132(int32). load src:%131(int32) align=1
  %133(int32). binop op:and(10) %132(int32) %83(int32) (flags:0)
  store dest:%131(int32) value:%133(int32) align=1
  br 11
bb:11 (succs:)
 defs: [%134,%134]
  %134(int32). call %18(int32(int32,int32,int32)) args: %89(int32) %123(int32) %85(int32)
  ret %70(int32)
*** END BLOCK
*** SUBBLOCK FUNCTION (12)
function %3
num bbs:3
*** SUBBLOCK CONSTANTS (11)
  constants settype 0 (int32)
  %70. integer 4
  %71. integer 16
  %72. integer 2
  %73. integer 18
  %74. integer 0
  %75. integer -1144
*** END BLOCK
bb:0 (succs: 2 1)
 defs: [%76,%80]
  %76(int32). alloca %70(int32) align=4
  %77(int32). binop op:add(0) %42(int32) %71(int32) (flags:0)
  %78(int32). load src:%77(int32) align=1
  %79(int32). call indirect %78(int32) args: %72(int32) %40(int32) %73(int32) %76(int32)
  %80(int1). cmp2 op:icmp_eq(32) %79(int32) %74(int32)
  br %80(int1) ? 2 : 1
bb:1 (succs: 2)
 defs: [%81,%83]
  %81(int32). call %33(int32())(llvm.nacl.read.tp) args:
  %82(int32). binop op:add(0) %81(int32) %75(int32) (flags:0)
  %83(int32). load src:%82(int32) align=1
  store dest:%83(int32) value:%79(int32) align=1
  br 2
bb:2 (succs:)
  call %2(void())(llvm.trap) args:
  unreachable
*** END BLOCK
*** SUBBLOCK FUNCTION (12)
function %4 (_start)
  %70. function arg 0
num bbs:52
*** SUBBLOCK CONSTANTS (11)
  constants settype 0 (int32)
  %71. integer 0
  %72. integer 4
  %73. integer 8
  %74. integer 328
  %75. integer 16
  %76. integer 32
  %77. integer 12
  %78. integer 1
  %79. integer 1155
  %80. integer 11
  %81. integer 1144
  %82. integer 5
  %83. integer 24
  %84. integer 7
  %85. integer -8
  %86. integer -1144
  %87. integer -1136
  %88. integer 392
  %89. integer 396
  %90. integer -1
  %91. integer 136
  %92. integer 60
  constants settype 2 (int1)
  %93. integer -1
  %94. integer 0
*** END BLOCK
bb:0 (succs: 1)
 defs: [%95,%108]
  %95(int32). alloca %75(int32) align=4
  %96(int32). alloca %72(int32) align=4
  store dest:%96(int32) value:%70(int32) align=1
  %97(int32). load src:%70(int32) align=1
  %98(int32). binop op:add(0) %70(int32) %73(int32) (flags:0)
  %99(int32). load src:%98(int32) align=1
  %100(int32). binop op:add(0) %99(int32) %72(int32) (flags:0)
  %101(int32). binop op:mul(2) %100(int32) %72(int32) (flags:0)
  %102(int32). binop op:add(0) %70(int32) %101(int32) (flags:0)
  %103(int32). binop op:add(0) %70(int32) %72(int32) (flags:0)
  %104(int32). load src:%103(int32) align=1
  %105(int32). binop op:add(0) %99(int32) %82(int32) (flags:0)
  %106(int32). binop op:add(0) %105(int32) %104(int32) (flags:0)
  %107(int32). binop op:mul(2) %106(int32) %72(int32) (flags:0)
  %108(int32). binop op:add(0) %70(int32) %107(int32) (flags:0)
  store dest:%56(int32) value:%102(int32) align=1
  store dest:%41(int32) value:%96(int32) align=1
  br 1
bb:1 (succs: 3 4 2)
 defs: [%109,%110]
  forwardtyperef %113(int32) int32
  %109(int32). phi bb:0=>%108(int32) bb:3=>%113(int32)
  %110(int32). load src:%109(int32) align=1
  switch value:%110(int32) [default:3] [0 => bb:4] [32 => bb:2]
bb:2 (succs: 3)
 defs: [%111,%112]
  %111(int32). binop op:add(0) %109(int32) %72(int32) (flags:0)
  %112(int32). load src:%111(int32) align=1
  store dest:%43(int32) value:%112(int32) align=1
  br 3
bb:3 (succs: 1)
 defs: [%113,%113]
  %113(int32). binop op:add(0) %109(int32) %73(int32) (flags:0)
  br 1
bb:4 (succs: 5 6)
 defs: [%114,%115]
  %114(int32). load src:%43(int32) align=1
  %115(int1). cmp2 op:icmp_eq(32) %114(int32) %71(int32)
  br %115(int1) ? 5 : 6
bb:5 (succs:)
  call %6(void(int32)) args: %44(int32)
  unreachable
bb:6 (succs: 10 7)
 defs: [%116,%117]
  %116(int32). call indirect %114(int32) args: %67(int32) %42(int32) %76(int32)
  %117(int1). cmp2 op:icmp_eq(32) %116(int32) %76(int32)
  br %117(int1) ? 10 : 7
bb:7 (succs: 8 9)
 defs: [%118,%119]
  %118(int32). load src:%43(int32) align=1
  %119(int1). cmp2 op:icmp_eq(32) %118(int32) %71(int32)
  br %119(int1) ? 8 : 9
bb:8 (succs:)
  call %6(void(int32)) args: %44(int32)
  unreachable
bb:9 (succs: 10)
 defs: [%120,%120]
  %120(int32). call indirect %118(int32) args: %68(int32) %42(int32) %76(int32)
  br 10
bb:10 (succs: 11 12)
 defs: [%121,%122]
  call %5(void(int32,int32,int32)) args: %50(int32) %46(int32) %83(int32)
  %121(int32). load src:%43(int32) align=1
  %122(int1). cmp2 op:icmp_eq(32) %121(int32) %71(int32)
  br %122(int1) ? 11 : 12
bb:11 (succs:)
  call %6(void(int32)) args: %44(int32)
  unreachable
bb:12 (succs: 18 13)
 defs: [%123,%124]
  %123(int32). call indirect %121(int32) args: %51(int32) %47(int32) %77(int32)
  %124(int1). cmp2 op:icmp_eq(32) %123(int32) %77(int32)
  br %124(int1) ? 18 : 13
bb:13 (succs: 14 15)
 defs: [%125,%126]
  %125(int32). load src:%43(int32) align=1
  %126(int1). cmp2 op:icmp_eq(32) %125(int32) %71(int32)
  br %126(int1) ? 14 : 15
bb:14 (succs:)
  call %6(void(int32)) args: %44(int32)
  unreachable
bb:15 (succs: 17 16)
 defs: [%127,%128]
  %127(int32). call indirect %125(int32) args: %52(int32) %95(int32) %75(int32)
  %128(int1). cmp2 op:icmp_eq(32) %127(int32) %75(int32)
  br %128(int1) ? 17 : 16
bb:16 (succs: 17)
 defs: [%129,%129]
  call %5(void(int32,int32,int32)) args: %53(int32) %95(int32) %77(int32)
  %129(int32). binop op:add(0) %47(int32) %73(int32) (flags:0)
  store dest:%129(int32) value:%15(int32(int32,int32,int32)) align=1
  br 17
bb:17 (succs: 18)
 defs: [%130,%134]
  %130(int32). binop op:add(0) %95(int32) %72(int32) (flags:0)
  %131(int32). load src:%130(int32) align=1
  store dest:%47(int32) value:%131(int32) align=1
  %132(int32). binop op:add(0) %95(int32) %73(int32) (flags:0)
  %133(int32). load src:%132(int32) align=1
  %134(int32). binop op:add(0) %47(int32) %72(int32) (flags:0)
  store dest:%134(int32) value:%133(int32) align=1
  br 18
bb:18 (succs: 20 19)
 defs: [%135,%135]
  call %5(void(int32,int32,int32)) args: %54(int32) %48(int32) %73(int32)
  %135(int1). cmp2 op:icmp_eq(32) %97(int32) %71(int32)
  br %135(int1) ? 20 : 19
bb:19 (succs: 20)
  call %16(void(int32)) args: %97(int32)
  br 20
bb:20 (succs: 21 22)
 defs: [%136,%137]
  call %16(void(int32)) args: %17(void())
  %136(int8). load src:%59(int32) align=1
  %137(int1). cast op:trunc(0) %136(int8)
  br %137(int1) ? 21 : 22
bb:21 (succs: 23)
 defs: [%138,%139]
  %138(int8). load src:%58(int32) align=1
  %139(int1). cast op:trunc(0) %138(int8)
  br 23
bb:22 (succs: 23)
 defs: [%140,%141]
  %140(int8). cast op:zext(1) %93(int1)
  store dest:%59(int32) value:%140(int8) align=1
  store dest:%57(int32) value:%69(int32) align=1
  %141(int8). cast op:zext(1) %93(int1)
  store dest:%58(int32) value:%141(int8) align=1
  br 23
bb:23 (succs: 24 25)
 defs: [%142,%146]
  %142(int1). phi bb:21=>%139(int1) bb:22=>%93(int1)
  %143(int32). vselect %142(int1) ? %79(int32) : %80(int32)
  %144(int32). call %29(int32(int32)) args: %143(int32)
  %145(int8). load src:%59(int32) align=1
  %146(int1). cast op:trunc(0) %145(int8)
  br %146(int1) ? 24 : 25
bb:24 (succs: 26)
 defs: [%147,%148]
  %147(int8). load src:%58(int32) align=1
  %148(int1). cast op:trunc(0) %147(int8)
  br 26
bb:25 (succs: 26)
 defs: [%149,%150]
  %149(int8). cast op:zext(1) %93(int1)
  store dest:%59(int32) value:%149(int8) align=1
  store dest:%57(int32) value:%69(int32) align=1
  %150(int8). cast op:zext(1) %93(int1)
  store dest:%58(int32) value:%150(int8) align=1
  br 26
bb:26 (succs: 27 28)
 defs: [%151,%160]
  %151(int1). phi bb:24=>%148(int1) bb:25=>%93(int1)
  %152(int32). vselect %151(int1) ? %79(int32) : %80(int32)
  %153(int32). binop op:add(0) %144(int32) %152(int32) (flags:0)
  %154(int32). vselect %151(int1) ? %81(int32) : %71(int32)
  %155(int32). binop op:add(0) %144(int32) %84(int32) (flags:0)
  %156(int32). binop op:and(10) %155(int32) %85(int32) (flags:0)
  %157(int32). binop op:add(0) %156(int32) %154(int32) (flags:0)
  %158(int32). vselect %151(int1) ? %81(int32) : %71(int32)
  %159(int32). binop op:add(0) %156(int32) %158(int32) (flags:0)
  %160(int1). cmp2 op:icmp_ugt(34) %159(int32) %153(int32)
  br %160(int1) ? 27 : 28
bb:27 (succs:)
  call %2(void())(llvm.trap) args:
  unreachable
bb:28 (succs: 49 30)
 defs: [%161,%171]
  %161(int32). load src:%57(int32) align=1
  call %0(void(int32,int32,int32,int32,int1))(llvm.memcpy.p0i8.p0i8.i32) args: %156(int32) %161(int32) %158(int32) %78(int32) %94(int1)
  store dest:%157(int32) value:%157(int32) align=1
  %162(int32). load src:%48(int32) align=1
  %163(int32). call indirect %162(int32) args: %157(int32)
  %164(int32). call %33(int32())(llvm.nacl.read.tp) args:
  %165(int32). binop op:add(0) %164(int32) %86(int32) (flags:0)
  %166(int32). binop op:add(0) %164(int32) %87(int32) (flags:0)
  store dest:%165(int32) value:%166(int32) align=1
  %167(int32). call %1(int32()) args:
  %168(int32). binop op:add(0) %60(int32) %74(int32) (flags:0)
  %169(int32). load src:%168(int32) align=1
  %170(int1). cmp2 op:icmp_eq(32) %169(int32) %71(int32)
  %171(int32). binop op:add(0) %60(int32) %74(int32) (flags:0)
  br %170(int1) ? 49 : 30
bb:29 (succs: 49 30)
 defs: [%172,%175]
  %172(int32). binop op:add(0) %60(int32) %74(int32) (flags:0)
  %173(int32). load src:%172(int32) align=1
  %174(int1). cmp2 op:icmp_eq(32) %173(int32) %71(int32)
  %175(int32). binop op:add(0) %60(int32) %74(int32) (flags:0)
  br %174(int1) ? 49 : 30
bb:30 (succs: 31)
 defs: [%176,%177]
  forwardtyperef %213(int32) int32
  %176(int32). phi bb:28=>%169(int32) bb:48=>%213(int32) bb:29=>%173(int32)
  forwardtyperef %178(int32) int32
  %177(int32). phi bb:28=>%171(int32) bb:48=>%178(int32) bb:29=>%175(int32)
  br 31
bb:31 (succs: 32 45)
 defs: [%178,%181]
  forwardtyperef %215(int32) int32
  %178(int32). phi bb:30=>%176(int32) bb:47=>%215(int32)
  %179(int32). binop op:add(0) %178(int32) %72(int32) (flags:0)
  %180(int32). load src:%179(int32) align=1
  %181(int1). cmp2 op:icmp_sgt(38) %180(int32) %71(int32)
  br %181(int1) ? 32 : 45
bb:32 (succs: 33)
 defs: [%182,%183]
  %182(int32). binop op:add(0) %178(int32) %88(int32) (flags:0)
  %183(int32). binop op:add(0) %178(int32) %89(int32) (flags:0)
  br 33
bb:33 (succs: 35 36)
 defs: [%184,%192]
  forwardtyperef %194(int32) int32
  %184(int32). phi bb:32=>%180(int32) bb:34=>%194(int32)
  forwardtyperef %186(int32) int32
  %185(int32). phi bb:32=>%180(int32) bb:34=>%186(int32)
  %186(int32). binop op:add(0) %185(int32) %90(int32) (flags:0)
  %187(int32). binop op:shl(7) %78(int32) %186(int32) (flags:0)
  %188(int32). binop op:add(0) %178(int32) %73(int32) (flags:0)
  %189(int32). binop op:mul(2) %186(int32) %72(int32) (flags:0)
  %190(int32). binop op:add(0) %188(int32) %189(int32) (flags:0)
  %191(int32). load src:%190(int32) align=1
  %192(int1). cmp2 op:icmp_eq(32) %185(int32) %184(int32)
  br %192(int1) ? 35 : 36
bb:34 (succs: 33 45)
 defs: [%193,%194]
  %193(int1). cmp2 op:icmp_sgt(38) %185(int32) %78(int32)
  %194(int32). load src:%179(int32) align=1
  br %193(int1) ? 33 : 45
bb:35 (succs: 37)
  store dest:%179(int32) value:%186(int32) align=1
  br 37
bb:36 (succs: 37)
  store dest:%190(int32) value:%71(int32) align=1
  br 37
bb:37 (succs: 34 38)
 defs: [%195,%195]
  %195(int1). cmp2 op:icmp_eq(32) %191(int32) %71(int32)
  br %195(int1) ? 34 : 38
bb:38 (succs: 39 40)
 defs: [%196,%199]
  %196(int32). load src:%179(int32) align=1
  %197(int32). load src:%182(int32) align=1
  %198(int32). binop op:and(10) %197(int32) %187(int32) (flags:0)
  %199(int1). cmp2 op:icmp_eq(32) %198(int32) %71(int32)
  br %199(int1) ? 39 : 40
bb:39 (succs: 43)
  call indirect %191(int32) args:
  br 43
bb:40 (succs: 41 42)
 defs: [%200,%206]
  %200(int32). load src:%183(int32) align=1
  %201(int32). binop op:and(10) %200(int32) %187(int32) (flags:0)
  %202(int1). cmp2 op:icmp_eq(32) %201(int32) %71(int32)
  %203(int32). binop op:add(0) %178(int32) %91(int32) (flags:0)
  %204(int32). binop op:mul(2) %186(int32) %72(int32) (flags:0)
  %205(int32). binop op:add(0) %203(int32) %204(int32) (flags:0)
  %206(int32). load src:%205(int32) align=1
  br %202(int1) ? 41 : 42
bb:41 (succs: 43)
  call indirect %191(int32) args: %167(int32) %206(int32)
  br 43
bb:42 (succs: 43)
  call indirect %191(int32) args: %206(int32)
  br 43
bb:43 (succs: 44 29)
 defs: [%207,%208]
  %207(int32). load src:%179(int32) align=1
  %208(int1). cmp2 op:icmp_eq(32) %196(int32) %207(int32)
  br %208(int1) ? 44 : 29
bb:44 (succs: 34 29)
 defs: [%209,%210]
  %209(int32). load src:%177(int32) align=1
  %210(int1). cmp2 op:icmp_eq(32) %209(int32) %178(int32)
  br %210(int1) ? 34 : 29
bb:45 (succs: 46 48)
 defs: [%211,%214]
  %211(int32). phi bb:31=>%180(int32) bb:34=>%194(int32)
  %212(int1). cmp2 op:icmp_eq(32) %211(int32) %71(int32)
  %213(int32). load src:%178(int32) align=1
  %214(int1). cmp2 op:icmp_eq(32) %213(int32) %71(int32)
  br %212(int1) ? 46 : 48
bb:46 (succs: 49 47)
  br %214(int1) ? 49 : 47
bb:47 (succs: 49 31)
 defs: [%215,%216]
  store dest:%177(int32) value:%213(int32) align=1
  call %30(void(int32)) args: %178(int32)
  %215(int32). load src:%177(int32) align=1
  %216(int1). cmp2 op:icmp_eq(32) %215(int32) %71(int32)
  br %216(int1) ? 49 : 31
bb:48 (succs: 49 30)
  br %214(int1) ? 49 : 30
bb:49 (succs: 51 50)
 defs: [%217,%219]
  %217(int32). binop op:add(0) %60(int32) %92(int32) (flags:0)
  %218(int32). load src:%217(int32) align=1
  %219(int1). cmp2 op:icmp_eq(32) %218(int32) %71(int32)
  br %219(int1) ? 51 : 50
bb:50 (succs: 51)
  call indirect %218(int32) args: %60(int32)
  br 51
bb:51 (succs:)
 defs: [%220,%220]
  %220(int32). load src:%46(int32) align=1
  call indirect %220(int32) args: %167(int32)
  call %2(void())(llvm.trap) args:
  unreachable
*** END BLOCK
*** SUBBLOCK FUNCTION (12)
function %5
  %70. function arg 0
  %71. function arg 1
  %72. function arg 2
num bbs:5
*** SUBBLOCK CONSTANTS (11)
  constants settype 0 (int32)
  %73. integer 0
*** END BLOCK
bb:0 (succs: 1 2)
 defs: [%74,%75]
  %74(int32). load src:%43(int32) align=1
  %75(int1). cmp2 op:icmp_eq(32) %74(int32) %73(int32)
  br %75(int1) ? 1 : 2
bb:1 (succs:)
  call %6(void(int32)) args: %44(int32)
  unreachable
bb:2 (succs: 4 3)
 defs: [%76,%77]
  %76(int32). call indirect %74(int32) args: %70(int32) %71(int32) %72(int32)
  %77(int1). cmp2 op:icmp_eq(32) %76(int32) %72(int32)
  br %77(int1) ? 4 : 3
bb:3 (succs:)
  call %6(void(int32)) args: %45(int32)
  unreachable
bb:4 (succs:)
  ret
*** END BLOCK
*** SUBBLOCK FUNCTION (12)
function %6
  %70. function arg 0
num bbs:5
*** SUBBLOCK CONSTANTS (11)
  constants settype 0 (int32)
  %71. integer 0
  %72. integer 1
  %73. integer 4
  %74. integer 16
  %75. integer 2
  constants settype 4 (int8)
  %76. integer 0
*** END BLOCK
bb:0 (succs: 4 1)
 defs: [%77,%80]
  %77(int32). alloca %73(int32) align=4
  %78(int32). binop op:add(0) %42(int32) %74(int32) (flags:0)
  %79(int32). load src:%78(int32) align=1
  %80(int1). cmp2 op:icmp_eq(32) %79(int32) %71(int32)
  br %80(int1) ? 4 : 1
bb:1 (succs: 3 2)
 defs: [%81,%82]
  %81(int8). load src:%70(int32) align=1
  %82(int1). cmp2 op:icmp_eq(32) %81(int8) %76(int8)
  br %82(int1) ? 3 : 2
bb:2 (succs: 3 2)
 defs: [%83,%88]
  forwardtyperef %86(int32) int32
  %83(int32). phi bb:2=>%86(int32) bb:1=>%71(int32)
  forwardtyperef %85(int32) int32
  %84(int32). phi bb:2=>%85(int32) bb:1=>%70(int32)
  %85(int32). binop op:add(0) %84(int32) %72(int32) (flags:0)
  %86(int32). binop op:add(0) %83(int32) %72(int32) (flags:0)
  %87(int8). load src:%85(int32) align=1
  %88(int1). cmp2 op:icmp_eq(32) %87(int8) %76(int8)
  br %88(int1) ? 3 : 2
bb:3 (succs: 4)
 defs: [%89,%90]
  %89(int32). phi bb:1=>%71(int32) bb:2=>%86(int32)
  %90(int32). call indirect %79(int32) args: %75(int32) %70(int32) %89(int32) %77(int32)
  br 4
bb:4 (succs:)
  call %2(void())(llvm.trap) args:
  unreachable
*** END BLOCK
*** SUBBLOCK FUNCTION (12)
function %7
  %70. function arg 0
  %71. function arg 1
  %72. function arg 2
  %73. function arg 3
num bbs:1
*** SUBBLOCK CONSTANTS (11)
  constants settype 0 (int32)
  %74. integer 38
*** END BLOCK
bb:0 (succs:)
  ret %74(int32)
*** END BLOCK
*** SUBBLOCK FUNCTION (12)
function %8
  %70. function arg 0
  %71. function arg 1
num bbs:1
*** SUBBLOCK CONSTANTS (11)
  constants settype 0 (int32)
  %72. integer 38
*** END BLOCK
bb:0 (succs:)
  ret %72(int32)
*** END BLOCK
*** SUBBLOCK FUNCTION (12)
function %9
  %70. function arg 0
  %71. function arg 1
  %72. function arg 2
  %73. function arg 3
num bbs:1
*** SUBBLOCK CONSTANTS (11)
  constants settype 0 (int32)
  %74. integer 38
*** END BLOCK
bb:0 (succs:)
  ret %74(int32)
*** END BLOCK
*** SUBBLOCK FUNCTION (12)
function %10
  %70. function arg 0
  %71. function arg 1
  %72. function arg 2
  %73. function arg 3
num bbs:1
*** SUBBLOCK CONSTANTS (11)
  constants settype 0 (int32)
  %74. integer 38
*** END BLOCK
bb:0 (succs:)
  ret %74(int32)
*** END BLOCK
*** SUBBLOCK FUNCTION (12)
function %11
  %70. function arg 0
  %71. function arg 1
  %72. function arg 2
  %73. function arg 3
num bbs:1
*** SUBBLOCK CONSTANTS (11)
  constants settype 0 (int32)
  %74. integer 38
*** END BLOCK
bb:0 (succs:)
  ret %74(int32)
*** END BLOCK
*** SUBBLOCK FUNCTION (12)
function %12
  %70. function arg 0
  %71. function arg 1
num bbs:1
*** SUBBLOCK CONSTANTS (11)
  constants settype 0 (int32)
  %72. integer 38
*** END BLOCK
bb:0 (succs:)
  ret %72(int32)
*** END BLOCK
*** SUBBLOCK FUNCTION (12)
function %13
  %70. function arg 0
  %71. function arg 1
num bbs:1
*** SUBBLOCK CONSTANTS (11)
  constants settype 0 (int32)
  %72. integer 38
*** END BLOCK
bb:0 (succs:)
  ret %72(int32)
*** END BLOCK
*** SUBBLOCK FUNCTION (12)
function %14
  %70. function arg 0
num bbs:1
*** SUBBLOCK CONSTANTS (11)
  constants settype 0 (int32)
  %71. integer 38
*** END BLOCK
bb:0 (succs:)
  ret %71(int32)
*** END BLOCK
*** SUBBLOCK FUNCTION (12)
function %15
  %70. function arg 0
  %71. function arg 1
  %72. function arg 2
num bbs:1
*** SUBBLOCK CONSTANTS (11)
  constants settype 0 (int32)
  %73. integer 38
*** END BLOCK
bb:0 (succs:)
  ret %73(int32)
*** END BLOCK
*** SUBBLOCK FUNCTION (12)
function %16
  %70. function arg 0
num bbs:7
*** SUBBLOCK CONSTANTS (11)
  constants settype 0 (int32)
  %71. integer 0
  %72. integer 328
  %73. integer 4
  %74. integer 332
  %75. integer 31
  %76. integer 400
  %77. integer 392
  %78. integer 396
  %79. integer 1
  %80. integer 8
*** END BLOCK
bb:0 (succs: 1 2)
 defs: [%81,%83]
  %81(int32). binop op:add(0) %60(int32) %72(int32) (flags:0)
  %82(int32). load src:%81(int32) align=1
  %83(int1). cmp2 op:icmp_eq(32) %82(int32) %71(int32)
  br %83(int1) ? 1 : 2
bb:1 (succs: 2)
 defs: [%84,%86]
  %84(int32). binop op:add(0) %60(int32) %74(int32) (flags:0)
  %85(int32). binop op:add(0) %60(int32) %72(int32) (flags:0)
  store dest:%85(int32) value:%84(int32) align=1
  %86(int32). binop op:add(0) %60(int32) %74(int32) (flags:0)
  br 2
bb:2 (succs: 3 5)
 defs: [%87,%90]
  %87(int32). phi bb:1=>%86(int32) bb:0=>%82(int32)
  %88(int32). binop op:add(0) %87(int32) %73(int32) (flags:0)
  %89(int32). load src:%88(int32) align=1
  %90(int1). cmp2 op:icmp_sgt(38) %89(int32) %75(int32)
  br %90(int1) ? 3 : 5
bb:3 (succs: 6 4)
 defs: [%91,%92]
  %91(int32). call %29(int32(int32)) args: %76(int32)
  %92(int1). cmp2 op:icmp_eq(32) %91(int32) %71(int32)
  br %92(int1) ? 6 : 4
bb:4 (succs: 5)
 defs: [%93,%98]
  %93(int32). binop op:add(0) %91(int32) %73(int32) (flags:0)
  store dest:%93(int32) value:%71(int32) align=1
  %94(int32). binop op:add(0) %60(int32) %72(int32) (flags:0)
  %95(int32). load src:%94(int32) align=1
  store dest:%91(int32) value:%95(int32) align=1
  %96(int32). binop op:add(0) %60(int32) %72(int32) (flags:0)
  store dest:%96(int32) value:%91(int32) align=1
  %97(int32). binop op:add(0) %91(int32) %77(int32) (flags:0)
  store dest:%97(int32) value:%71(int32) align=1
  %98(int32). binop op:add(0) %91(int32) %78(int32) (flags:0)
  store dest:%98(int32) value:%71(int32) align=1
  br 5
bb:5 (succs: 6)
 defs: [%99,%105]
  %99(int32). phi bb:4=>%71(int32) bb:2=>%89(int32)
  %100(int32). phi bb:4=>%91(int32) bb:2=>%87(int32)
  %101(int32). binop op:add(0) %100(int32) %73(int32) (flags:0)
  %102(int32). binop op:add(0) %99(int32) %79(int32) (flags:0)
  store dest:%101(int32) value:%102(int32) align=1
  %103(int32). binop op:add(0) %100(int32) %80(int32) (flags:0)
  %104(int32). binop op:mul(2) %99(int32) %73(int32) (flags:0)
  %105(int32). binop op:add(0) %103(int32) %104(int32) (flags:0)
  store dest:%105(int32) value:%70(int32) align=1
  br 6
bb:6 (succs:)
  ret
*** END BLOCK
*** SUBBLOCK FUNCTION (12)
function %17
num bbs:1
bb:0 (succs:)
  ret
*** END BLOCK
*** SUBBLOCK FUNCTION (12)
function %18
  %70. function arg 0
  %71. function arg 1
  %72. function arg 2
num bbs:142
*** SUBBLOCK CONSTANTS (11)
  constants settype 0 (int32)
  %73. integer 0
  %74. integer 1
  %75. integer -8
  %76. integer 4
  %77. integer 8
  %78. integer 16
  %79. integer 12
  %80. integer 2
  %81. integer 20
  %82. integer 3
  %83. integer 6
  %84. integer 24
  %85. integer 448
  %86. integer -1
  %87. integer 36
  %88. integer 28
  %89. integer -4
  %90. integer 2147482624
  %91. integer -1144
  %92. integer 11
  %93. integer 444
  %94. integer 256
  %95. integer 15
  %96. integer 2147483647
  %97. integer 512
  %98. integer 1152
  %99. integer 64383
  %100. integer 128
  %101. integer -65
  %102. integer 63
  %103. integer -2
  %104. integer 40
  %105. integer 304
  %106. integer 65407
  %107. integer 10
  %108. integer 64
  constants settype 2 (int1)
  %109. integer 0
  constants settype 3 (int16)
  %110. integer 0
  %111. integer 8
  %112. integer 1024
*** END BLOCK
bb:0 (succs: 141 1)
 defs: [%113,%115]
  %113(int32). binop op:add(0) %72(int32) %77(int32) (flags:0)
  %114(int32). load src:%113(int32) align=1
  %115(int1). cmp2 op:icmp_eq(32) %114(int32) %73(int32)
  br %115(int1) ? 141 : 1
bb:1 (succs: 3 2)
 defs: [%116,%119]
  %116(int32). binop op:add(0) %71(int32) %79(int32) (flags:0)
  %117(int16). load src:%116(int32) align=1
  %118(int16). binop op:and(10) %117(int16) %111(int16) (flags:0)
  %119(int1). cmp2 op:icmp_eq(32) %118(int16) %110(int16)
  br %119(int1) ? 3 : 2
bb:2 (succs: 3 5)
 defs: [%120,%122]
  %120(int32). binop op:add(0) %71(int32) %78(int32) (flags:0)
  %121(int32). load src:%120(int32) align=1
  %122(int1). cmp2 op:icmp_eq(32) %121(int32) %73(int32)
  br %122(int1) ? 3 : 5
bb:3 (succs: 4 141)
 defs: [%123,%124]
  %123(int32). call %20(int32(int32,int32)) args: %70(int32) %71(int32)
  %124(int1). cmp2 op:icmp_eq(32) %123(int32) %73(int32)
  br %124(int1) ? 4 : 141
bb:4 (succs: 5)
 defs: [%125,%125]
  %125(int16). load src:%116(int32) align=1
  br 5
bb:5 (succs: 12 6)
 defs: [%126,%130]
  %126(int16). phi bb:4=>%125(int16) bb:2=>%117(int16)
  %127(int32). load src:%72(int32) align=1
  %128(int32). cast op:sext(2) %126(int16)
  %129(int32). binop op:and(10) %128(int32) %80(int32) (flags:0)
  %130(int1). cmp2 op:icmp_eq(32) %129(int32) %73(int32)
  br %130(int1) ? 12 : 6
bb:6 (succs: 7)
 defs: [%131,%132]
  %131(int32). binop op:add(0) %71(int32) %87(int32) (flags:0)
  %132(int32). binop op:add(0) %71(int32) %88(int32) (flags:0)
  br 7
bb:7 (succs: 8)
 defs: [%133,%135]
  forwardtyperef %142(int32) int32
  %133(int32). phi bb:6=>%127(int32) bb:9=>%142(int32)
  forwardtyperef %139(int32) int32
  %134(int32). phi bb:6=>%73(int32) bb:9=>%139(int32)
  forwardtyperef %141(int32) int32
  %135(int32). phi bb:6=>%73(int32) bb:9=>%141(int32)
  br 8
bb:8 (succs: 9 10)
 defs: [%136,%138]
  forwardtyperef %149(int32) int32
  %136(int32). phi bb:11=>%149(int32) bb:7=>%134(int32)
  forwardtyperef %150(int32) int32
  %137(int32). phi bb:11=>%150(int32) bb:7=>%135(int32)
  %138(int1). cmp2 op:icmp_eq(32) %137(int32) %73(int32)
  br %138(int1) ? 9 : 10
bb:9 (succs: 7)
 defs: [%139,%142]
  %139(int32). load src:%133(int32) align=1
  %140(int32). binop op:add(0) %133(int32) %76(int32) (flags:0)
  %141(int32). load src:%140(int32) align=1
  %142(int32). binop op:add(0) %133(int32) %77(int32) (flags:0)
  br 7
bb:10 (succs: 140 11)
 defs: [%143,%148]
  %143(int32). load src:%131(int32) align=1
  %144(int32). load src:%132(int32) align=1
  %145(int1). cmp2 op:icmp_ult(36) %137(int32) %90(int32)
  %146(int32). vselect %145(int1) ? %137(int32) : %90(int32)
  %147(int32). call indirect %143(int32) args: %70(int32) %144(int32) %136(int32) %146(int32)
  %148(int1). cmp2 op:icmp_slt(40) %147(int32) %74(int32)
  br %148(int1) ? 140 : 11
bb:11 (succs: 141 8)
 defs: [%149,%153]
  %149(int32). binop op:add(0) %136(int32) %147(int32) (flags:0)
  %150(int32). binop op:sub(1) %137(int32) %147(int32) (flags:0)
  %151(int32). load src:%113(int32) align=1
  %152(int32). binop op:sub(1) %151(int32) %147(int32) (flags:0)
  store dest:%113(int32) value:%152(int32) align=1
  %153(int1). cmp2 op:icmp_eq(32) %151(int32) %147(int32)
  br %153(int1) ? 141 : 8
bb:12 (succs: 14 13)
 defs: [%154,%156]
  %154(int32). binop op:and(10) %128(int32) %74(int32) (flags:0)
  %155(int1). cmp2 op:icmp_eq(32) %154(int32) %73(int32)
  %156(int32). binop op:add(0) %71(int32) %77(int32) (flags:0)
  br %155(int1) ? 14 : 13
bb:13 (succs: 127)
 defs: [%157,%160]
  %157(int32). binop op:add(0) %71(int32) %81(int32) (flags:0)
  %158(int32). binop op:add(0) %71(int32) %78(int32) (flags:0)
  %159(int32). binop op:add(0) %71(int32) %87(int32) (flags:0)
  %160(int32). binop op:add(0) %71(int32) %88(int32) (flags:0)
  br 127
bb:14 (succs: 15)
 defs: [%161,%164]
  %161(int32). binop op:add(0) %71(int32) %78(int32) (flags:0)
  %162(int32). binop op:add(0) %71(int32) %81(int32) (flags:0)
  %163(int32). binop op:add(0) %71(int32) %87(int32) (flags:0)
  %164(int32). binop op:add(0) %71(int32) %88(int32) (flags:0)
  br 15
bb:15 (succs: 16)
 defs: [%165,%167]
  forwardtyperef %174(int32) int32
  %165(int32). phi bb:14=>%127(int32) bb:17=>%174(int32)
  forwardtyperef %171(int32) int32
  %166(int32). phi bb:14=>%73(int32) bb:17=>%171(int32)
  forwardtyperef %173(int32) int32
  %167(int32). phi bb:14=>%73(int32) bb:17=>%173(int32)
  br 16
bb:16 (succs: 17 18)
 defs: [%168,%170]
  forwardtyperef %529(int32) int32
  %168(int32). phi bb:124=>%529(int32) bb:15=>%166(int32)
  forwardtyperef %530(int32) int32
  %169(int32). phi bb:124=>%530(int32) bb:15=>%167(int32)
  %170(int1). cmp2 op:icmp_eq(32) %169(int32) %73(int32)
  br %170(int1) ? 17 : 18
bb:17 (succs: 15)
 defs: [%171,%174]
  %171(int32). load src:%165(int32) align=1
  %172(int32). binop op:add(0) %165(int32) %76(int32) (flags:0)
  %173(int32). load src:%172(int32) align=1
  %174(int32). binop op:add(0) %165(int32) %77(int32) (flags:0)
  br 15
bb:18 (succs: 119 19)
 defs: [%175,%179]
  %175(int32). load src:%156(int32) align=1
  %176(int16). load src:%116(int32) align=1
  %177(int32). cast op:sext(2) %176(int16)
  %178(int32). binop op:and(10) %177(int32) %97(int32) (flags:0)
  %179(int1). cmp2 op:icmp_eq(32) %178(int32) %73(int32)
  br %179(int1) ? 119 : 19
bb:19 (succs: 118 20)
 defs: [%180,%184]
  %180(int1). cmp2 op:icmp_ult(36) %169(int32) %175(int32)
  %181(int32). binop op:and(10) %177(int32) %98(int32) (flags:0)
  %182(int1). cmp2 op:icmp_eq(32) %181(int32) %73(int32)
  %183(int1). binop op:or(11) %180(int1) %182(int1) (flags:0)
  %184(int32). load src:%71(int32) align=1
  br %183(int1) ? 118 : 20
bb:20 (succs: 24 21)
 defs: [%185,%195]
  %185(int32). load src:%161(int32) align=1
  %186(int32). binop op:sub(1) %184(int32) %185(int32) (flags:0)
  %187(int32). load src:%162(int32) align=1
  %188(int32). binop op:mul(2) %187(int32) %82(int32) (flags:0)
  %189(int32). binop op:sdiv(4) %188(int32) %80(int32) (flags:0)
  %190(int32). binop op:add(0) %169(int32) %74(int32) (flags:0)
  %191(int32). binop op:add(0) %190(int32) %186(int32) (flags:0)
  %192(int1). cmp2 op:icmp_ult(36) %189(int32) %191(int32)
  %193(int32). vselect %192(int1) ? %191(int32) : %189(int32)
  %194(int16). binop op:and(10) %176(int16) %112(int16) (flags:0)
  %195(int1). cmp2 op:icmp_eq(32) %194(int16) %110(int16)
  br %195(int1) ? 24 : 21
bb:21 (succs: 22 23)
 defs: [%196,%197]
  %196(int32). call %29(int32(int32)) args: %193(int32)
  %197(int1). cmp2 op:icmp_eq(32) %196(int32) %73(int32)
  br %197(int1) ? 22 : 23
bb:22 (succs: 140)
  store dest:%70(int32) value:%79(int32) align=1
  br 140
bb:23 (succs: 117)
 defs: [%198,%203]
  %198(int32). load src:%161(int32) align=1
  call %0(void(int32,int32,int32,int32,int1))(llvm.memcpy.p0i8.p0i8.i32) args: %196(int32) %198(int32) %186(int32) %74(int32) %109(int1)
  %199(int16). load src:%116(int32) align=1
  %200(int32). cast op:zext(1) %199(int16)
  %201(int32). binop op:and(10) %200(int32) %99(int32) (flags:0)
  %202(int32). binop op:or(11) %201(int32) %100(int32) (flags:0)
  %203(int16). cast op:trunc(0) %202(int32)
  store dest:%116(int32) value:%203(int16) align=1
  br 117
bb:24 (succs: 25 26)
 defs: [%204,%204]
  %204(int1). cmp2 op:icmp_eq(32) %185(int32) %73(int32)
  br %204(int1) ? 25 : 26
bb:25 (succs: 114)
 defs: [%205,%205]
  %205(int32). call %29(int32(int32)) args: %193(int32)
  br 114
bb:26 (succs: 27 28)
 defs: [%206,%206]
  %206(int1). cmp2 op:icmp_ugt(34) %193(int32) %101(int32)
  br %206(int1) ? 27 : 28
bb:27 (succs: 116)
 defs: [%207,%209]
  %207(int32). call %33(int32())(llvm.nacl.read.tp) args:
  %208(int32). binop op:add(0) %207(int32) %91(int32) (flags:0)
  %209(int32). load src:%208(int32) align=1
  store dest:%209(int32) value:%79(int32) align=1
  br 116
bb:28 (succs: 30 29)
 defs: [%210,%210]
  %210(int1). cmp2 op:icmp_ult(36) %193(int32) %92(int32)
  br %210(int1) ? 30 : 29
bb:29 (succs: 30)
 defs: [%211,%212]
  %211(int32). binop op:add(0) %193(int32) %92(int32) (flags:0)
  %212(int32). binop op:and(10) %211(int32) %75(int32) (flags:0)
  br 30
bb:30 (succs: 37 31)
 defs: [%213,%218]
  %213(int32). phi bb:29=>%212(int32) bb:28=>%78(int32)
  %214(int32). binop op:add(0) %185(int32) %75(int32) (flags:0)
  %215(int32). binop op:add(0) %64(int32) %93(int32) (flags:0)
  %216(int32). load src:%215(int32) align=1
  %217(int32). binop op:and(10) %216(int32) %80(int32) (flags:0)
  %218(int1). cmp2 op:icmp_eq(32) %217(int32) %73(int32)
  br %218(int1) ? 37 : 31
bb:31 (succs: 37 32)
 defs: [%219,%221]
  %219(int32). binop op:add(0) %64(int32) %85(int32) (flags:0)
  %220(int32). call %36(int32(int32,int32,int32,int32))(llvm.nacl.atomic.rmw.i32) args: %83(int32) %219(int32) %74(int32) %83(int32)
  %221(int1). cmp2 op:icmp_eq(32) %220(int32) %73(int32)
  br %221(int1) ? 37 : 32
bb:32 (succs: 33 34)
 defs: [%222,%225]
  forwardtyperef %229(int32) int32
  %222(int32). phi bb:31=>%73(int32) bb:34=>%229(int32) bb:36=>%229(int32) bb:35=>%229(int32)
  %223(int32). binop op:add(0) %64(int32) %85(int32) (flags:0)
  %224(int32). call %37(int32(int32,int32))(llvm.nacl.atomic.load.i32) args: %223(int32) %83(int32)
  %225(int1). cmp2 op:icmp_eq(32) %224(int32) %73(int32)
  br %225(int1) ? 33 : 34
bb:33 (succs: 37 34)
 defs: [%226,%228]
  %226(int32). binop op:add(0) %64(int32) %85(int32) (flags:0)
  %227(int32). call %36(int32(int32,int32,int32,int32))(llvm.nacl.atomic.rmw.i32) args: %83(int32) %226(int32) %74(int32) %83(int32)
  %228(int1). cmp2 op:icmp_eq(32) %227(int32) %73(int32)
  br %228(int1) ? 37 : 34
bb:34 (succs: 35 32)
 defs: [%229,%231]
  %229(int32). binop op:add(0) %222(int32) %74(int32) (flags:0)
  %230(int32). binop op:and(10) %229(int32) %102(int32) (flags:0)
  %231(int1). cmp2 op:icmp_eq(32) %230(int32) %73(int32)
  br %231(int1) ? 35 : 32
bb:35 (succs: 32 36)
 defs: [%232,%235]
  %232(int32). binop op:add(0) %46(int32) %78(int32) (flags:0)
  %233(int32). load src:%232(int32) align=1
  %234(int32). call indirect %233(int32) args:
  %235(int1). cmp2 op:icmp_eq(32) %234(int32) %73(int32)
  br %235(int1) ? 32 : 36
bb:36 (succs: 32)
 defs: [%236,%238]
  %236(int32). call %33(int32())(llvm.nacl.read.tp) args:
  %237(int32). binop op:add(0) %236(int32) %91(int32) (flags:0)
  %238(int32). load src:%237(int32) align=1
  store dest:%238(int32) value:%234(int32) align=1
  br 32
bb:37 (succs: 38 107)
 defs: [%239,%251]
  %239(int32). binop op:add(0) %185(int32) %89(int32) (flags:0)
  %240(int32). load src:%239(int32) align=1
  %241(int32). binop op:and(10) %240(int32) %75(int32) (flags:0)
  %242(int32). binop op:add(0) %241(int32) %75(int32) (flags:0)
  %243(int32). binop op:add(0) %185(int32) %242(int32) (flags:0)
  %244(int32). binop op:add(0) %64(int32) %78(int32) (flags:0)
  %245(int32). load src:%244(int32) align=1
  %246(int32). binop op:and(10) %240(int32) %82(int32) (flags:0)
  %247(int1). cmp2 op:icmp_uge(35) %214(int32) %245(int32)
  %248(int1). cmp2 op:icmp_ne(33) %246(int32) %74(int32)
  %249(int1). binop op:and(10) %248(int1) %247(int1) (flags:0)
  %250(int1). cmp2 op:icmp_sgt(38) %242(int32) %75(int32)
  %251(int1). binop op:and(10) %249(int1) %250(int1) (flags:0)
  br %251(int1) ? 38 : 107
bb:38 (succs: 107 39)
 defs: [%252,%257]
  %252(int32). binop op:or(11) %241(int32) %76(int32) (flags:0)
  %253(int32). binop op:add(0) %252(int32) %75(int32) (flags:0)
  %254(int32). binop op:add(0) %185(int32) %253(int32) (flags:0)
  %255(int32). load src:%254(int32) align=1
  %256(int32). binop op:and(10) %255(int32) %74(int32) (flags:0)
  %257(int1). cmp2 op:icmp_eq(32) %256(int32) %73(int32)
  br %257(int1) ? 107 : 39
bb:39 (succs: 40 44)
 defs: [%258,%258]
  %258(int1). cmp2 op:icmp_eq(32) %246(int32) %73(int32)
  br %258(int1) ? 40 : 44
bb:40 (succs: 108 41)
 defs: [%259,%259]
  %259(int1). cmp2 op:icmp_ult(36) %213(int32) %94(int32)
  br %259(int1) ? 108 : 41
bb:41 (succs: 43 42)
 defs: [%260,%261]
  %260(int32). binop op:or(11) %213(int32) %76(int32) (flags:0)
  %261(int1). cmp2 op:icmp_ult(36) %241(int32) %260(int32)
  br %261(int1) ? 43 : 42
bb:42 (succs: 43 108)
 defs: [%262,%266]
  %262(int32). binop op:sub(1) %241(int32) %213(int32) (flags:0)
  %263(int32). binop op:add(0) %63(int32) %77(int32) (flags:0)
  %264(int32). load src:%263(int32) align=1
  %265(int32). binop op:shl(7) %264(int32) %74(int32) (flags:0)
  %266(int1). cmp2 op:icmp_ugt(34) %262(int32) %265(int32)
  br %266(int1) ? 43 : 108
bb:43 (succs: 108)
  br 108
bb:44 (succs: 47 45)
 defs: [%267,%267]
  %267(int1). cmp2 op:icmp_ult(36) %241(int32) %213(int32)
  br %267(int1) ? 47 : 45
bb:45 (succs: 46 108)
 defs: [%268,%269]
  %268(int32). binop op:sub(1) %241(int32) %213(int32) (flags:0)
  %269(int1). cmp2 op:icmp_ugt(34) %268(int32) %95(int32)
  br %269(int1) ? 46 : 108
bb:46 (succs: 108)
 defs: [%270,%280]
  %270(int32). binop op:add(0) %213(int32) %75(int32) (flags:0)
  %271(int32). binop op:add(0) %185(int32) %270(int32) (flags:0)
  %272(int32). binop op:and(10) %240(int32) %74(int32) (flags:0)
  %273(int32). binop op:or(11) %272(int32) %213(int32) (flags:0)
  %274(int32). binop op:or(11) %273(int32) %80(int32) (flags:0)
  store dest:%239(int32) value:%274(int32) align=1
  %275(int32). binop op:or(11) %213(int32) %76(int32) (flags:0)
  %276(int32). binop op:add(0) %275(int32) %75(int32) (flags:0)
  %277(int32). binop op:add(0) %185(int32) %276(int32) (flags:0)
  %278(int32). binop op:or(11) %268(int32) %82(int32) (flags:0)
  store dest:%277(int32) value:%278(int32) align=1
  %279(int32). load src:%254(int32) align=1
  %280(int32). binop op:or(11) %279(int32) %74(int32) (flags:0)
  store dest:%254(int32) value:%280(int32) align=1
  call %32(void(int32,int32)) args: %271(int32) %268(int32)
  br 108
bb:47 (succs: 48 50)
 defs: [%281,%283]
  %281(int32). binop op:add(0) %64(int32) %84(int32) (flags:0)
  %282(int32). load src:%281(int32) align=1
  %283(int1). cmp2 op:icmp_eq(32) %243(int32) %282(int32)
  br %283(int1) ? 48 : 50
bb:48 (succs: 49 108)
 defs: [%284,%287]
  %284(int32). binop op:add(0) %64(int32) %79(int32) (flags:0)
  %285(int32). load src:%284(int32) align=1
  %286(int32). binop op:add(0) %285(int32) %241(int32) (flags:0)
  %287(int1). cmp2 op:icmp_ugt(34) %286(int32) %213(int32)
  br %287(int1) ? 49 : 108
bb:49 (succs: 108)
 defs: [%288,%299]
  %288(int32). binop op:sub(1) %286(int32) %213(int32) (flags:0)
  %289(int32). binop op:add(0) %213(int32) %75(int32) (flags:0)
  %290(int32). binop op:add(0) %185(int32) %289(int32) (flags:0)
  %291(int32). binop op:and(10) %240(int32) %74(int32) (flags:0)
  %292(int32). binop op:or(11) %291(int32) %213(int32) (flags:0)
  %293(int32). binop op:or(11) %292(int32) %80(int32) (flags:0)
  store dest:%239(int32) value:%293(int32) align=1
  %294(int32). binop op:or(11) %213(int32) %76(int32) (flags:0)
  %295(int32). binop op:add(0) %294(int32) %75(int32) (flags:0)
  %296(int32). binop op:add(0) %185(int32) %295(int32) (flags:0)
  %297(int32). binop op:or(11) %288(int32) %74(int32) (flags:0)
  store dest:%296(int32) value:%297(int32) align=1
  %298(int32). binop op:add(0) %64(int32) %84(int32) (flags:0)
  store dest:%298(int32) value:%290(int32) align=1
  %299(int32). binop op:add(0) %64(int32) %79(int32) (flags:0)
  store dest:%299(int32) value:%288(int32) align=1
  br 108
bb:50 (succs: 51 56)
 defs: [%300,%302]
  %300(int32). binop op:add(0) %64(int32) %81(int32) (flags:0)
  %301(int32). load src:%300(int32) align=1
  %302(int1). cmp2 op:icmp_eq(32) %243(int32) %301(int32)
  br %302(int1) ? 51 : 56
bb:51 (succs: 108 52)
 defs: [%303,%306]
  %303(int32). binop op:add(0) %64(int32) %77(int32) (flags:0)
  %304(int32). load src:%303(int32) align=1
  %305(int32). binop op:add(0) %304(int32) %241(int32) (flags:0)
  %306(int1). cmp2 op:icmp_ult(36) %305(int32) %213(int32)
  br %306(int1) ? 108 : 52
bb:52 (succs: 53 54)
 defs: [%307,%308]
  %307(int32). binop op:sub(1) %305(int32) %213(int32) (flags:0)
  %308(int1). cmp2 op:icmp_ugt(34) %307(int32) %95(int32)
  br %308(int1) ? 53 : 54
bb:53 (succs: 55)
 defs: [%309,%323]
  %309(int32). binop op:add(0) %213(int32) %75(int32) (flags:0)
  %310(int32). binop op:add(0) %185(int32) %309(int32) (flags:0)
  %311(int32). binop op:add(0) %305(int32) %75(int32) (flags:0)
  %312(int32). binop op:add(0) %185(int32) %311(int32) (flags:0)
  %313(int32). binop op:and(10) %240(int32) %74(int32) (flags:0)
  %314(int32). binop op:or(11) %313(int32) %213(int32) (flags:0)
  %315(int32). binop op:or(11) %314(int32) %80(int32) (flags:0)
  store dest:%239(int32) value:%315(int32) align=1
  %316(int32). binop op:or(11) %213(int32) %76(int32) (flags:0)
  %317(int32). binop op:add(0) %316(int32) %75(int32) (flags:0)
  %318(int32). binop op:add(0) %185(int32) %317(int32) (flags:0)
  %319(int32). binop op:or(11) %307(int32) %74(int32) (flags:0)
  store dest:%318(int32) value:%319(int32) align=1
  store dest:%312(int32) value:%307(int32) align=1
  %320(int32). binop op:add(0) %305(int32) %89(int32) (flags:0)
  %321(int32). binop op:add(0) %185(int32) %320(int32) (flags:0)
  %322(int32). load src:%321(int32) align=1
  %323(int32). binop op:and(10) %322(int32) %103(int32) (flags:0)
  store dest:%321(int32) value:%323(int32) align=1
  br 55
bb:54 (succs: 55)
 defs: [%324,%330]
  %324(int32). binop op:and(10) %240(int32) %74(int32) (flags:0)
  %325(int32). binop op:or(11) %324(int32) %305(int32) (flags:0)
  %326(int32). binop op:or(11) %325(int32) %80(int32) (flags:0)
  store dest:%239(int32) value:%326(int32) align=1
  %327(int32). binop op:add(0) %305(int32) %89(int32) (flags:0)
  %328(int32). binop op:add(0) %185(int32) %327(int32) (flags:0)
  %329(int32). load src:%328(int32) align=1
  %330(int32). binop op:or(11) %329(int32) %74(int32) (flags:0)
  store dest:%328(int32) value:%330(int32) align=1
  br 55
bb:55 (succs: 108)
 defs: [%331,%334]
  %331(int32). phi bb:53=>%307(int32) bb:54=>%73(int32)
  %332(int32). phi bb:53=>%310(int32) bb:54=>%73(int32)
  %333(int32). binop op:add(0) %64(int32) %77(int32) (flags:0)
  store dest:%333(int32) value:%331(int32) align=1
  %334(int32). binop op:add(0) %64(int32) %81(int32) (flags:0)
  store dest:%334(int32) value:%332(int32) align=1
  br 108
bb:56 (succs: 57 108)
 defs: [%335,%336]
  %335(int32). binop op:and(10) %255(int32) %80(int32) (flags:0)
  %336(int1). cmp2 op:icmp_eq(32) %335(int32) %73(int32)
  br %336(int1) ? 57 : 108
bb:57 (succs: 108 58)
 defs: [%337,%339]
  %337(int32). binop op:and(10) %255(int32) %75(int32) (flags:0)
  %338(int32). binop op:add(0) %337(int32) %241(int32) (flags:0)
  %339(int1). cmp2 op:icmp_ult(36) %338(int32) %213(int32)
  br %339(int1) ? 108 : 58
bb:58 (succs: 59 71)
 defs: [%340,%342]
  %340(int32). binop op:sub(1) %338(int32) %213(int32) (flags:0)
  %341(int32). binop op:lshr(8) %255(int32) %82(int32) (flags:0)
  %342(int1). cmp2 op:icmp_ult(36) %255(int32) %94(int32)
  br %342(int1) ? 59 : 71
bb:59 (succs: 62 60)
 defs: [%343,%351]
  %343(int32). binop op:add(0) %185(int32) %241(int32) (flags:0)
  %344(int32). load src:%343(int32) align=1
  %345(int32). binop op:add(0) %185(int32) %252(int32) (flags:0)
  %346(int32). load src:%345(int32) align=1
  %347(int32). binop op:shl(7) %341(int32) %74(int32) (flags:0)
  %348(int32). binop op:add(0) %64(int32) %104(int32) (flags:0)
  %349(int32). binop op:mul(2) %347(int32) %76(int32) (flags:0)
  %350(int32). binop op:add(0) %348(int32) %349(int32) (flags:0)
  %351(int1). cmp2 op:icmp_eq(32) %344(int32) %350(int32)
  br %351(int1) ? 62 : 60
bb:60 (succs: 70 61)
 defs: [%352,%352]
  %352(int1). cmp2 op:icmp_ult(36) %344(int32) %245(int32)
  br %352(int1) ? 70 : 61
bb:61 (succs: 62 70)
 defs: [%353,%355]
  %353(int32). binop op:add(0) %344(int32) %79(int32) (flags:0)
  %354(int32). load src:%353(int32) align=1
  %355(int1). cmp2 op:icmp_eq(32) %354(int32) %243(int32)
  br %355(int1) ? 62 : 70
bb:62 (succs: 63 64)
 defs: [%356,%356]
  %356(int1). cmp2 op:icmp_eq(32) %346(int32) %344(int32)
  br %356(int1) ? 63 : 64
bb:63 (succs: 104)
 defs: [%357,%360]
  %357(int32). binop op:shl(7) %74(int32) %341(int32) (flags:0)
  %358(int32). binop op:xor(12) %357(int32) %86(int32) (flags:0)
  %359(int32). load src:%64(int32) align=1
  %360(int32). binop op:and(10) %359(int32) %358(int32) (flags:0)
  store dest:%64(int32) value:%360(int32) align=1
  br 104
bb:64 (succs: 65 66)
 defs: [%361,%361]
  %361(int1). cmp2 op:icmp_eq(32) %346(int32) %350(int32)
  br %361(int1) ? 65 : 66
bb:65 (succs: 68)
 defs: [%362,%362]
  %362(int32). binop op:add(0) %346(int32) %77(int32) (flags:0)
  br 68
bb:66 (succs: 69 67)
 defs: [%363,%363]
  %363(int1). cmp2 op:icmp_ult(36) %346(int32) %245(int32)
  br %363(int1) ? 69 : 67
bb:67 (succs: 68 69)
 defs: [%364,%366]
  %364(int32). binop op:add(0) %346(int32) %77(int32) (flags:0)
  %365(int32). load src:%364(int32) align=1
  %366(int1). cmp2 op:icmp_eq(32) %365(int32) %243(int32)
  br %366(int1) ? 68 : 69
bb:68 (succs: 104)
 defs: [%367,%368]
  %367(int32). phi bb:65=>%362(int32) bb:67=>%364(int32)
  %368(int32). binop op:add(0) %344(int32) %79(int32) (flags:0)
  store dest:%368(int32) value:%346(int32) align=1
  store dest:%367(int32) value:%344(int32) align=1
  br 104
bb:69 (succs:)
  call %3(void()) args:
  unreachable
bb:70 (succs:)
  call %3(void()) args:
  unreachable
bb:71 (succs: 77 72)
 defs: [%369,%374]
  %369(int32). binop op:add(0) %241(int32) %78(int32) (flags:0)
  %370(int32). binop op:add(0) %185(int32) %369(int32) (flags:0)
  %371(int32). load src:%370(int32) align=1
  %372(int32). binop op:add(0) %185(int32) %252(int32) (flags:0)
  %373(int32). load src:%372(int32) align=1
  %374(int1). cmp2 op:icmp_eq(32) %373(int32) %243(int32)
  br %374(int1) ? 77 : 72
bb:72 (succs: 76 73)
 defs: [%375,%377]
  %375(int32). binop op:add(0) %185(int32) %241(int32) (flags:0)
  %376(int32). load src:%375(int32) align=1
  %377(int1). cmp2 op:icmp_ult(36) %376(int32) %245(int32)
  br %377(int1) ? 76 : 73
bb:73 (succs: 74 76)
 defs: [%378,%380]
  %378(int32). binop op:add(0) %376(int32) %79(int32) (flags:0)
  %379(int32). load src:%378(int32) align=1
  %380(int1). cmp2 op:icmp_eq(32) %379(int32) %243(int32)
  br %380(int1) ? 74 : 76
bb:74 (succs: 75 76)
 defs: [%381,%383]
  %381(int32). binop op:add(0) %373(int32) %77(int32) (flags:0)
  %382(int32). load src:%381(int32) align=1
  %383(int1). cmp2 op:icmp_eq(32) %382(int32) %243(int32)
  br %383(int1) ? 75 : 76
bb:75 (succs: 84)
  store dest:%378(int32) value:%373(int32) align=1
  store dest:%381(int32) value:%376(int32) align=1
  br 84
bb:76 (succs:)
  call %3(void()) args:
  unreachable
bb:77 (succs: 78 79)
 defs: [%384,%387]
  %384(int32). binop op:add(0) %241(int32) %79(int32) (flags:0)
  %385(int32). binop op:add(0) %185(int32) %384(int32) (flags:0)
  %386(int32). load src:%385(int32) align=1
  %387(int1). cmp2 op:icmp_eq(32) %386(int32) %73(int32)
  br %387(int1) ? 78 : 79
bb:78 (succs: 84 79)
 defs: [%388,%391]
  %388(int32). binop op:add(0) %241(int32) %77(int32) (flags:0)
  %389(int32). binop op:add(0) %185(int32) %388(int32) (flags:0)
  %390(int32). load src:%389(int32) align=1
  %391(int1). cmp2 op:icmp_eq(32) %390(int32) %73(int32)
  br %391(int1) ? 84 : 79
bb:79 (succs: 80 79)
 defs: [%392,%396]
  forwardtyperef %394(int32) int32
  forwardtyperef %397(int32) int32
  %392(int32). phi bb:77=>%385(int32) bb:78=>%389(int32) bb:79=>%394(int32) bb:80=>%397(int32)
  forwardtyperef %395(int32) int32
  forwardtyperef %398(int32) int32
  %393(int32). phi bb:77=>%386(int32) bb:78=>%390(int32) bb:79=>%395(int32) bb:80=>%398(int32)
  %394(int32). binop op:add(0) %393(int32) %81(int32) (flags:0)
  %395(int32). load src:%394(int32) align=1
  %396(int1). cmp2 op:icmp_eq(32) %395(int32) %73(int32)
  br %396(int1) ? 80 : 79
bb:80 (succs: 81 79)
 defs: [%397,%399]
  %397(int32). binop op:add(0) %393(int32) %78(int32) (flags:0)
  %398(int32). load src:%397(int32) align=1
  %399(int1). cmp2 op:icmp_eq(32) %398(int32) %73(int32)
  br %399(int1) ? 81 : 79
bb:81 (succs: 83 82)
 defs: [%400,%400]
  %400(int1). cmp2 op:icmp_ult(36) %392(int32) %245(int32)
  br %400(int1) ? 83 : 82
bb:82 (succs: 84)
  store dest:%392(int32) value:%73(int32) align=1
  br 84
bb:83 (succs:)
  call %3(void()) args:
  unreachable
bb:84 (succs: 104 85)
 defs: [%401,%402]
  %401(int32). phi bb:75=>%373(int32) bb:82=>%393(int32) bb:78=>%73(int32)
  %402(int1). cmp2 op:icmp_eq(32) %371(int32) %73(int32)
  br %402(int1) ? 104 : 85
bb:85 (succs: 86 88)
 defs: [%403,%410]
  %403(int32). binop op:add(0) %241(int32) %81(int32) (flags:0)
  %404(int32). binop op:add(0) %185(int32) %403(int32) (flags:0)
  %405(int32). load src:%404(int32) align=1
  %406(int32). binop op:add(0) %64(int32) %105(int32) (flags:0)
  %407(int32). binop op:mul(2) %405(int32) %76(int32) (flags:0)
  %408(int32). binop op:add(0) %406(int32) %407(int32) (flags:0)
  %409(int32). load src:%408(int32) align=1
  %410(int1). cmp2 op:icmp_eq(32) %243(int32) %409(int32)
  br %410(int1) ? 86 : 88
bb:86 (succs: 87 94)
 defs: [%411,%411]
  store dest:%408(int32) value:%401(int32) align=1
  %411(int1). cmp2 op:icmp_eq(32) %401(int32) %73(int32)
  br %411(int1) ? 87 : 94
bb:87 (succs: 104)
 defs: [%412,%417]
  %412(int32). binop op:shl(7) %74(int32) %405(int32) (flags:0)
  %413(int32). binop op:xor(12) %412(int32) %86(int32) (flags:0)
  %414(int32). binop op:add(0) %64(int32) %76(int32) (flags:0)
  %415(int32). load src:%414(int32) align=1
  %416(int32). binop op:and(10) %415(int32) %413(int32) (flags:0)
  %417(int32). binop op:add(0) %64(int32) %76(int32) (flags:0)
  store dest:%417(int32) value:%416(int32) align=1
  br 104
bb:88 (succs: 92 89)
 defs: [%418,%420]
  %418(int32). binop op:add(0) %64(int32) %78(int32) (flags:0)
  %419(int32). load src:%418(int32) align=1
  %420(int1). cmp2 op:icmp_ult(36) %371(int32) %419(int32)
  br %420(int1) ? 92 : 89
bb:89 (succs: 90 91)
 defs: [%421,%423]
  %421(int32). binop op:add(0) %371(int32) %78(int32) (flags:0)
  %422(int32). load src:%421(int32) align=1
  %423(int1). cmp2 op:icmp_eq(32) %422(int32) %243(int32)
  br %423(int1) ? 90 : 91
bb:90 (succs: 93)
  store dest:%421(int32) value:%401(int32) align=1
  br 93
bb:91 (succs: 93)
 defs: [%424,%424]
  %424(int32). binop op:add(0) %371(int32) %81(int32) (flags:0)
  store dest:%424(int32) value:%401(int32) align=1
  br 93
bb:92 (succs:)
  call %3(void()) args:
  unreachable
bb:93 (succs: 104 94)
 defs: [%425,%425]
  %425(int1). cmp2 op:icmp_eq(32) %401(int32) %73(int32)
  br %425(int1) ? 104 : 94
bb:94 (succs: 103 95)
 defs: [%426,%428]
  %426(int32). binop op:add(0) %64(int32) %78(int32) (flags:0)
  %427(int32). load src:%426(int32) align=1
  %428(int1). cmp2 op:icmp_ult(36) %401(int32) %427(int32)
  br %428(int1) ? 103 : 95
bb:95 (succs: 99 96)
 defs: [%429,%433]
  %429(int32). binop op:add(0) %401(int32) %84(int32) (flags:0)
  store dest:%429(int32) value:%371(int32) align=1
  %430(int32). binop op:add(0) %241(int32) %77(int32) (flags:0)
  %431(int32). binop op:add(0) %185(int32) %430(int32) (flags:0)
  %432(int32). load src:%431(int32) align=1
  %433(int1). cmp2 op:icmp_eq(32) %432(int32) %73(int32)
  br %433(int1) ? 99 : 96
bb:96 (succs: 98 97)
 defs: [%434,%434]
  %434(int1). cmp2 op:icmp_ult(36) %432(int32) %427(int32)
  br %434(int1) ? 98 : 97
bb:97 (succs: 99)
 defs: [%435,%436]
  %435(int32). binop op:add(0) %401(int32) %78(int32) (flags:0)
  store dest:%435(int32) value:%432(int32) align=1
  %436(int32). binop op:add(0) %432(int32) %84(int32) (flags:0)
  store dest:%436(int32) value:%401(int32) align=1
  br 99
bb:98 (succs:)
  call %3(void()) args:
  unreachable
bb:99 (succs: 104 100)
 defs: [%437,%440]
  %437(int32). binop op:add(0) %241(int32) %79(int32) (flags:0)
  %438(int32). binop op:add(0) %185(int32) %437(int32) (flags:0)
  %439(int32). load src:%438(int32) align=1
  %440(int1). cmp2 op:icmp_eq(32) %439(int32) %73(int32)
  br %440(int1) ? 104 : 100
bb:100 (succs: 102 101)
 defs: [%441,%443]
  %441(int32). binop op:add(0) %64(int32) %78(int32) (flags:0)
  %442(int32). load src:%441(int32) align=1
  %443(int1). cmp2 op:icmp_ult(36) %439(int32) %442(int32)
  br %443(int1) ? 102 : 101
bb:101 (succs: 104)
 defs: [%444,%445]
  %444(int32). binop op:add(0) %401(int32) %81(int32) (flags:0)
  store dest:%444(int32) value:%439(int32) align=1
  %445(int32). binop op:add(0) %439(int32) %84(int32) (flags:0)
  store dest:%445(int32) value:%401(int32) align=1
  br 104
bb:102 (succs:)
  call %3(void()) args:
  unreachable
bb:103 (succs:)
  call %3(void()) args:
  unreachable
bb:104 (succs: 105 106)
 defs: [%446,%446]
  %446(int1). cmp2 op:icmp_ult(36) %340(int32) %78(int32)
  br %446(int1) ? 105 : 106
bb:105 (succs: 108)
 defs: [%447,%454]
  %447(int32). binop op:and(10) %240(int32) %74(int32) (flags:0)
  %448(int32). binop op:or(11) %338(int32) %447(int32) (flags:0)
  %449(int32). binop op:or(11) %448(int32) %80(int32) (flags:0)
  store dest:%239(int32) value:%449(int32) align=1
  %450(int32). binop op:or(11) %338(int32) %76(int32) (flags:0)
  %451(int32). binop op:add(0) %450(int32) %75(int32) (flags:0)
  %452(int32). binop op:add(0) %185(int32) %451(int32) (flags:0)
  %453(int32). load src:%452(int32) align=1
  %454(int32). binop op:or(11) %453(int32) %74(int32) (flags:0)
  store dest:%452(int32) value:%454(int32) align=1
  br 108
bb:106 (succs: 108)
 defs: [%455,%468]
  %455(int32). binop op:add(0) %213(int32) %75(int32) (flags:0)
  %456(int32). binop op:add(0) %185(int32) %455(int32) (flags:0)
  %457(int32). binop op:and(10) %240(int32) %74(int32) (flags:0)
  %458(int32). binop op:or(11) %457(int32) %213(int32) (flags:0)
  %459(int32). binop op:or(11) %458(int32) %80(int32) (flags:0)
  store dest:%239(int32) value:%459(int32) align=1
  %460(int32). binop op:or(11) %213(int32) %76(int32) (flags:0)
  %461(int32). binop op:add(0) %460(int32) %75(int32) (flags:0)
  %462(int32). binop op:add(0) %185(int32) %461(int32) (flags:0)
  %463(int32). binop op:or(11) %340(int32) %82(int32) (flags:0)
  store dest:%462(int32) value:%463(int32) align=1
  %464(int32). binop op:or(11) %338(int32) %76(int32) (flags:0)
  %465(int32). binop op:add(0) %464(int32) %75(int32) (flags:0)
  %466(int32). binop op:add(0) %185(int32) %465(int32) (flags:0)
  %467(int32). load src:%466(int32) align=1
  %468(int32). binop op:or(11) %467(int32) %74(int32) (flags:0)
  store dest:%466(int32) value:%468(int32) align=1
  call %32(void(int32,int32)) args: %456(int32) %340(int32)
  br 108
bb:107 (succs:)
  call %3(void()) args:
  unreachable
bb:108 (succs: 110 109)
 defs: [%469,%473]
  %469(int32). phi bb:49=>%214(int32) bb:48=>%73(int32) bb:55=>%214(int32) bb:51=>%73(int32) bb:56=>%73(int32) bb:57=>%73(int32) bb:46=>%214(int32) bb:45=>%214(int32) bb:106=>%214(int32) bb:105=>%214(int32) bb:43=>%73(int32) bb:40=>%73(int32) bb:42=>%214(int32)
  %470(int32). binop op:add(0) %64(int32) %93(int32) (flags:0)
  %471(int32). load src:%470(int32) align=1
  %472(int32). binop op:and(10) %471(int32) %80(int32) (flags:0)
  %473(int1). cmp2 op:icmp_eq(32) %472(int32) %73(int32)
  br %473(int1) ? 110 : 109
bb:109 (succs: 110)
 defs: [%474,%474]
  %474(int32). binop op:add(0) %64(int32) %85(int32) (flags:0)
  call %38(void(int32,int32,int32))(llvm.nacl.atomic.store.i32) args: %73(int32) %474(int32) %76(int32)
  br 110
bb:110 (succs: 112 111)
 defs: [%475,%475]
  %475(int1). cmp2 op:icmp_eq(32) %469(int32) %73(int32)
  br %475(int1) ? 112 : 111
bb:111 (succs: 114)
 defs: [%476,%476]
  %476(int32). binop op:add(0) %469(int32) %77(int32) (flags:0)
  br 114
bb:112 (succs: 115 113)
 defs: [%477,%478]
  %477(int32). call %29(int32(int32)) args: %193(int32)
  %478(int1). cmp2 op:icmp_eq(32) %477(int32) %73(int32)
  br %478(int1) ? 115 : 113
bb:113 (succs: 117)
 defs: [%479,%486]
  %479(int32). load src:%239(int32) align=1
  %480(int32). binop op:and(10) %479(int32) %75(int32) (flags:0)
  %481(int32). binop op:and(10) %479(int32) %82(int32) (flags:0)
  %482(int1). cmp2 op:icmp_eq(32) %481(int32) %73(int32)
  %483(int32). vselect %482(int1) ? %77(int32) : %76(int32)
  %484(int32). binop op:sub(1) %480(int32) %483(int32) (flags:0)
  %485(int1). cmp2 op:icmp_ult(36) %484(int32) %193(int32)
  %486(int32). vselect %485(int1) ? %484(int32) : %193(int32)
  call %0(void(int32,int32,int32,int32,int1))(llvm.memcpy.p0i8.p0i8.i32) args: %477(int32) %185(int32) %486(int32) %74(int32) %109(int1)
  call %30(void(int32)) args: %185(int32)
  br 117
bb:114 (succs: 115 117)
 defs: [%487,%488]
  %487(int32). phi bb:25=>%205(int32) bb:111=>%476(int32)
  %488(int1). cmp2 op:icmp_eq(32) %487(int32) %73(int32)
  br %488(int1) ? 115 : 117
bb:115 (succs: 116)
 defs: [%489,%489]
  %489(int32). load src:%161(int32) align=1
  br 116
bb:116 (succs: 140)
 defs: [%490,%494]
  %490(int32). phi bb:115=>%489(int32) bb:27=>%185(int32)
  call %30(void(int32)) args: %490(int32)
  %491(int16). load src:%116(int32) align=1
  %492(int32). cast op:zext(1) %491(int16)
  %493(int32). binop op:and(10) %492(int32) %106(int32) (flags:0)
  %494(int16). cast op:trunc(0) %493(int32)
  store dest:%116(int32) value:%494(int16) align=1
  store dest:%70(int32) value:%79(int32) align=1
  br 140
bb:117 (succs: 118)
 defs: [%495,%497]
  %495(int32). phi bb:23=>%196(int32) bb:114=>%487(int32) bb:113=>%477(int32)
  store dest:%161(int32) value:%495(int32) align=1
  %496(int32). binop op:add(0) %495(int32) %186(int32) (flags:0)
  store dest:%71(int32) value:%496(int32) align=1
  store dest:%162(int32) value:%193(int32) align=1
  %497(int32). binop op:sub(1) %193(int32) %186(int32) (flags:0)
  store dest:%156(int32) value:%497(int32) align=1
  br 118
bb:118 (succs: 124)
 defs: [%498,%505]
  %498(int32). phi bb:117=>%496(int32) bb:19=>%184(int32)
  %499(int32). phi bb:117=>%169(int32) bb:19=>%175(int32)
  %500(int1). cmp2 op:icmp_ult(36) %169(int32) %499(int32)
  %501(int32). vselect %500(int1) ? %169(int32) : %499(int32)
  call %35(void(int32,int32,int32,int32,int1))(llvm.memmove.p0i8.p0i8.i32) args: %498(int32) %168(int32) %501(int32) %74(int32) %109(int1)
  %502(int32). load src:%156(int32) align=1
  %503(int32). binop op:sub(1) %502(int32) %501(int32) (flags:0)
  store dest:%156(int32) value:%503(int32) align=1
  %504(int32). load src:%71(int32) align=1
  %505(int32). binop op:add(0) %504(int32) %501(int32) (flags:0)
  store dest:%71(int32) value:%505(int32) align=1
  br 124
bb:119 (succs: 121 120)
 defs: [%506,%508]
  %506(int32). load src:%71(int32) align=1
  %507(int32). load src:%161(int32) align=1
  %508(int1). cmp2 op:icmp_ugt(34) %506(int32) %507(int32)
  br %508(int1) ? 121 : 120
bb:120 (succs: 121 123)
 defs: [%509,%510]
  %509(int32). load src:%162(int32) align=1
  %510(int1). cmp2 op:icmp_ult(36) %169(int32) %509(int32)
  br %510(int1) ? 121 : 123
bb:121 (succs: 122 124)
 defs: [%511,%517]
  %511(int1). cmp2 op:icmp_ult(36) %169(int32) %175(int32)
  %512(int32). vselect %511(int1) ? %169(int32) : %175(int32)
  call %35(void(int32,int32,int32,int32,int1))(llvm.memmove.p0i8.p0i8.i32) args: %506(int32) %168(int32) %512(int32) %74(int32) %109(int1)
  %513(int32). load src:%156(int32) align=1
  %514(int32). binop op:sub(1) %513(int32) %512(int32) (flags:0)
  store dest:%156(int32) value:%514(int32) align=1
  %515(int32). load src:%71(int32) align=1
  %516(int32). binop op:add(0) %515(int32) %512(int32) (flags:0)
  store dest:%71(int32) value:%516(int32) align=1
  %517(int1). cmp2 op:icmp_eq(32) %513(int32) %512(int32)
  br %517(int1) ? 122 : 124
bb:122 (succs: 124 140)
 defs: [%518,%519]
  %518(int32). call %22(int32(int32,int32)) args: %70(int32) %71(int32)
  %519(int1). cmp2 op:icmp_eq(32) %518(int32) %73(int32)
  br %519(int1) ? 124 : 140
bb:123 (succs: 140 124)
 defs: [%520,%527]
  %520(int1). cmp2 op:icmp_ult(36) %169(int32) %96(int32)
  %521(int32). vselect %520(int1) ? %169(int32) : %96(int32)
  %522(int32). binop op:srem(6) %521(int32) %509(int32) (flags:0)
  %523(int32). binop op:sub(1) %521(int32) %522(int32) (flags:0)
  %524(int32). load src:%163(int32) align=1
  %525(int32). load src:%164(int32) align=1
  %526(int32). call indirect %524(int32) args: %70(int32) %525(int32) %168(int32) %523(int32)
  %527(int1). cmp2 op:icmp_slt(40) %526(int32) %74(int32)
  br %527(int1) ? 140 : 124
bb:124 (succs: 141 16)
 defs: [%528,%533]
  %528(int32). phi bb:118=>%169(int32) bb:122=>%512(int32) bb:121=>%512(int32) bb:123=>%526(int32)
  %529(int32). binop op:add(0) %168(int32) %528(int32) (flags:0)
  %530(int32). binop op:sub(1) %169(int32) %528(int32) (flags:0)
  %531(int32). load src:%113(int32) align=1
  %532(int32). binop op:sub(1) %531(int32) %528(int32) (flags:0)
  store dest:%113(int32) value:%532(int32) align=1
  %533(int1). cmp2 op:icmp_eq(32) %531(int32) %528(int32)
  br %533(int1) ? 141 : 16
bb:125 (succs: 126 128)
 defs: [%534,%538]
  forwardtyperef %584(int32) int32
  forwardtyperef %544(int32) int32
  %534(int32). phi bb:139=>%584(int32) bb:127=>%544(int32)
  forwardtyperef %585(int32) int32
  forwardtyperef %545(int32) int32
  %535(int32). phi bb:139=>%585(int32) bb:127=>%545(int32)
  forwardtyperef %583(int32) int32
  %536(int32). phi bb:139=>%583(int32) bb:127=>%73(int32)
  forwardtyperef %579(int32) int32
  forwardtyperef %546(int32) int32
  %537(int32). phi bb:139=>%579(int32) bb:127=>%546(int32)
  %538(int1). cmp2 op:icmp_eq(32) %535(int32) %73(int32)
  br %538(int1) ? 126 : 128
bb:126 (succs: 127)
 defs: [%539,%542]
  forwardtyperef %543(int32) int32
  %539(int32). load src:%543(int32) align=1
  %540(int32). binop op:add(0) %543(int32) %76(int32) (flags:0)
  %541(int32). load src:%540(int32) align=1
  %542(int32). binop op:add(0) %543(int32) %77(int32) (flags:0)
  br 127
bb:127 (succs: 125)
 defs: [%543,%546]
  %543(int32). phi bb:13=>%127(int32) bb:126=>%542(int32)
  %544(int32). phi bb:13=>%73(int32) bb:126=>%539(int32)
  %545(int32). phi bb:13=>%73(int32) bb:126=>%541(int32)
  %546(int32). phi bb:13=>%73(int32) bb:126=>%537(int32)
  br 125
bb:128 (succs: 129 132)
 defs: [%547,%547]
  %547(int1). cmp2 op:icmp_eq(32) %536(int32) %73(int32)
  br %547(int1) ? 129 : 132
bb:129 (succs: 131 130)
 defs: [%548,%549]
  %548(int32). call %19(int32(int32,int32,int32)) args: %534(int32) %107(int32) %535(int32)
  %549(int1). cmp2 op:icmp_eq(32) %548(int32) %73(int32)
  br %549(int1) ? 131 : 130
bb:130 (succs: 132)
 defs: [%550,%551]
  %550(int32). binop op:add(0) %548(int32) %74(int32) (flags:0)
  %551(int32). binop op:sub(1) %550(int32) %534(int32) (flags:0)
  br 132
bb:131 (succs: 132)
 defs: [%552,%552]
  %552(int32). binop op:add(0) %535(int32) %74(int32) (flags:0)
  br 132
bb:132 (succs: 133 134)
 defs: [%553,%564]
  %553(int32). phi bb:128=>%536(int32) bb:131=>%74(int32) bb:130=>%74(int32)
  %554(int32). phi bb:128=>%537(int32) bb:131=>%552(int32) bb:130=>%551(int32)
  %555(int1). cmp2 op:icmp_ult(36) %535(int32) %554(int32)
  %556(int32). vselect %555(int1) ? %535(int32) : %554(int32)
  %557(int32). load src:%156(int32) align=1
  %558(int32). load src:%157(int32) align=1
  %559(int32). binop op:add(0) %558(int32) %557(int32) (flags:0)
  %560(int32). load src:%71(int32) align=1
  %561(int32). load src:%158(int32) align=1
  %562(int1). cmp2 op:icmp_ugt(34) %560(int32) %561(int32)
  %563(int1). cmp2 op:icmp_sgt(38) %556(int32) %559(int32)
  %564(int1). binop op:and(10) %563(int1) %562(int1) (flags:0)
  br %564(int1) ? 133 : 134
bb:133 (succs: 137 140)
 defs: [%565,%568]
  call %35(void(int32,int32,int32,int32,int1))(llvm.memmove.p0i8.p0i8.i32) args: %560(int32) %534(int32) %559(int32) %74(int32) %109(int1)
  %565(int32). load src:%71(int32) align=1
  %566(int32). binop op:add(0) %565(int32) %559(int32) (flags:0)
  store dest:%71(int32) value:%566(int32) align=1
  %567(int32). call %22(int32(int32,int32)) args: %70(int32) %71(int32)
  %568(int1). cmp2 op:icmp_eq(32) %567(int32) %73(int32)
  br %568(int1) ? 137 : 140
bb:134 (succs: 136 135)
 defs: [%569,%569]
  %569(int1). cmp2 op:icmp_slt(40) %556(int32) %558(int32)
  br %569(int1) ? 136 : 135
bb:135 (succs: 140 137)
 defs: [%570,%573]
  %570(int32). load src:%159(int32) align=1
  %571(int32). load src:%160(int32) align=1
  %572(int32). call indirect %570(int32) args: %70(int32) %571(int32) %534(int32) %558(int32)
  %573(int1). cmp2 op:icmp_slt(40) %572(int32) %74(int32)
  br %573(int1) ? 140 : 137
bb:136 (succs: 137)
 defs: [%574,%577]
  call %35(void(int32,int32,int32,int32,int1))(llvm.memmove.p0i8.p0i8.i32) args: %560(int32) %534(int32) %556(int32) %74(int32) %109(int1)
  %574(int32). load src:%156(int32) align=1
  %575(int32). binop op:sub(1) %574(int32) %556(int32) (flags:0)
  store dest:%156(int32) value:%575(int32) align=1
  %576(int32). load src:%71(int32) align=1
  %577(int32). binop op:add(0) %576(int32) %556(int32) (flags:0)
  store dest:%71(int32) value:%577(int32) align=1
  br 137
bb:137 (succs: 138 139)
 defs: [%578,%580]
  %578(int32). phi bb:133=>%559(int32) bb:135=>%572(int32) bb:136=>%556(int32)
  %579(int32). binop op:sub(1) %554(int32) %578(int32) (flags:0)
  %580(int1). cmp2 op:icmp_eq(32) %554(int32) %578(int32)
  br %580(int1) ? 138 : 139
bb:138 (succs: 139 140)
 defs: [%581,%582]
  %581(int32). call %22(int32(int32,int32)) args: %70(int32) %71(int32)
  %582(int1). cmp2 op:icmp_eq(32) %581(int32) %73(int32)
  br %582(int1) ? 139 : 140
bb:139 (succs: 141 125)
 defs: [%583,%588]
  %583(int32). phi bb:137=>%553(int32) bb:138=>%73(int32)
  %584(int32). binop op:add(0) %534(int32) %578(int32) (flags:0)
  %585(int32). binop op:sub(1) %535(int32) %578(int32) (flags:0)
  %586(int32). load src:%113(int32) align=1
  %587(int32). binop op:sub(1) %586(int32) %578(int32) (flags:0)
  store dest:%113(int32) value:%587(int32) align=1
  %588(int1). cmp2 op:icmp_eq(32) %586(int32) %578(int32)
  br %588(int1) ? 141 : 125
bb:140 (succs: 141)
 defs: [%589,%592]
  %589(int16). load src:%116(int32) align=1
  %590(int32). cast op:zext(1) %589(int16)
  %591(int32). binop op:or(11) %590(int32) %108(int32) (flags:0)
  %592(int16). cast op:trunc(0) %591(int32)
  store dest:%116(int32) value:%592(int16) align=1
  br 141
bb:141 (succs:)
 defs: [%593,%593]
  %593(int32). phi bb:140=>%86(int32) bb:0=>%73(int32) bb:3=>%86(int32) bb:124=>%73(int32) bb:139=>%73(int32) bb:11=>%73(int32)
  ret %593(int32)
*** END BLOCK
*** SUBBLOCK FUNCTION (12)
function %19
  %70. function arg 0
  %71. function arg 1
  %72. function arg 2
num bbs:15
*** SUBBLOCK CONSTANTS (11)
  constants settype 0 (int32)
  %73. integer 0
  %74. integer 3
  %75. integer -1
  %76. integer 1
  %77. integer 4
  %78. integer -2139062144
  %79. integer 255
  %80. integer 8
  %81. integer 16
  %82. integer -16843009
  %83. integer -4
*** END BLOCK
bb:0 (succs: 5 1)
 defs: [%84,%85]
  %84(int32). binop op:and(10) %70(int32) %74(int32) (flags:0)
  %85(int1). cmp2 op:icmp_eq(32) %84(int32) %73(int32)
  br %85(int1) ? 5 : 1
bb:1 (succs: 2)
 defs: [%86,%86]
  %86(int8). cast op:trunc(0) %71(int32)
  br 2
bb:2 (succs: 14 3)
 defs: [%87,%90]
  forwardtyperef %93(int32) int32
  %87(int32). phi bb:1=>%70(int32) bb:4=>%93(int32)
  forwardtyperef %89(int32) int32
  %88(int32). phi bb:1=>%72(int32) bb:4=>%89(int32)
  %89(int32). binop op:add(0) %88(int32) %75(int32) (flags:0)
  %90(int1). cmp2 op:icmp_eq(32) %88(int32) %73(int32)
  br %90(int1) ? 14 : 3
bb:3 (succs: 14 4)
 defs: [%91,%92]
  %91(int8). load src:%87(int32) align=1
  %92(int1). cmp2 op:icmp_eq(32) %91(int8) %86(int8)
  br %92(int1) ? 14 : 4
bb:4 (succs: 5 2)
 defs: [%93,%95]
  %93(int32). binop op:add(0) %87(int32) %76(int32) (flags:0)
  %94(int32). binop op:and(10) %93(int32) %74(int32) (flags:0)
  %95(int1). cmp2 op:icmp_eq(32) %94(int32) %73(int32)
  br %95(int1) ? 5 : 2
bb:5 (succs: 10 6)
 defs: [%96,%98]
  %96(int32). phi bb:0=>%70(int32) bb:4=>%93(int32)
  %97(int32). phi bb:0=>%72(int32) bb:4=>%89(int32)
  %98(int1). cmp2 op:icmp_ult(36) %97(int32) %77(int32)
  br %98(int1) ? 10 : 6
bb:6 (succs: 7)
 defs: [%99,%103]
  %99(int32). binop op:and(10) %71(int32) %79(int32) (flags:0)
  %100(int32). binop op:shl(7) %99(int32) %80(int32) (flags:0)
  %101(int32). binop op:or(11) %100(int32) %99(int32) (flags:0)
  %102(int32). binop op:shl(7) %101(int32) %81(int32) (flags:0)
  %103(int32). binop op:or(11) %102(int32) %101(int32) (flags:0)
  br 7
bb:7 (succs: 8 9)
 defs: [%104,%112]
  forwardtyperef %114(int32) int32
  %104(int32). phi bb:6=>%96(int32) bb:8=>%114(int32)
  forwardtyperef %113(int32) int32
  %105(int32). phi bb:6=>%97(int32) bb:8=>%113(int32)
  %106(int32). load src:%104(int32) align=1
  %107(int32). binop op:xor(12) %106(int32) %103(int32) (flags:0)
  %108(int32). binop op:add(0) %107(int32) %82(int32) (flags:0)
  %109(int32). binop op:and(10) %107(int32) %78(int32) (flags:0)
  %110(int32). binop op:xor(12) %109(int32) %78(int32) (flags:0)
  %111(int32). binop op:and(10) %110(int32) %108(int32) (flags:0)
  %112(int1). cmp2 op:icmp_eq(32) %111(int32) %73(int32)
  br %112(int1) ? 8 : 9
bb:8 (succs: 7 9)
 defs: [%113,%115]
  %113(int32). binop op:add(0) %105(int32) %83(int32) (flags:0)
  %114(int32). binop op:add(0) %104(int32) %77(int32) (flags:0)
  %115(int1). cmp2 op:icmp_ugt(34) %113(int32) %74(int32)
  br %115(int1) ? 7 : 9
bb:9 (succs: 10)
 defs: [%116,%117]
  %116(int32). phi bb:7=>%104(int32) bb:8=>%114(int32)
  %117(int32). phi bb:7=>%105(int32) bb:8=>%113(int32)
  br 10
bb:10 (succs: 14 11)
 defs: [%118,%120]
  %118(int32). phi bb:9=>%117(int32) bb:5=>%97(int32)
  %119(int32). phi bb:9=>%116(int32) bb:5=>%96(int32)
  %120(int1). cmp2 op:icmp_eq(32) %118(int32) %73(int32)
  br %120(int1) ? 14 : 11
bb:11 (succs: 12)
 defs: [%121,%121]
  %121(int8). cast op:trunc(0) %71(int32)
  br 12
bb:12 (succs: 14 13)
 defs: [%122,%126]
  forwardtyperef %124(int32) int32
  %122(int32). phi bb:11=>%118(int32) bb:13=>%124(int32)
  forwardtyperef %127(int32) int32
  %123(int32). phi bb:11=>%119(int32) bb:13=>%127(int32)
  %124(int32). binop op:add(0) %122(int32) %75(int32) (flags:0)
  %125(int8). load src:%123(int32) align=1
  %126(int1). cmp2 op:icmp_eq(32) %125(int8) %121(int8)
  br %126(int1) ? 14 : 13
bb:13 (succs: 14 12)
 defs: [%127,%128]
  %127(int32). binop op:add(0) %123(int32) %76(int32) (flags:0)
  %128(int1). cmp2 op:icmp_eq(32) %124(int32) %73(int32)
  br %128(int1) ? 14 : 12
bb:14 (succs:)
 defs: [%129,%129]
  %129(int32). phi bb:10=>%73(int32) bb:13=>%73(int32) bb:12=>%123(int32) bb:2=>%73(int32) bb:3=>%87(int32)
  ret %129(int32)
*** END BLOCK
*** SUBBLOCK FUNCTION (12)
function %20
  %70. function arg 0
  %71. function arg 1
num bbs:54
*** SUBBLOCK CONSTANTS (11)
  constants settype 0 (int32)
  %72. integer 0
  %73. integer 20
  %74. integer 1024
  %75. integer 8
  %76. integer 16
  %77. integer 64
  %78. integer 1
  %79. integer 4
  %80. integer 56
  %81. integer 32
  %82. integer 67
  %83. integer 24
  %84. integer 2048
  %85. integer 2
  %86. integer 128
  %87. integer 52
  %88. integer -1
  %89. integer 104
  %90. integer -1144
  %91. integer 12
  %92. integer 9
  %93. integer 48
  %94. integer 65499
  %95. integer 14
  %96. integer 126976
  %97. integer 8192
  %98. integer 32768
  %99. integer 40
  %100. integer 76
  %101. integer 512
  %102. integer 60
  %103. integer 38
  constants settype 3 (int16)
  %104. integer 0
  %105. integer 640
  %106. integer 512
  %107. integer 2
  %108. integer 128
*** END BLOCK
bb:0 (succs: 3 1)
 defs: [%109,%114]
  %109(int32). alloca %79(int32) align=4
  %110(int32). alloca %89(int32) align=8
  %111(int32). call %33(int32())(llvm.nacl.read.tp) args:
  %112(int32). binop op:add(0) %111(int32) %90(int32) (flags:0)
  %113(int32). load src:%112(int32) align=1
  %114(int1). cmp2 op:icmp_eq(32) %113(int32) %72(int32)
  br %114(int1) ? 3 : 1
bb:1 (succs: 2 3)
 defs: [%115,%117]
  %115(int32). binop op:add(0) %113(int32) %80(int32) (flags:0)
  %116(int32). load src:%115(int32) align=1
  %117(int1). cmp2 op:icmp_eq(32) %116(int32) %72(int32)
  br %117(int1) ? 2 : 3
bb:2 (succs: 3)
  call %23(void(int32)) args: %113(int32)
  br 3
bb:3 (succs: 4 13)
 defs: [%118,%122]
  %118(int32). binop op:add(0) %71(int32) %91(int32) (flags:0)
  %119(int16). load src:%118(int32) align=1
  %120(int32). cast op:sext(2) %119(int16)
  %121(int32). binop op:and(10) %120(int32) %75(int32) (flags:0)
  %122(int1). cmp2 op:icmp_eq(32) %121(int32) %72(int32)
  br %122(int1) ? 4 : 13
bb:4 (succs: 5 6)
 defs: [%123,%124]
  %123(int32). binop op:and(10) %120(int32) %76(int32) (flags:0)
  %124(int1). cmp2 op:icmp_eq(32) %123(int32) %72(int32)
  br %124(int1) ? 5 : 6
bb:5 (succs: 53)
 defs: [%125,%127]
  store dest:%70(int32) value:%92(int32) align=1
  %125(int32). cast op:zext(1) %119(int16)
  %126(int32). binop op:or(11) %125(int32) %77(int32) (flags:0)
  %127(int16). cast op:trunc(0) %126(int32)
  store dest:%118(int32) value:%127(int16) align=1
  br 53
bb:6 (succs: 12 7)
 defs: [%128,%129]
  %128(int32). binop op:and(10) %120(int32) %79(int32) (flags:0)
  %129(int1). cmp2 op:icmp_eq(32) %128(int32) %72(int32)
  br %129(int1) ? 12 : 7
bb:7 (succs: 11 8)
 defs: [%130,%132]
  %130(int32). binop op:add(0) %71(int32) %93(int32) (flags:0)
  %131(int32). load src:%130(int32) align=1
  %132(int1). cmp2 op:icmp_eq(32) %131(int32) %72(int32)
  br %132(int1) ? 11 : 8
bb:8 (succs: 10 9)
 defs: [%133,%134]
  %133(int32). binop op:add(0) %71(int32) %77(int32) (flags:0)
  %134(int1). cmp2 op:icmp_eq(32) %131(int32) %133(int32)
  br %134(int1) ? 10 : 9
bb:9 (succs: 10)
 defs: [%135,%135]
  call %30(void(int32)) args: %131(int32)
  %135(int16). load src:%118(int32) align=1
  br 10
bb:10 (succs: 11)
 defs: [%136,%136]
  %136(int16). phi bb:8=>%119(int16) bb:9=>%135(int16)
  store dest:%130(int32) value:%72(int32) align=1
  br 11
bb:11 (succs: 12)
 defs: [%137,%143]
  %137(int16). phi bb:7=>%119(int16) bb:10=>%136(int16)
  %138(int32). cast op:zext(1) %137(int16)
  %139(int32). binop op:and(10) %138(int32) %94(int32) (flags:0)
  %140(int16). cast op:trunc(0) %139(int32)
  store dest:%118(int32) value:%140(int16) align=1
  %141(int32). binop op:add(0) %71(int32) %79(int32) (flags:0)
  store dest:%141(int32) value:%72(int32) align=1
  %142(int32). binop op:add(0) %71(int32) %76(int32) (flags:0)
  %143(int32). load src:%142(int32) align=1
  store dest:%71(int32) value:%143(int32) align=1
  br 12
bb:12 (succs: 13)
 defs: [%144,%147]
  %144(int16). phi bb:6=>%119(int16) bb:11=>%140(int16)
  %145(int32). cast op:zext(1) %144(int16)
  %146(int32). binop op:or(11) %145(int32) %75(int32) (flags:0)
  %147(int16). cast op:trunc(0) %146(int32)
  store dest:%118(int32) value:%147(int16) align=1
  br 13
bb:13 (succs: 46 14)
 defs: [%148,%154]
  %148(int16). phi bb:12=>%147(int16) bb:3=>%119(int16)
  %149(int32). binop op:add(0) %71(int32) %76(int32) (flags:0)
  %150(int32). load src:%149(int32) align=1
  %151(int1). cmp2 op:icmp_ne(33) %150(int32) %72(int32)
  %152(int16). binop op:and(10) %148(int16) %105(int16) (flags:0)
  %153(int1). cmp2 op:icmp_eq(32) %152(int16) %106(int16)
  %154(int1). binop op:or(11) %151(int1) %153(int1) (flags:0)
  br %154(int1) ? 46 : 14
bb:14 (succs: 16 15)
 defs: [%155,%156]
  %155(int16). binop op:and(10) %148(int16) %107(int16) (flags:0)
  %156(int1). cmp2 op:icmp_eq(32) %155(int16) %104(int16)
  br %156(int1) ? 16 : 15
bb:15 (succs: 45)
 defs: [%157,%158]
  %157(int32). binop op:add(0) %71(int32) %82(int32) (flags:0)
  store dest:%71(int32) value:%157(int32) align=1
  store dest:%149(int32) value:%157(int32) align=1
  %158(int32). binop op:add(0) %71(int32) %73(int32) (flags:0)
  store dest:%158(int32) value:%78(int32) align=1
  br 45
bb:16 (succs: 19 17)
 defs: [%159,%161]
  %159(int32). binop op:add(0) %71(int32) %95(int32) (flags:0)
  %160(int16). load src:%159(int32) align=1
  %161(int1). cmp2 op:icmp_slt(40) %160(int16) %104(int16)
  br %161(int1) ? 19 : 17
bb:17 (succs: 20 18)
 defs: [%162,%166]
  %162(int32). cast op:sext(2) %160(int16)
  %163(int32). binop op:add(0) %42(int32) %83(int32) (flags:0)
  %164(int32). load src:%163(int32) align=1
  %165(int32). call indirect %164(int32) args: %162(int32) %110(int32)
  %166(int1). cmp2 op:icmp_eq(32) %165(int32) %72(int32)
  br %166(int1) ? 20 : 18
bb:18 (succs: 19)
 defs: [%167,%168]
  %167(int32). load src:%112(int32) align=1
  store dest:%167(int32) value:%165(int32) align=1
  %168(int16). load src:%118(int32) align=1
  br 19
bb:19 (succs: 24)
 defs: [%169,%175]
  %169(int16). phi bb:18=>%168(int16) bb:16=>%148(int16)
  %170(int16). binop op:and(10) %169(int16) %108(int16) (flags:0)
  %171(int1). cmp2 op:icmp_eq(32) %170(int16) %104(int16)
  %172(int32). vselect %171(int1) ? %74(int32) : %77(int32)
  %173(int32). cast op:zext(1) %169(int16)
  %174(int32). binop op:or(11) %173(int32) %84(int32) (flags:0)
  %175(int16). cast op:trunc(0) %174(int32)
  store dest:%118(int32) value:%175(int16) align=1
  br 24
bb:20 (succs: 21 23)
 defs: [%176,%181]
  %176(int32). binop op:add(0) %110(int32) %76(int32) (flags:0)
  %177(int32). load src:%176(int32) align=1
  %178(int32). binop op:and(10) %177(int32) %96(int32) (flags:0)
  %179(int1). cmp2 op:icmp_eq(32) %178(int32) %97(int32)
  %180(int32). cast op:zext(1) %179(int1)
  %181(int1). cmp2 op:icmp_eq(32) %178(int32) %98(int32)
  br %181(int1) ? 21 : 23
bb:21 (succs: 22 23)
 defs: [%182,%184]
  %182(int32). binop op:add(0) %71(int32) %99(int32) (flags:0)
  %183(int32). load src:%182(int32) align=1
  %184(int1). cmp2 op:icmp_eq(32) %183(int32) %27(int32(int32,int32,int32,int32))
  br %184(int1) ? 22 : 23
bb:22 (succs: 24)
 defs: [%185,%189]
  %185(int16). load src:%118(int32) align=1
  %186(int32). cast op:zext(1) %185(int16)
  %187(int32). binop op:or(11) %186(int32) %74(int32) (flags:0)
  %188(int16). cast op:trunc(0) %187(int32)
  store dest:%118(int32) value:%188(int16) align=1
  %189(int32). binop op:add(0) %71(int32) %100(int32) (flags:0)
  store dest:%189(int32) value:%74(int32) align=1
  br 24
bb:23 (succs: 24)
 defs: [%190,%193]
  %190(int16). load src:%118(int32) align=1
  %191(int32). cast op:zext(1) %190(int16)
  %192(int32). binop op:or(11) %191(int32) %84(int32) (flags:0)
  %193(int16). cast op:trunc(0) %192(int32)
  store dest:%118(int32) value:%193(int16) align=1
  br 24
bb:24 (succs: 25 27)
 defs: [%194,%197]
  %194(int32). phi bb:19=>%72(int32) bb:22=>%180(int32) bb:23=>%180(int32)
  %195(int32). phi bb:19=>%172(int32) bb:22=>%74(int32) bb:23=>%74(int32)
  %196(int32). call %29(int32(int32)) args: %195(int32)
  %197(int1). cmp2 op:icmp_eq(32) %196(int32) %72(int32)
  br %197(int1) ? 25 : 27
bb:25 (succs: 26 45)
 defs: [%198,%201]
  %198(int16). load src:%118(int32) align=1
  %199(int32). cast op:sext(2) %198(int16)
  %200(int32). binop op:and(10) %199(int32) %101(int32) (flags:0)
  %201(int1). cmp2 op:icmp_eq(32) %200(int32) %72(int32)
  br %201(int1) ? 26 : 45
bb:26 (succs: 45)
 defs: [%202,%205]
  %202(int32). binop op:or(11) %199(int32) %85(int32) (flags:0)
  %203(int16). cast op:trunc(0) %202(int32)
  store dest:%118(int32) value:%203(int16) align=1
  %204(int32). binop op:add(0) %71(int32) %82(int32) (flags:0)
  store dest:%71(int32) value:%204(int32) align=1
  store dest:%149(int32) value:%204(int32) align=1
  %205(int32). binop op:add(0) %71(int32) %73(int32) (flags:0)
  store dest:%205(int32) value:%78(int32) align=1
  br 45
bb:27 (succs: 45 28)
 defs: [%206,%212]
  %206(int32). binop op:add(0) %70(int32) %102(int32) (flags:0)
  store dest:%206(int32) value:%24(void(int32)) align=1
  %207(int16). load src:%118(int32) align=1
  %208(int32). cast op:zext(1) %207(int16)
  %209(int32). binop op:or(11) %208(int32) %86(int32) (flags:0)
  %210(int16). cast op:trunc(0) %209(int32)
  store dest:%118(int32) value:%210(int16) align=1
  store dest:%71(int32) value:%196(int32) align=1
  store dest:%149(int32) value:%196(int32) align=1
  %211(int32). binop op:add(0) %71(int32) %73(int32) (flags:0)
  store dest:%211(int32) value:%195(int32) align=1
  %212(int1). cmp2 op:icmp_eq(32) %194(int32) %72(int32)
  br %212(int1) ? 45 : 28
bb:28 (succs: 29 40)
 defs: [%213,%217]
  %213(int16). load src:%159(int32) align=1
  %214(int32). cast op:sext(2) %213(int16)
  %215(int32). binop op:add(0) %49(int32) %87(int32) (flags:0)
  %216(int32). load src:%215(int32) align=1
  %217(int1). cmp2 op:icmp_eq(32) %216(int32) %72(int32)
  br %217(int1) ? 29 : 40
bb:29 (succs: 30 31)
 defs: [%218,%219]
  %218(int32). load src:%43(int32) align=1
  %219(int1). cmp2 op:icmp_eq(32) %218(int32) %72(int32)
  br %219(int1) ? 30 : 31
bb:30 (succs:)
  call %6(void(int32)) args: %44(int32)
  unreachable
bb:31 (succs: 38 32)
 defs: [%220,%221]
  %220(int32). call indirect %218(int32) args: %66(int32) %49(int32) %80(int32)
  %221(int1). cmp2 op:icmp_eq(32) %220(int32) %80(int32)
  br %221(int1) ? 38 : 32
bb:32 (succs: 33 34)
 defs: [%222,%223]
  %222(int32). load src:%43(int32) align=1
  %223(int1). cmp2 op:icmp_eq(32) %222(int32) %72(int32)
  br %223(int1) ? 33 : 34
bb:33 (succs:)
  call %6(void(int32)) args: %44(int32)
  unreachable
bb:34 (succs: 38 35)
 defs: [%224,%225]
  %224(int32). call indirect %222(int32) args: %67(int32) %49(int32) %81(int32)
  %225(int1). cmp2 op:icmp_eq(32) %224(int32) %81(int32)
  br %225(int1) ? 38 : 35
bb:35 (succs: 36 37)
 defs: [%226,%227]
  %226(int32). load src:%43(int32) align=1
  %227(int1). cmp2 op:icmp_eq(32) %226(int32) %72(int32)
  br %227(int1) ? 36 : 37
bb:36 (succs:)
  call %6(void(int32)) args: %44(int32)
  unreachable
bb:37 (succs: 38)
 defs: [%228,%228]
  %228(int32). call indirect %226(int32) args: %68(int32) %49(int32) %81(int32)
  br 38
bb:38 (succs: 39 40)
 defs: [%229,%231]
  %229(int32). binop op:add(0) %49(int32) %87(int32) (flags:0)
  %230(int32). load src:%229(int32) align=1
  %231(int1). cmp2 op:icmp_eq(32) %230(int32) %72(int32)
  br %231(int1) ? 39 : 40
bb:39 (succs: 42)
 defs: [%232,%232]
  %232(int32). load src:%112(int32) align=1
  store dest:%232(int32) value:%103(int32) align=1
  br 42
bb:40 (succs: 43 41)
 defs: [%233,%235]
  %233(int32). phi bb:38=>%230(int32) bb:28=>%216(int32)
  %234(int32). call indirect %233(int32) args: %214(int32) %109(int32)
  %235(int1). cmp2 op:icmp_eq(32) %234(int32) %72(int32)
  br %235(int1) ? 43 : 41
bb:41 (succs: 42)
 defs: [%236,%236]
  %236(int32). load src:%112(int32) align=1
  store dest:%236(int32) value:%234(int32) align=1
  br 42
bb:42 (succs: 45)
  br 45
bb:43 (succs: 45 44)
 defs: [%237,%238]
  %237(int32). load src:%109(int32) align=1
  %238(int1). cmp2 op:icmp_eq(32) %237(int32) %72(int32)
  br %238(int1) ? 45 : 44
bb:44 (succs: 45)
 defs: [%239,%242]
  %239(int16). load src:%118(int32) align=1
  %240(int32). cast op:zext(1) %239(int16)
  %241(int32). binop op:or(11) %240(int32) %78(int32) (flags:0)
  %242(int16). cast op:trunc(0) %241(int32)
  store dest:%118(int32) value:%242(int16) align=1
  br 45
bb:45 (succs: 46)
 defs: [%243,%243]
  %243(int16). load src:%118(int32) align=1
  br 46
bb:46 (succs: 48 47)
 defs: [%244,%247]
  %244(int16). phi bb:45=>%243(int16) bb:13=>%148(int16)
  %245(int32). cast op:sext(2) %244(int16)
  %246(int32). binop op:and(10) %245(int32) %78(int32) (flags:0)
  %247(int1). cmp2 op:icmp_eq(32) %246(int32) %72(int32)
  br %247(int1) ? 48 : 47
bb:47 (succs: 51)
 defs: [%248,%252]
  %248(int32). binop op:add(0) %71(int32) %75(int32) (flags:0)
  store dest:%248(int32) value:%72(int32) align=1
  %249(int32). binop op:add(0) %71(int32) %73(int32) (flags:0)
  %250(int32). load src:%249(int32) align=1
  %251(int32). binop op:sub(1) %72(int32) %250(int32) (flags:0)
  %252(int32). binop op:add(0) %71(int32) %83(int32) (flags:0)
  store dest:%252(int32) value:%251(int32) align=1
  br 51
bb:48 (succs: 49 50)
 defs: [%253,%254]
  %253(int32). binop op:and(10) %245(int32) %85(int32) (flags:0)
  %254(int1). cmp2 op:icmp_eq(32) %253(int32) %72(int32)
  br %254(int1) ? 49 : 50
bb:49 (succs: 50)
 defs: [%255,%256]
  %255(int32). binop op:add(0) %71(int32) %73(int32) (flags:0)
  %256(int32). load src:%255(int32) align=1
  br 50
bb:50 (succs: 51)
 defs: [%257,%258]
  %257(int32). phi bb:49=>%256(int32) bb:48=>%72(int32)
  %258(int32). binop op:add(0) %71(int32) %75(int32) (flags:0)
  store dest:%258(int32) value:%257(int32) align=1
  br 51
bb:51 (succs: 53 52)
 defs: [%259,%263]
  %259(int32). load src:%149(int32) align=1
  %260(int1). cmp2 op:icmp_ne(33) %259(int32) %72(int32)
  %261(int32). binop op:and(10) %245(int32) %86(int32) (flags:0)
  %262(int1). cmp2 op:icmp_eq(32) %261(int32) %72(int32)
  %263(int1). binop op:or(11) %260(int1) %262(int1) (flags:0)
  br %263(int1) ? 53 : 52
bb:52 (succs: 53)
 defs: [%264,%265]
  %264(int32). binop op:or(11) %245(int32) %77(int32) (flags:0)
  %265(int16). cast op:trunc(0) %264(int32)
  store dest:%118(int32) value:%265(int16) align=1
  br 53
bb:53 (succs:)
 defs: [%266,%266]
  %266(int32). phi bb:5=>%88(int32) bb:52=>%88(int32) bb:51=>%72(int32)
  ret %266(int32)
*** END BLOCK
*** SUBBLOCK FUNCTION (12)
function %21
  %70. function arg 0
  %71. function arg 1
num bbs:33
*** SUBBLOCK CONSTANTS (11)
  constants settype 0 (int32)
  %72. integer 0
  %73. integer -1
  %74. integer 64
  %75. integer 28
  %76. integer 8
  %77. integer 60
  %78. integer 80
  %79. integer 1
  %80. integer 48
  %81. integer 16
  %82. integer 12
  %83. integer 2048
  %84. integer 4
  %85. integer 40
  %86. integer 63487
  %87. integer 3
  %88. integer 20
  %89. integer 36
  constants settype 3 (int16)
  %90. integer 0
  %91. integer 4096
  %92. integer 4
*** END BLOCK
bb:0 (succs: 1 24)
 defs: [%93,%97]
  %93(int32). binop op:add(0) %71(int32) %82(int32) (flags:0)
  %94(int16). load src:%93(int32) align=1
  %95(int32). cast op:sext(2) %94(int16)
  %96(int32). binop op:and(10) %95(int32) %76(int32) (flags:0)
  %97(int1). cmp2 op:icmp_eq(32) %96(int32) %72(int32)
  br %97(int1) ? 1 : 24
bb:1 (succs: 3 2)
 defs: [%98,%102]
  %98(int32). binop op:or(11) %95(int32) %83(int32) (flags:0)
  %99(int16). cast op:trunc(0) %98(int32)
  store dest:%93(int32) value:%99(int16) align=1
  %100(int32). binop op:add(0) %71(int32) %84(int32) (flags:0)
  %101(int32). load src:%100(int32) align=1
  %102(int1). cmp2 op:icmp_sgt(38) %101(int32) %72(int32)
  br %102(int1) ? 3 : 2
bb:2 (succs: 3 32)
 defs: [%103,%105]
  %103(int32). binop op:add(0) %71(int32) %77(int32) (flags:0)
  %104(int32). load src:%103(int32) align=1
  %105(int1). cmp2 op:icmp_sgt(38) %104(int32) %72(int32)
  br %105(int1) ? 3 : 32
bb:3 (succs: 32 4)
 defs: [%106,%108]
  %106(int32). binop op:add(0) %71(int32) %85(int32) (flags:0)
  %107(int32). load src:%106(int32) align=1
  %108(int1). cmp2 op:icmp_eq(32) %107(int32) %72(int32)
  br %108(int1) ? 32 : 4
bb:4 (succs: 6 5)
 defs: [%109,%111]
  %109(int32). load src:%70(int32) align=1
  store dest:%70(int32) value:%72(int32) align=1
  %110(int16). binop op:and(10) %99(int16) %91(int16) (flags:0)
  %111(int1). cmp2 op:icmp_eq(32) %110(int16) %90(int16)
  br %111(int1) ? 6 : 5
bb:5 (succs: 10)
 defs: [%112,%114]
  %112(int32). binop op:add(0) %71(int32) %78(int32) (flags:0)
  %113(int64). load src:%112(int32) align=1
  %114(int32). cast op:trunc(0) %113(int64)
  br 10
bb:6 (succs: 7 10)
 defs: [%115,%118]
  %115(int32). binop op:add(0) %71(int32) %75(int32) (flags:0)
  %116(int32). load src:%115(int32) align=1
  %117(int32). call indirect %107(int32) args: %70(int32) %116(int32) %72(int32) %79(int32)
  %118(int1). cmp2 op:icmp_eq(32) %117(int32) %73(int32)
  br %118(int1) ? 7 : 10
bb:7 (succs: 9 10 8 8)
 defs: [%119,%119]
  %119(int32). load src:%70(int32) align=1
  switch value:%119(int32) [default:9] [0 => bb:10] [29 => bb:8] [22 => bb:8]
bb:8 (succs: 32)
  store dest:%70(int32) value:%109(int32) align=1
  br 32
bb:9 (succs: 32)
 defs: [%120,%123]
  %120(int16). load src:%93(int32) align=1
  %121(int32). cast op:zext(1) %120(int16)
  %122(int32). binop op:or(11) %121(int32) %74(int32) (flags:0)
  %123(int16). cast op:trunc(0) %122(int32)
  store dest:%93(int32) value:%123(int16) align=1
  br 32
bb:10 (succs: 13 11)
 defs: [%124,%127]
  %124(int32). phi bb:5=>%114(int32) bb:7=>%73(int32) bb:6=>%117(int32)
  %125(int16). load src:%93(int32) align=1
  %126(int16). binop op:and(10) %125(int16) %92(int16) (flags:0)
  %127(int1). cmp2 op:icmp_eq(32) %126(int16) %90(int16)
  br %127(int1) ? 13 : 11
bb:11 (succs: 13 12)
 defs: [%128,%132]
  %128(int32). load src:%100(int32) align=1
  %129(int32). binop op:sub(1) %124(int32) %128(int32) (flags:0)
  %130(int32). binop op:add(0) %71(int32) %80(int32) (flags:0)
  %131(int32). load src:%130(int32) align=1
  %132(int1). cmp2 op:icmp_eq(32) %131(int32) %72(int32)
  br %132(int1) ? 13 : 12
bb:12 (succs: 13)
 defs: [%133,%135]
  %133(int32). binop op:add(0) %71(int32) %77(int32) (flags:0)
  %134(int32). load src:%133(int32) align=1
  %135(int32). binop op:sub(1) %129(int32) %134(int32) (flags:0)
  br 13
bb:13 (succs: 15 14)
 defs: [%136,%141]
  %136(int32). phi bb:12=>%135(int32) bb:11=>%129(int32) bb:10=>%124(int32)
  %137(int32). load src:%106(int32) align=1
  %138(int32). binop op:add(0) %71(int32) %75(int32) (flags:0)
  %139(int32). load src:%138(int32) align=1
  %140(int32). call indirect %137(int32) args: %70(int32) %139(int32) %136(int32) %72(int32)
  %141(int1). cmp2 op:icmp_ne(33) %140(int32) %73(int32)
  br %141(int1) ? 15 : 14
bb:14 (succs: 23 15 15 15)
 defs: [%142,%142]
  %142(int32). load src:%70(int32) align=1
  switch value:%142(int32) [default:23] [0 => bb:15] [29 => bb:15] [22 => bb:15]
bb:15 (succs: 19 16)
 defs: [%143,%150]
  %143(int16). load src:%93(int32) align=1
  %144(int32). cast op:zext(1) %143(int16)
  %145(int32). binop op:and(10) %144(int32) %86(int32) (flags:0)
  %146(int16). cast op:trunc(0) %145(int32)
  store dest:%93(int32) value:%146(int16) align=1
  store dest:%100(int32) value:%72(int32) align=1
  %147(int32). binop op:add(0) %71(int32) %81(int32) (flags:0)
  %148(int32). load src:%147(int32) align=1
  store dest:%71(int32) value:%148(int32) align=1
  %149(int16). binop op:and(10) %143(int16) %91(int16) (flags:0)
  %150(int1). cmp2 op:icmp_eq(32) %149(int16) %90(int16)
  br %150(int1) ? 19 : 16
bb:16 (succs: 18 17)
  br %141(int1) ? 18 : 17
bb:17 (succs: 18 19)
 defs: [%151,%152]
  %151(int32). load src:%70(int32) align=1
  %152(int1). cmp2 op:icmp_eq(32) %151(int32) %72(int32)
  br %152(int1) ? 18 : 19
bb:18 (succs: 19)
 defs: [%153,%154]
  %153(int64). cast op:sext(2) %140(int32)
  %154(int32). binop op:add(0) %71(int32) %78(int32) (flags:0)
  store dest:%154(int32) value:%153(int64) align=1
  br 19
bb:19 (succs: 32 20)
 defs: [%155,%157]
  store dest:%70(int32) value:%109(int32) align=1
  %155(int32). binop op:add(0) %71(int32) %80(int32) (flags:0)
  %156(int32). load src:%155(int32) align=1
  %157(int1). cmp2 op:icmp_eq(32) %156(int32) %72(int32)
  br %157(int1) ? 32 : 20
bb:20 (succs: 22 21)
 defs: [%158,%159]
  %158(int32). binop op:add(0) %71(int32) %74(int32) (flags:0)
  %159(int1). cmp2 op:icmp_eq(32) %156(int32) %158(int32)
  br %159(int1) ? 22 : 21
bb:21 (succs: 22)
  call %30(void(int32)) args: %156(int32)
  br 22
bb:22 (succs: 32)
  store dest:%155(int32) value:%72(int32) align=1
  br 32
bb:23 (succs: 32)
 defs: [%160,%163]
  %160(int16). load src:%93(int32) align=1
  %161(int32). cast op:zext(1) %160(int16)
  %162(int32). binop op:or(11) %161(int32) %74(int32) (flags:0)
  %163(int16). cast op:trunc(0) %162(int32)
  store dest:%93(int32) value:%163(int16) align=1
  br 32
bb:24 (succs: 32 25)
 defs: [%164,%166]
  %164(int32). binop op:add(0) %71(int32) %81(int32) (flags:0)
  %165(int32). load src:%164(int32) align=1
  %166(int1). cmp2 op:icmp_eq(32) %165(int32) %72(int32)
  br %166(int1) ? 32 : 25
bb:25 (succs: 26 27)
 defs: [%167,%170]
  %167(int32). load src:%71(int32) align=1
  %168(int32). binop op:sub(1) %167(int32) %165(int32) (flags:0)
  store dest:%71(int32) value:%165(int32) align=1
  %169(int32). binop op:and(10) %95(int32) %87(int32) (flags:0)
  %170(int1). cmp2 op:icmp_eq(32) %169(int32) %72(int32)
  br %170(int1) ? 26 : 27
bb:26 (succs: 27)
 defs: [%171,%172]
  %171(int32). binop op:add(0) %71(int32) %88(int32) (flags:0)
  %172(int32). load src:%171(int32) align=1
  br 27
bb:27 (succs: 28 32)
 defs: [%173,%175]
  %173(int32). phi bb:26=>%172(int32) bb:25=>%72(int32)
  %174(int32). binop op:add(0) %71(int32) %76(int32) (flags:0)
  store dest:%174(int32) value:%173(int32) align=1
  %175(int1). cmp2 op:icmp_sgt(38) %168(int32) %72(int32)
  br %175(int1) ? 28 : 32
bb:28 (succs: 29)
 defs: [%176,%177]
  %176(int32). binop op:add(0) %71(int32) %89(int32) (flags:0)
  %177(int32). binop op:add(0) %71(int32) %75(int32) (flags:0)
  br 29
bb:29 (succs: 30 31)
 defs: [%178,%183]
  forwardtyperef %188(int32) int32
  %178(int32). phi bb:28=>%165(int32) bb:31=>%188(int32)
  forwardtyperef %189(int32) int32
  %179(int32). phi bb:28=>%168(int32) bb:31=>%189(int32)
  %180(int32). load src:%176(int32) align=1
  %181(int32). load src:%177(int32) align=1
  %182(int32). call indirect %180(int32) args: %70(int32) %181(int32) %178(int32) %179(int32)
  %183(int1). cmp2 op:icmp_slt(40) %182(int32) %79(int32)
  br %183(int1) ? 30 : 31
bb:30 (succs: 32)
 defs: [%184,%187]
  %184(int16). load src:%93(int32) align=1
  %185(int32). cast op:zext(1) %184(int16)
  %186(int32). binop op:or(11) %185(int32) %74(int32) (flags:0)
  %187(int16). cast op:trunc(0) %186(int32)
  store dest:%93(int32) value:%187(int16) align=1
  br 32
bb:31 (succs: 29 32)
 defs: [%188,%190]
  %188(int32). binop op:add(0) %178(int32) %182(int32) (flags:0)
  %189(int32). binop op:sub(1) %179(int32) %182(int32) (flags:0)
  %190(int1). cmp2 op:icmp_sgt(38) %189(int32) %72(int32)
  br %190(int1) ? 29 : 32
bb:32 (succs:)
 defs: [%191,%191]
  %191(int32). phi bb:23=>%73(int32) bb:30=>%73(int32) bb:8=>%72(int32) bb:9=>%73(int32) bb:19=>%72(int32) bb:3=>%72(int32) bb:22=>%72(int32) bb:2=>%72(int32) bb:24=>%72(int32) bb:27=>%72(int32) bb:31=>%72(int32)
  ret %191(int32)
*** END BLOCK
*** SUBBLOCK FUNCTION (12)
function %22
  %70. function arg 0
  %71. function arg 1
num bbs:6
*** SUBBLOCK CONSTANTS (11)
  constants settype 0 (int32)
  %72. integer 0
  %73. integer 56
  %74. integer 12
  constants settype 3 (int16)
  %75. integer 0
*** END BLOCK
bb:0 (succs: 3 1)
 defs: [%76,%76]
  %76(int1). cmp2 op:icmp_eq(32) %70(int32) %72(int32)
  br %76(int1) ? 3 : 1
bb:1 (succs: 2 3)
 defs: [%77,%79]
  %77(int32). binop op:add(0) %70(int32) %73(int32) (flags:0)
  %78(int32). load src:%77(int32) align=1
  %79(int1). cmp2 op:icmp_eq(32) %78(int32) %72(int32)
  br %79(int1) ? 2 : 3
bb:2 (succs: 3)
  call %23(void(int32)) args: %70(int32)
  br 3
bb:3 (succs: 5 4)
 defs: [%80,%82]
  %80(int32). binop op:add(0) %71(int32) %74(int32) (flags:0)
  %81(int16). load src:%80(int32) align=1
  %82(int1). cmp2 op:icmp_eq(32) %81(int16) %75(int16)
  br %82(int1) ? 5 : 4
bb:4 (succs: 5)
 defs: [%83,%83]
  %83(int32). call %21(int32(int32,int32)) args: %70(int32) %71(int32)
  br 5
bb:5 (succs:)
 defs: [%84,%84]
  %84(int32). phi bb:3=>%72(int32) bb:4=>%83(int32)
  ret %84(int32)
*** END BLOCK
*** SUBBLOCK FUNCTION (12)
function %23
  %70. function arg 0
num bbs:6
*** SUBBLOCK CONSTANTS (11)
  constants settype 0 (int32)
  %71. integer 0
  %72. integer 8
  %73. integer 4
  %74. integer 12
  %75. integer 1
  %76. integer 120
  %77. integer 14
  %78. integer 16
  %79. integer 20
  %80. integer 24
  %81. integer 112
  %82. integer 28
  %83. integer 32
  %84. integer 36
  %85. integer 40
  %86. integer 44
  %87. integer 56
  %88. integer 60
  %89. integer 736
  %90. integer 740
  %91. integer 3
  %92. integer 744
  %93. integer 752
  constants settype 2 (int1)
  %94. integer 0
  constants settype 3 (int16)
  %95. integer 4
  %96. integer 0
  %97. integer 9
  %98. integer 1
  %99. integer 18
  %100. integer 2
*** END BLOCK
bb:0 (succs: 2 1)
 defs: [%101,%101]
  %101(int1). cmp2 op:icmp_eq(32) %70(int32) %60(int32)
  br %101(int1) ? 2 : 1
bb:1 (succs: 2)
  call %23(void(int32)) args: %60(int32)
  br 2
bb:2 (succs: 3 5)
 defs: [%102,%104]
  %102(int32). binop op:add(0) %70(int32) %87(int32) (flags:0)
  %103(int32). load src:%102(int32) align=1
  %104(int1). cmp2 op:icmp_eq(32) %103(int32) %71(int32)
  br %104(int1) ? 3 : 5
bb:3 (succs: 4 5)
 defs: [%105,%118]
  %105(int32). binop op:add(0) %70(int32) %88(int32) (flags:0)
  store dest:%105(int32) value:%24(void(int32)) align=1
  %106(int32). binop op:add(0) %70(int32) %89(int32) (flags:0)
  store dest:%106(int32) value:%71(int32) align=1
  %107(int32). binop op:add(0) %70(int32) %90(int32) (flags:0)
  store dest:%107(int32) value:%91(int32) align=1
  %108(int32). binop op:add(0) %70(int32) %92(int32) (flags:0)
  %109(int32). binop op:add(0) %60(int32) %93(int32) (flags:0)
  store dest:%108(int32) value:%109(int32) align=1
  %110(int32). binop op:add(0) %60(int32) %73(int32) (flags:0)
  %111(int32). load src:%110(int32) align=1
  %112(int32). binop op:add(0) %70(int32) %73(int32) (flags:0)
  store dest:%112(int32) value:%111(int32) align=1
  %113(int32). binop op:add(0) %60(int32) %72(int32) (flags:0)
  %114(int32). load src:%113(int32) align=1
  %115(int32). binop op:add(0) %70(int32) %72(int32) (flags:0)
  store dest:%115(int32) value:%114(int32) align=1
  %116(int32). binop op:add(0) %60(int32) %74(int32) (flags:0)
  %117(int32). load src:%116(int32) align=1
  %118(int32). binop op:add(0) %70(int32) %74(int32) (flags:0)
  store dest:%118(int32) value:%117(int32) align=1
  br %101(int1) ? 4 : 5
bb:4 (succs: 5)
 defs: [%119,%165]
  store dest:%111(int32) value:%71(int32) align=1
  %119(int32). binop op:add(0) %111(int32) %73(int32) (flags:0)
  store dest:%119(int32) value:%71(int32) align=1
  %120(int32). binop op:add(0) %111(int32) %72(int32) (flags:0)
  store dest:%120(int32) value:%71(int32) align=1
  %121(int32). binop op:add(0) %111(int32) %74(int32) (flags:0)
  store dest:%121(int32) value:%95(int16) align=1
  %122(int32). binop op:add(0) %111(int32) %76(int32) (flags:0)
  store dest:%122(int32) value:%71(int32) align=1
  %123(int32). binop op:add(0) %111(int32) %77(int32) (flags:0)
  store dest:%123(int32) value:%96(int16) align=1
  %124(int32). binop op:add(0) %111(int32) %78(int32) (flags:0)
  store dest:%124(int32) value:%71(int32) align=1
  %125(int32). binop op:add(0) %111(int32) %79(int32) (flags:0)
  store dest:%125(int32) value:%71(int32) align=1
  %126(int32). binop op:add(0) %111(int32) %80(int32) (flags:0)
  store dest:%126(int32) value:%71(int32) align=1
  %127(int32). binop op:add(0) %111(int32) %81(int32) (flags:0)
  %128(int8). cast op:trunc(0) %71(int32)
  call %34(void(int32,int8,int32,int32,int1))(llvm.memset.p0i8.i32) args: %127(int32) %128(int8) %72(int32) %75(int32) %94(int1)
  %129(int32). binop op:add(0) %111(int32) %82(int32) (flags:0)
  store dest:%129(int32) value:%111(int32) align=1
  %130(int32). binop op:add(0) %111(int32) %83(int32) (flags:0)
  store dest:%130(int32) value:%25(int32(int32,int32,int32,int32)) align=1
  %131(int32). binop op:add(0) %111(int32) %84(int32) (flags:0)
  store dest:%131(int32) value:%26(int32(int32,int32,int32,int32)) align=1
  %132(int32). binop op:add(0) %111(int32) %85(int32) (flags:0)
  store dest:%132(int32) value:%27(int32(int32,int32,int32,int32)) align=1
  %133(int32). binop op:add(0) %111(int32) %86(int32) (flags:0)
  store dest:%133(int32) value:%28(int32(int32,int32)) align=1
  %134(int32). load src:%115(int32) align=1
  store dest:%134(int32) value:%71(int32) align=1
  %135(int32). binop op:add(0) %134(int32) %73(int32) (flags:0)
  store dest:%135(int32) value:%71(int32) align=1
  %136(int32). binop op:add(0) %134(int32) %72(int32) (flags:0)
  store dest:%136(int32) value:%71(int32) align=1
  %137(int32). binop op:add(0) %134(int32) %74(int32) (flags:0)
  store dest:%137(int32) value:%97(int16) align=1
  %138(int32). binop op:add(0) %134(int32) %76(int32) (flags:0)
  store dest:%138(int32) value:%71(int32) align=1
  %139(int32). binop op:add(0) %134(int32) %77(int32) (flags:0)
  store dest:%139(int32) value:%98(int16) align=1
  %140(int32). binop op:add(0) %134(int32) %78(int32) (flags:0)
  store dest:%140(int32) value:%71(int32) align=1
  %141(int32). binop op:add(0) %134(int32) %79(int32) (flags:0)
  store dest:%141(int32) value:%71(int32) align=1
  %142(int32). binop op:add(0) %134(int32) %80(int32) (flags:0)
  store dest:%142(int32) value:%71(int32) align=1
  %143(int32). binop op:add(0) %134(int32) %81(int32) (flags:0)
  %144(int8). cast op:trunc(0) %71(int32)
  call %34(void(int32,int8,int32,int32,int1))(llvm.memset.p0i8.i32) args: %143(int32) %144(int8) %72(int32) %75(int32) %94(int1)
  %145(int32). binop op:add(0) %134(int32) %82(int32) (flags:0)
  store dest:%145(int32) value:%134(int32) align=1
  %146(int32). binop op:add(0) %134(int32) %83(int32) (flags:0)
  store dest:%146(int32) value:%25(int32(int32,int32,int32,int32)) align=1
  %147(int32). binop op:add(0) %134(int32) %84(int32) (flags:0)
  store dest:%147(int32) value:%26(int32(int32,int32,int32,int32)) align=1
  %148(int32). binop op:add(0) %134(int32) %85(int32) (flags:0)
  store dest:%148(int32) value:%27(int32(int32,int32,int32,int32)) align=1
  %149(int32). binop op:add(0) %134(int32) %86(int32) (flags:0)
  store dest:%149(int32) value:%28(int32(int32,int32)) align=1
  %150(int32). load src:%118(int32) align=1
  store dest:%150(int32) value:%71(int32) align=1
  %151(int32). binop op:add(0) %150(int32) %73(int32) (flags:0)
  store dest:%151(int32) value:%71(int32) align=1
  %152(int32). binop op:add(0) %150(int32) %72(int32) (flags:0)
  store dest:%152(int32) value:%71(int32) align=1
  %153(int32). binop op:add(0) %150(int32) %74(int32) (flags:0)
  store dest:%153(int32) value:%99(int16) align=1
  %154(int32). binop op:add(0) %150(int32) %76(int32) (flags:0)
  store dest:%154(int32) value:%71(int32) align=1
  %155(int32). binop op:add(0) %150(int32) %77(int32) (flags:0)
  store dest:%155(int32) value:%100(int16) align=1
  %156(int32). binop op:add(0) %150(int32) %78(int32) (flags:0)
  store dest:%156(int32) value:%71(int32) align=1
  %157(int32). binop op:add(0) %150(int32) %79(int32) (flags:0)
  store dest:%157(int32) value:%71(int32) align=1
  %158(int32). binop op:add(0) %150(int32) %80(int32) (flags:0)
  store dest:%158(int32) value:%71(int32) align=1
  %159(int32). binop op:add(0) %150(int32) %81(int32) (flags:0)
  %160(int8). cast op:trunc(0) %71(int32)
  call %34(void(int32,int8,int32,int32,int1))(llvm.memset.p0i8.i32) args: %159(int32) %160(int8) %72(int32) %75(int32) %94(int1)
  %161(int32). binop op:add(0) %150(int32) %82(int32) (flags:0)
  store dest:%161(int32) value:%150(int32) align=1
  %162(int32). binop op:add(0) %150(int32) %83(int32) (flags:0)
  store dest:%162(int32) value:%25(int32(int32,int32,int32,int32)) align=1
  %163(int32). binop op:add(0) %150(int32) %84(int32) (flags:0)
  store dest:%163(int32) value:%26(int32(int32,int32,int32,int32)) align=1
  %164(int32). binop op:add(0) %150(int32) %85(int32) (flags:0)
  store dest:%164(int32) value:%27(int32(int32,int32,int32,int32)) align=1
  %165(int32). binop op:add(0) %150(int32) %86(int32) (flags:0)
  store dest:%165(int32) value:%28(int32(int32,int32)) align=1
  store dest:%102(int32) value:%75(int32) align=1
  br 5
bb:5 (succs:)
  ret
*** END BLOCK
*** SUBBLOCK FUNCTION (12)
function %24
  %70. function arg 0
num bbs:27
*** SUBBLOCK CONSTANTS (11)
  constants settype 0 (int32)
  %71. integer 0
  %72. integer -1
  %73. integer 56
  %74. integer 736
  %75. integer 4
  %76. integer 8
  %77. integer 12
  %78. integer 14
  %79. integer 44
  %80. integer 28
  %81. integer 16
  %82. integer 48
  %83. integer 64
  %84. integer 68
  %85. integer 128
  %86. integer 1
  constants settype 3 (int16)
  %87. integer 0
  %88. integer 2
  %89. integer -1
  %90. integer 128
*** END BLOCK
bb:0 (succs: 3 1)
 defs: [%91,%92]
  %91(int1). cmp2 op:icmp_eq(32) %70(int32) %71(int32)
  %92(int32). binop op:add(0) %70(int32) %73(int32) (flags:0)
  br %91(int1) ? 3 : 1
bb:1 (succs: 2 3)
 defs: [%93,%94]
  %93(int32). load src:%92(int32) align=1
  %94(int1). cmp2 op:icmp_eq(32) %93(int32) %71(int32)
  br %94(int1) ? 2 : 3
bb:2 (succs: 3)
  call %23(void(int32)) args: %70(int32)
  br 3
bb:3 (succs: 4)
 defs: [%95,%96]
  %95(int32). phi bb:2=>%92(int32) bb:1=>%92(int32) bb:0=>%92(int32)
  %96(int32). binop op:add(0) %70(int32) %74(int32) (flags:0)
  br 4
bb:4 (succs: 5 25)
 defs: [%97,%101]
  forwardtyperef %148(int32) int32
  %97(int32). phi bb:3=>%96(int32) bb:25=>%148(int32)
  forwardtyperef %147(int32) int32
  %98(int32). phi bb:3=>%71(int32) bb:25=>%147(int32)
  %99(int32). binop op:add(0) %97(int32) %75(int32) (flags:0)
  %100(int32). load src:%99(int32) align=1
  %101(int1). cmp2 op:icmp_sgt(38) %100(int32) %71(int32)
  br %101(int1) ? 5 : 25
bb:5 (succs: 6)
 defs: [%102,%103]
  %102(int32). binop op:add(0) %97(int32) %76(int32) (flags:0)
  %103(int32). load src:%102(int32) align=1
  br 6
bb:6 (succs: 24 7)
 defs: [%104,%110]
  forwardtyperef %107(int32) int32
  %104(int32). phi bb:5=>%100(int32) bb:24=>%107(int32)
  forwardtyperef %145(int32) int32
  %105(int32). phi bb:5=>%103(int32) bb:24=>%145(int32)
  forwardtyperef %144(int32) int32
  %106(int32). phi bb:5=>%98(int32) bb:24=>%144(int32)
  %107(int32). binop op:add(0) %104(int32) %72(int32) (flags:0)
  %108(int32). binop op:add(0) %105(int32) %77(int32) (flags:0)
  %109(int16). load src:%108(int32) align=1
  %110(int1). cmp2 op:icmp_ult(36) %109(int16) %88(int16)
  br %110(int1) ? 24 : 7
bb:7 (succs: 24 8)
 defs: [%111,%113]
  %111(int32). binop op:add(0) %105(int32) %78(int32) (flags:0)
  %112(int16). load src:%111(int32) align=1
  %113(int1). cmp2 op:icmp_eq(32) %112(int16) %89(int16)
  br %113(int1) ? 24 : 8
bb:8 (succs: 11 9)
  br %91(int1) ? 11 : 9
bb:9 (succs: 10 11)
 defs: [%114,%115]
  %114(int32). load src:%95(int32) align=1
  %115(int1). cmp2 op:icmp_eq(32) %114(int32) %71(int32)
  br %115(int1) ? 10 : 11
bb:10 (succs: 11)
 defs: [%116,%116]
  call %23(void(int32)) args: %70(int32)
  %116(int16). load src:%108(int32) align=1
  br 11
bb:11 (succs: 23 12)
 defs: [%117,%118]
  %117(int16). phi bb:10=>%116(int16) bb:9=>%109(int16) bb:8=>%109(int16)
  %118(int1). cmp2 op:icmp_eq(32) %117(int16) %87(int16)
  br %118(int1) ? 23 : 12
bb:12 (succs: 14 13)
 defs: [%119,%122]
  %119(int32). call %21(int32(int32,int32)) args: %70(int32) %105(int32)
  %120(int32). binop op:add(0) %105(int32) %79(int32) (flags:0)
  %121(int32). load src:%120(int32) align=1
  %122(int1). cmp2 op:icmp_eq(32) %121(int32) %71(int32)
  br %122(int1) ? 14 : 13
bb:13 (succs: 14)
 defs: [%123,%127]
  %123(int32). binop op:add(0) %105(int32) %80(int32) (flags:0)
  %124(int32). load src:%123(int32) align=1
  %125(int32). call indirect %121(int32) args: %70(int32) %124(int32)
  %126(int1). cmp2 op:icmp_slt(40) %125(int32) %71(int32)
  %127(int32). vselect %126(int1) ? %72(int32) : %119(int32)
  br 14
bb:14 (succs: 16 15)
 defs: [%128,%131]
  %128(int32). phi bb:12=>%119(int32) bb:13=>%127(int32)
  %129(int16). load src:%108(int32) align=1
  %130(int16). binop op:and(10) %129(int16) %90(int16) (flags:0)
  %131(int1). cmp2 op:icmp_eq(32) %130(int16) %87(int16)
  br %131(int1) ? 16 : 15
bb:15 (succs: 16)
 defs: [%132,%133]
  %132(int32). binop op:add(0) %105(int32) %81(int32) (flags:0)
  %133(int32). load src:%132(int32) align=1
  call %30(void(int32)) args: %133(int32)
  br 16
bb:16 (succs: 20 17)
 defs: [%134,%136]
  %134(int32). binop op:add(0) %105(int32) %82(int32) (flags:0)
  %135(int32). load src:%134(int32) align=1
  %136(int1). cmp2 op:icmp_eq(32) %135(int32) %71(int32)
  br %136(int1) ? 20 : 17
bb:17 (succs: 19 18)
 defs: [%137,%138]
  %137(int32). binop op:add(0) %105(int32) %83(int32) (flags:0)
  %138(int1). cmp2 op:icmp_eq(32) %135(int32) %137(int32)
  br %138(int1) ? 19 : 18
bb:18 (succs: 19)
  call %30(void(int32)) args: %135(int32)
  br 19
bb:19 (succs: 20)
  store dest:%134(int32) value:%71(int32) align=1
  br 20
bb:20 (succs: 22 21)
 defs: [%139,%141]
  %139(int32). binop op:add(0) %105(int32) %84(int32) (flags:0)
  %140(int32). load src:%139(int32) align=1
  %141(int1). cmp2 op:icmp_eq(32) %140(int32) %71(int32)
  br %141(int1) ? 22 : 21
bb:21 (succs: 22)
  call %30(void(int32)) args: %140(int32)
  store dest:%139(int32) value:%71(int32) align=1
  br 22
bb:22 (succs: 23)
  store dest:%108(int32) value:%87(int16) align=1
  br 23
bb:23 (succs: 24)
 defs: [%142,%143]
  %142(int32). phi bb:22=>%128(int32) bb:11=>%71(int32)
  %143(int32). binop op:or(11) %142(int32) %106(int32) (flags:0)
  br 24
bb:24 (succs: 6 25)
 defs: [%144,%146]
  %144(int32). phi bb:23=>%143(int32) bb:7=>%106(int32) bb:6=>%106(int32)
  %145(int32). binop op:add(0) %105(int32) %85(int32) (flags:0)
  %146(int1). cmp2 op:icmp_sgt(38) %104(int32) %86(int32)
  br %146(int1) ? 6 : 25
bb:25 (succs: 26 4)
 defs: [%147,%149]
  %147(int32). phi bb:4=>%98(int32) bb:24=>%144(int32)
  %148(int32). load src:%97(int32) align=1
  %149(int1). cmp2 op:icmp_eq(32) %148(int32) %71(int32)
  br %149(int1) ? 26 : 4
bb:26 (succs:)
  ret
*** END BLOCK
*** SUBBLOCK FUNCTION (12)
function %25
  %70. function arg 0
  %71. function arg 1
  %72. function arg 2
  %73. function arg 3
num bbs:6
*** SUBBLOCK CONSTANTS (11)
  constants settype 0 (int32)
  %74. integer 12
  %75. integer -1
  %76. integer 4
  %77. integer 14
  %78. integer 0
  %79. integer -1144
  %80. integer 80
  %81. integer 61439
*** END BLOCK
bb:0 (succs: 2 1)
 defs: [%82,%89]
  %82(int32). alloca %76(int32) align=4
  %83(int32). binop op:add(0) %71(int32) %77(int32) (flags:0)
  %84(int16). load src:%83(int32) align=1
  %85(int32). cast op:sext(2) %84(int16)
  %86(int32). binop op:add(0) %42(int32) %74(int32) (flags:0)
  %87(int32). load src:%86(int32) align=1
  %88(int32). call indirect %87(int32) args: %85(int32) %72(int32) %73(int32) %82(int32)
  %89(int1). cmp2 op:icmp_eq(32) %88(int32) %78(int32)
  br %89(int1) ? 2 : 1
bb:1 (succs: 4)
 defs: [%90,%92]
  %90(int32). call %33(int32())(llvm.nacl.read.tp) args:
  %91(int32). binop op:add(0) %90(int32) %79(int32) (flags:0)
  %92(int32). load src:%91(int32) align=1
  store dest:%92(int32) value:%88(int32) align=1
  br 4
bb:2 (succs: 3 4)
 defs: [%93,%94]
  %93(int32). load src:%82(int32) align=1
  %94(int1). cmp2 op:icmp_sgt(38) %93(int32) %75(int32)
  br %94(int1) ? 3 : 4
bb:3 (succs: 5)
 defs: [%95,%98]
  %95(int64). cast op:sext(2) %93(int32)
  %96(int32). binop op:add(0) %71(int32) %80(int32) (flags:0)
  %97(int64). load src:%96(int32) align=1
  %98(int64). binop op:add(0) %97(int64) %95(int64) (flags:0)
  store dest:%96(int32) value:%98(int64) align=1
  br 5
bb:4 (succs: 5)
 defs: [%99,%104]
  %99(int32). phi bb:1=>%75(int32) bb:2=>%93(int32)
  %100(int32). binop op:add(0) %71(int32) %74(int32) (flags:0)
  %101(int16). load src:%100(int32) align=1
  %102(int32). cast op:zext(1) %101(int16)
  %103(int32). binop op:and(10) %102(int32) %81(int32) (flags:0)
  %104(int16). cast op:trunc(0) %103(int32)
  store dest:%100(int32) value:%104(int16) align=1
  br 5
bb:5 (succs:)
 defs: [%105,%105]
  %105(int32). phi bb:4=>%99(int32) bb:3=>%93(int32)
  ret %105(int32)
*** END BLOCK
*** SUBBLOCK FUNCTION (12)
function %26
  %70. function arg 0
  %71. function arg 1
  %72. function arg 2
  %73. function arg 3
num bbs:8
*** SUBBLOCK CONSTANTS (11)
  constants settype 0 (int32)
  %74. integer 0
  %75. integer -1144
  %76. integer 4
  %77. integer 8
  %78. integer 12
  %79. integer 14
  %80. integer 20
  %81. integer 2
  %82. integer 61439
  %83. integer 16
  %84. integer -1
  constants settype 3 (int16)
  %85. integer 256
  %86. integer 0
  constants settype 10 (int64)
  %87. integer 0
*** END BLOCK
bb:0 (succs: 4 1)
 defs: [%88,%94]
  %88(int32). alloca %76(int32) align=4
  %89(int32). alloca %77(int32) align=8
  %90(int32). binop op:add(0) %71(int32) %78(int32) (flags:0)
  %91(int16). load src:%90(int32) align=1
  %92(int16). binop op:and(10) %91(int16) %85(int16) (flags:0)
  %93(int1). cmp2 op:icmp_eq(32) %92(int16) %86(int16)
  %94(int32). binop op:add(0) %71(int32) %79(int32) (flags:0)
  br %93(int1) ? 4 : 1
bb:1 (succs: 3 2)
 defs: [%95,%100]
  %95(int16). load src:%94(int32) align=1
  %96(int32). cast op:sext(2) %95(int16)
  %97(int32). binop op:add(0) %42(int32) %80(int32) (flags:0)
  %98(int32). load src:%97(int32) align=1
  %99(int32). call indirect %98(int32) args: %96(int32) %87(int64) %81(int32) %89(int32)
  %100(int1). cmp2 op:icmp_eq(32) %99(int32) %74(int32)
  br %100(int1) ? 3 : 2
bb:2 (succs: 3)
 defs: [%101,%103]
  %101(int32). call %33(int32())(llvm.nacl.read.tp) args:
  %102(int32). binop op:add(0) %101(int32) %75(int32) (flags:0)
  %103(int32). load src:%102(int32) align=1
  store dest:%103(int32) value:%99(int32) align=1
  br 3
bb:3 (succs: 4)
 defs: [%104,%104]
  %104(int16). load src:%90(int32) align=1
  br 4
bb:4 (succs: 6 5)
 defs: [%105,%114]
  %105(int16). phi bb:3=>%104(int16) bb:0=>%91(int16)
  %106(int32). cast op:zext(1) %105(int16)
  %107(int32). binop op:and(10) %106(int32) %82(int32) (flags:0)
  %108(int16). cast op:trunc(0) %107(int32)
  store dest:%90(int32) value:%108(int16) align=1
  %109(int16). load src:%94(int32) align=1
  %110(int32). cast op:sext(2) %109(int16)
  %111(int32). binop op:add(0) %42(int32) %83(int32) (flags:0)
  %112(int32). load src:%111(int32) align=1
  %113(int32). call indirect %112(int32) args: %110(int32) %72(int32) %73(int32) %88(int32)
  %114(int1). cmp2 op:icmp_eq(32) %113(int32) %74(int32)
  br %114(int1) ? 6 : 5
bb:5 (succs: 7)
 defs: [%115,%117]
  %115(int32). call %33(int32())(llvm.nacl.read.tp) args:
  %116(int32). binop op:add(0) %115(int32) %75(int32) (flags:0)
  %117(int32). load src:%116(int32) align=1
  store dest:%117(int32) value:%113(int32) align=1
  br 7
bb:6 (succs: 7)
 defs: [%118,%118]
  %118(int32). load src:%88(int32) align=1
  br 7
bb:7 (succs:)
 defs: [%119,%119]
  %119(int32). phi bb:5=>%84(int32) bb:6=>%118(int32)
  ret %119(int32)
*** END BLOCK
*** SUBBLOCK FUNCTION (12)
function %27
  %70. function arg 0
  %71. function arg 1
  %72. function arg 2
  %73. function arg 3
num bbs:6
*** SUBBLOCK CONSTANTS (11)
  constants settype 0 (int32)
  %74. integer 12
  %75. integer 8
  %76. integer 14
  %77. integer 20
  %78. integer 0
  %79. integer -1144
  %80. integer 61439
  %81. integer 4096
  %82. integer 80
  %83. integer -1
  constants settype 10 (int64)
  %84. integer -1
*** END BLOCK
bb:0 (succs: 2 1)
 defs: [%85,%93]
  %85(int32). alloca %75(int32) align=8
  %86(int32). binop op:add(0) %71(int32) %76(int32) (flags:0)
  %87(int16). load src:%86(int32) align=1
  %88(int32). cast op:sext(2) %87(int16)
  %89(int64). cast op:sext(2) %72(int32)
  %90(int32). binop op:add(0) %42(int32) %77(int32) (flags:0)
  %91(int32). load src:%90(int32) align=1
  %92(int32). call indirect %91(int32) args: %88(int32) %89(int64) %73(int32) %85(int32)
  %93(int1). cmp2 op:icmp_eq(32) %92(int32) %78(int32)
  br %93(int1) ? 2 : 1
bb:1 (succs: 3)
 defs: [%94,%99]
  %94(int32). call %33(int32())(llvm.nacl.read.tp) args:
  %95(int32). binop op:add(0) %94(int32) %79(int32) (flags:0)
  %96(int32). load src:%95(int32) align=1
  store dest:%96(int32) value:%92(int32) align=1
  %97(int32). binop op:add(0) %71(int32) %74(int32) (flags:0)
  %98(int16). load src:%97(int32) align=1
  %99(int32). cast op:sext(2) %98(int16)
  br 3
bb:2 (succs: 3 4)
 defs: [%100,%104]
  %100(int64). load src:%85(int32) align=1
  %101(int1). cmp2 op:icmp_eq(32) %100(int64) %84(int64)
  %102(int32). binop op:add(0) %71(int32) %74(int32) (flags:0)
  %103(int16). load src:%102(int32) align=1
  %104(int32). cast op:sext(2) %103(int16)
  br %101(int1) ? 3 : 4
bb:3 (succs: 5)
 defs: [%105,%108]
  %105(int32). phi bb:1=>%99(int32) bb:2=>%104(int32)
  %106(int32). phi bb:1=>%97(int32) bb:2=>%102(int32)
  %107(int32). binop op:and(10) %105(int32) %80(int32) (flags:0)
  %108(int16). cast op:trunc(0) %107(int32)
  store dest:%106(int32) value:%108(int16) align=1
  br 5
bb:4 (succs: 5)
 defs: [%109,%112]
  %109(int32). binop op:or(11) %104(int32) %81(int32) (flags:0)
  %110(int16). cast op:trunc(0) %109(int32)
  store dest:%102(int32) value:%110(int16) align=1
  %111(int32). binop op:add(0) %71(int32) %82(int32) (flags:0)
  store dest:%111(int32) value:%100(int64) align=1
  %112(int32). cast op:trunc(0) %100(int64)
  br 5
bb:5 (succs:)
 defs: [%113,%113]
  %113(int32). phi bb:4=>%112(int32) bb:3=>%83(int32)
  ret %113(int32)
*** END BLOCK
*** SUBBLOCK FUNCTION (12)
function %28
  %70. function arg 0
  %71. function arg 1
num bbs:3
*** SUBBLOCK CONSTANTS (11)
  constants settype 0 (int32)
  %72. integer 0
  %73. integer 14
  %74. integer -1144
  %75. integer -1
*** END BLOCK
bb:0 (succs: 2 1)
 defs: [%76,%81]
  %76(int32). binop op:add(0) %71(int32) %73(int32) (flags:0)
  %77(int16). load src:%76(int32) align=1
  %78(int32). cast op:sext(2) %77(int16)
  %79(int32). load src:%42(int32) align=1
  %80(int32). call indirect %79(int32) args: %78(int32)
  %81(int1). cmp2 op:icmp_eq(32) %80(int32) %72(int32)
  br %81(int1) ? 2 : 1
bb:1 (succs: 2)
 defs: [%82,%84]
  %82(int32). call %33(int32())(llvm.nacl.read.tp) args:
  %83(int32). binop op:add(0) %82(int32) %74(int32) (flags:0)
  %84(int32). load src:%83(int32) align=1
  store dest:%84(int32) value:%80(int32) align=1
  br 2
bb:2 (succs:)
 defs: [%85,%85]
  %85(int32). phi bb:1=>%75(int32) bb:0=>%72(int32)
  ret %85(int32)
*** END BLOCK
*** SUBBLOCK FUNCTION (12)
function %29
  %70. function arg 0
num bbs:365
*** SUBBLOCK CONSTANTS (11)
  constants settype 0 (int32)
  %71. integer 0
  %72. integer 4
  %73. integer 1
  %74. integer 16
  %75. integer 8
  %76. integer 12
  %77. integer 20
  %78. integer 24
  %79. integer 2
  %80. integer 40
  %81. integer 7
  %82. integer 3
  %83. integer -1
  %84. integer 6
  %85. integer -8
  %86. integer 31
  %87. integer 28
  %88. integer 304
  %89. integer -1144
  %90. integer 452
  %91. integer 448
  %92. integer 432
  %93. integer 444
  %94. integer 15
  %95. integer 16777215
  %96. integer 1048320
  %97. integer 520192
  %98. integer 245760
  %99. integer 14
  %100. integer 25
  %101. integer 256
  %102. integer 436
  %103. integer 63
  %104. integer -16
  %105. integer 11
  %106. integer 5
  %107. integer 32
  %108. integer 65536
  %109. integer 262144
  %110. integer 2097152
  %111. integer 1431655768
  %112. integer 440
  %113. integer 34
  %114. integer 456
  %115. integer 464
  %116. integer -40
  %117. integer -36
  %118. integer -2
  %119. integer 245
  %120. integer -65
  %121. integer 30
  %122. integer -12
  %123. integer 47
  %124. integer 36
  %125. integer 4095
  %126. integer -47
  %127. integer -39
  %128. integer 27
  %129. integer 460
  constants settype 2 (int1)
  %130. integer 0
  constants settype 10 (int64)
  %131. integer 0
*** END BLOCK
bb:0 (succs: 1 15)
 defs: [%132,%139]
  %132(int32). alloca %72(int32) align=4
  %133(int32). alloca %72(int32) align=4
  %134(int32). alloca %72(int32) align=4
  %135(int32). alloca %72(int32) align=4
  %136(int32). alloca %72(int32) align=4
  %137(int32). alloca %72(int32) align=4
  %138(int32). load src:%63(int32) align=1
  %139(int1). cmp2 op:icmp_eq(32) %138(int32) %71(int32)
  br %139(int1) ? 1 : 15
bb:1 (succs: 7 2)
 defs: [%140,%141]
  %140(int32). call %36(int32(int32,int32,int32,int32))(llvm.nacl.atomic.rmw.i32) args: %84(int32) %65(int32) %73(int32) %84(int32)
  %141(int1). cmp2 op:icmp_eq(32) %140(int32) %71(int32)
  br %141(int1) ? 7 : 2
bb:2 (succs: 3 4)
 defs: [%142,%144]
  forwardtyperef %147(int32) int32
  %142(int32). phi bb:1=>%71(int32) bb:4=>%147(int32) bb:5=>%147(int32) bb:6=>%147(int32)
  %143(int32). call %37(int32(int32,int32))(llvm.nacl.atomic.load.i32) args: %65(int32) %84(int32)
  %144(int1). cmp2 op:icmp_eq(32) %143(int32) %71(int32)
  br %144(int1) ? 3 : 4
bb:3 (succs: 7 4)
 defs: [%145,%146]
  %145(int32). call %36(int32(int32,int32,int32,int32))(llvm.nacl.atomic.rmw.i32) args: %84(int32) %65(int32) %73(int32) %84(int32)
  %146(int1). cmp2 op:icmp_eq(32) %145(int32) %71(int32)
  br %146(int1) ? 7 : 4
bb:4 (succs: 5 2)
 defs: [%147,%149]
  %147(int32). binop op:add(0) %142(int32) %73(int32) (flags:0)
  %148(int32). binop op:and(10) %147(int32) %103(int32) (flags:0)
  %149(int1). cmp2 op:icmp_eq(32) %148(int32) %71(int32)
  br %149(int1) ? 5 : 2
bb:5 (succs: 2 6)
 defs: [%150,%153]
  %150(int32). binop op:add(0) %46(int32) %74(int32) (flags:0)
  %151(int32). load src:%150(int32) align=1
  %152(int32). call indirect %151(int32) args:
  %153(int1). cmp2 op:icmp_eq(32) %152(int32) %71(int32)
  br %153(int1) ? 2 : 6
bb:6 (succs: 2)
 defs: [%154,%156]
  %154(int32). call %33(int32())(llvm.nacl.read.tp) args:
  %155(int32). binop op:add(0) %154(int32) %89(int32) (flags:0)
  %156(int32). load src:%155(int32) align=1
  store dest:%156(int32) value:%152(int32) align=1
  br 2
bb:7 (succs: 8 14)
 defs: [%157,%158]
  %157(int32). load src:%63(int32) align=1
  %158(int1). cmp2 op:icmp_eq(32) %157(int32) %71(int32)
  br %158(int1) ? 8 : 14
bb:8 (succs: 10 9)
 defs: [%159,%162]
  %159(int32). binop op:add(0) %46(int32) %77(int32) (flags:0)
  %160(int32). load src:%159(int32) align=1
  %161(int32). call indirect %160(int32) args: %79(int32) %135(int32)
  %162(int1). cmp2 op:icmp_eq(32) %161(int32) %71(int32)
  br %162(int1) ? 10 : 9
bb:9 (succs: 11)
 defs: [%163,%165]
  %163(int32). call %33(int32())(llvm.nacl.read.tp) args:
  %164(int32). binop op:add(0) %163(int32) %89(int32) (flags:0)
  %165(int32). load src:%164(int32) align=1
  store dest:%165(int32) value:%161(int32) align=1
  br 11
bb:10 (succs: 11)
 defs: [%166,%166]
  %166(int32). load src:%135(int32) align=1
  br 11
bb:11 (succs: 13 12)
 defs: [%167,%170]
  %167(int32). phi bb:9=>%83(int32) bb:10=>%166(int32)
  %168(int32). binop op:add(0) %167(int32) %83(int32) (flags:0)
  %169(int32). binop op:and(10) %168(int32) %167(int32) (flags:0)
  %170(int1). cmp2 op:icmp_eq(32) %169(int32) %71(int32)
  br %170(int1) ? 13 : 12
bb:12 (succs:)
  call %3(void()) args:
  unreachable
bb:13 (succs: 14)
 defs: [%171,%179]
  %171(int32). binop op:add(0) %63(int32) %75(int32) (flags:0)
  store dest:%171(int32) value:%108(int32) align=1
  %172(int32). binop op:add(0) %63(int32) %72(int32) (flags:0)
  store dest:%172(int32) value:%167(int32) align=1
  %173(int32). binop op:add(0) %63(int32) %76(int32) (flags:0)
  store dest:%173(int32) value:%109(int32) align=1
  %174(int32). binop op:add(0) %63(int32) %74(int32) (flags:0)
  store dest:%174(int32) value:%110(int32) align=1
  %175(int32). binop op:add(0) %63(int32) %77(int32) (flags:0)
  store dest:%175(int32) value:%81(int32) align=1
  %176(int32). binop op:add(0) %64(int32) %93(int32) (flags:0)
  store dest:%176(int32) value:%81(int32) align=1
  %177(int32). binop op:add(0) %64(int32) %91(int32) (flags:0)
  store dest:%177(int32) value:%71(int32) align=1
  %178(int32). binop op:and(10) %137(int32) %104(int32) (flags:0)
  %179(int32). binop op:xor(12) %178(int32) %111(int32) (flags:0)
  store dest:%137(int32) value:%179(int32) align=1
  call %38(void(int32,int32,int32))(llvm.nacl.atomic.store.i32) args: %179(int32) %63(int32) %84(int32)
  br 14
bb:14 (succs: 15)
  call %38(void(int32,int32,int32))(llvm.nacl.atomic.store.i32) args: %71(int32) %65(int32) %72(int32)
  br 15
bb:15 (succs: 22 16)
 defs: [%180,%183]
  %180(int32). binop op:add(0) %64(int32) %93(int32) (flags:0)
  %181(int32). load src:%180(int32) align=1
  %182(int32). binop op:and(10) %181(int32) %79(int32) (flags:0)
  %183(int1). cmp2 op:icmp_eq(32) %182(int32) %71(int32)
  br %183(int1) ? 22 : 16
bb:16 (succs: 22 17)
 defs: [%184,%186]
  %184(int32). binop op:add(0) %64(int32) %91(int32) (flags:0)
  %185(int32). call %36(int32(int32,int32,int32,int32))(llvm.nacl.atomic.rmw.i32) args: %84(int32) %184(int32) %73(int32) %84(int32)
  %186(int1). cmp2 op:icmp_eq(32) %185(int32) %71(int32)
  br %186(int1) ? 22 : 17
bb:17 (succs: 18 19)
 defs: [%187,%190]
  forwardtyperef %194(int32) int32
  %187(int32). phi bb:16=>%71(int32) bb:19=>%194(int32) bb:20=>%194(int32) bb:21=>%194(int32)
  %188(int32). binop op:add(0) %64(int32) %91(int32) (flags:0)
  %189(int32). call %37(int32(int32,int32))(llvm.nacl.atomic.load.i32) args: %188(int32) %84(int32)
  %190(int1). cmp2 op:icmp_eq(32) %189(int32) %71(int32)
  br %190(int1) ? 18 : 19
bb:18 (succs: 22 19)
 defs: [%191,%193]
  %191(int32). binop op:add(0) %64(int32) %91(int32) (flags:0)
  %192(int32). call %36(int32(int32,int32,int32,int32))(llvm.nacl.atomic.rmw.i32) args: %84(int32) %191(int32) %73(int32) %84(int32)
  %193(int1). cmp2 op:icmp_eq(32) %192(int32) %71(int32)
  br %193(int1) ? 22 : 19
bb:19 (succs: 20 17)
 defs: [%194,%196]
  %194(int32). binop op:add(0) %187(int32) %73(int32) (flags:0)
  %195(int32). binop op:and(10) %194(int32) %103(int32) (flags:0)
  %196(int1). cmp2 op:icmp_eq(32) %195(int32) %71(int32)
  br %196(int1) ? 20 : 17
bb:20 (succs: 17 21)
 defs: [%197,%200]
  %197(int32). binop op:add(0) %46(int32) %74(int32) (flags:0)
  %198(int32). load src:%197(int32) align=1
  %199(int32). call indirect %198(int32) args:
  %200(int1). cmp2 op:icmp_eq(32) %199(int32) %71(int32)
  br %200(int1) ? 17 : 21
bb:21 (succs: 17)
 defs: [%201,%203]
  %201(int32). call %33(int32())(llvm.nacl.read.tp) args:
  %202(int32). binop op:add(0) %201(int32) %89(int32) (flags:0)
  %203(int32). load src:%202(int32) align=1
  store dest:%203(int32) value:%199(int32) align=1
  br 17
bb:22 (succs: 23 99)
 defs: [%204,%204]
  %204(int1). cmp2 op:icmp_ult(36) %70(int32) %119(int32)
  br %204(int1) ? 23 : 99
bb:23 (succs: 25 24)
 defs: [%205,%205]
  %205(int1). cmp2 op:icmp_ult(36) %70(int32) %105(int32)
  br %205(int1) ? 25 : 24
bb:24 (succs: 25)
 defs: [%206,%207]
  %206(int32). binop op:add(0) %70(int32) %105(int32) (flags:0)
  %207(int32). binop op:and(10) %206(int32) %85(int32) (flags:0)
  br 25
bb:25 (succs: 33 26)
 defs: [%208,%213]
  %208(int32). phi bb:24=>%207(int32) bb:23=>%74(int32)
  %209(int32). binop op:lshr(8) %208(int32) %82(int32) (flags:0)
  %210(int32). load src:%64(int32) align=1
  %211(int32). binop op:lshr(8) %210(int32) %209(int32) (flags:0)
  %212(int32). binop op:and(10) %211(int32) %82(int32) (flags:0)
  %213(int1). cmp2 op:icmp_eq(32) %212(int32) %71(int32)
  br %213(int1) ? 33 : 26
bb:26 (succs: 27 28)
 defs: [%214,%228]
  %214(int32). binop op:and(10) %211(int32) %73(int32) (flags:0)
  %215(int32). binop op:xor(12) %214(int32) %73(int32) (flags:0)
  %216(int32). binop op:add(0) %215(int32) %209(int32) (flags:0)
  %217(int32). binop op:shl(7) %216(int32) %73(int32) (flags:0)
  %218(int32). binop op:add(0) %64(int32) %80(int32) (flags:0)
  %219(int32). binop op:mul(2) %217(int32) %72(int32) (flags:0)
  %220(int32). binop op:add(0) %218(int32) %219(int32) (flags:0)
  %221(int32). binop op:add(0) %217(int32) %79(int32) (flags:0)
  %222(int32). binop op:add(0) %64(int32) %80(int32) (flags:0)
  %223(int32). binop op:mul(2) %221(int32) %72(int32) (flags:0)
  %224(int32). binop op:add(0) %222(int32) %223(int32) (flags:0)
  %225(int32). load src:%224(int32) align=1
  %226(int32). binop op:add(0) %225(int32) %75(int32) (flags:0)
  %227(int32). load src:%226(int32) align=1
  %228(int1). cmp2 op:icmp_eq(32) %220(int32) %227(int32)
  br %228(int1) ? 27 : 28
bb:27 (succs: 32)
 defs: [%229,%231]
  %229(int32). binop op:shl(7) %73(int32) %216(int32) (flags:0)
  %230(int32). binop op:xor(12) %229(int32) %83(int32) (flags:0)
  %231(int32). binop op:and(10) %210(int32) %230(int32) (flags:0)
  store dest:%64(int32) value:%231(int32) align=1
  br 32
bb:28 (succs: 31 29)
 defs: [%232,%234]
  %232(int32). binop op:add(0) %64(int32) %74(int32) (flags:0)
  %233(int32). load src:%232(int32) align=1
  %234(int1). cmp2 op:icmp_ult(36) %227(int32) %233(int32)
  br %234(int1) ? 31 : 29
bb:29 (succs: 30 31)
 defs: [%235,%237]
  %235(int32). binop op:add(0) %227(int32) %76(int32) (flags:0)
  %236(int32). load src:%235(int32) align=1
  %237(int1). cmp2 op:icmp_eq(32) %236(int32) %225(int32)
  br %237(int1) ? 30 : 31
bb:30 (succs: 32)
  store dest:%235(int32) value:%220(int32) align=1
  store dest:%224(int32) value:%227(int32) align=1
  br 32
bb:31 (succs:)
  call %3(void()) args:
  unreachable
bb:32 (succs: 362)
 defs: [%238,%244]
  %238(int32). binop op:shl(7) %216(int32) %82(int32) (flags:0)
  %239(int32). binop op:or(11) %238(int32) %82(int32) (flags:0)
  %240(int32). binop op:add(0) %225(int32) %72(int32) (flags:0)
  store dest:%240(int32) value:%239(int32) align=1
  %241(int32). binop op:or(11) %238(int32) %72(int32) (flags:0)
  %242(int32). binop op:add(0) %225(int32) %241(int32) (flags:0)
  %243(int32). load src:%242(int32) align=1
  %244(int32). binop op:or(11) %243(int32) %73(int32) (flags:0)
  store dest:%242(int32) value:%244(int32) align=1
  br 362
bb:33 (succs: 34 181)
 defs: [%245,%247]
  %245(int32). binop op:add(0) %64(int32) %75(int32) (flags:0)
  %246(int32). load src:%245(int32) align=1
  %247(int1). cmp2 op:icmp_ugt(34) %208(int32) %246(int32)
  br %247(int1) ? 34 : 181
bb:34 (succs: 48 35)
 defs: [%248,%248]
  %248(int1). cmp2 op:icmp_eq(32) %211(int32) %71(int32)
  br %248(int1) ? 48 : 35
bb:35 (succs: 36 37)
 defs: [%249,%288]
  %249(int32). binop op:shl(7) %211(int32) %209(int32) (flags:0)
  %250(int32). binop op:shl(7) %79(int32) %209(int32) (flags:0)
  %251(int32). binop op:sub(1) %71(int32) %250(int32) (flags:0)
  %252(int32). binop op:or(11) %250(int32) %251(int32) (flags:0)
  %253(int32). binop op:and(10) %249(int32) %252(int32) (flags:0)
  %254(int32). binop op:sub(1) %71(int32) %253(int32) (flags:0)
  %255(int32). binop op:and(10) %253(int32) %254(int32) (flags:0)
  %256(int32). binop op:add(0) %255(int32) %83(int32) (flags:0)
  %257(int32). binop op:lshr(8) %256(int32) %76(int32) (flags:0)
  %258(int32). binop op:and(10) %257(int32) %74(int32) (flags:0)
  %259(int32). binop op:lshr(8) %256(int32) %258(int32) (flags:0)
  %260(int32). binop op:lshr(8) %259(int32) %106(int32) (flags:0)
  %261(int32). binop op:and(10) %260(int32) %75(int32) (flags:0)
  %262(int32). binop op:or(11) %261(int32) %258(int32) (flags:0)
  %263(int32). binop op:lshr(8) %259(int32) %261(int32) (flags:0)
  %264(int32). binop op:lshr(8) %263(int32) %79(int32) (flags:0)
  %265(int32). binop op:and(10) %264(int32) %72(int32) (flags:0)
  %266(int32). binop op:or(11) %262(int32) %265(int32) (flags:0)
  %267(int32). binop op:lshr(8) %263(int32) %265(int32) (flags:0)
  %268(int32). binop op:lshr(8) %267(int32) %73(int32) (flags:0)
  %269(int32). binop op:and(10) %268(int32) %79(int32) (flags:0)
  %270(int32). binop op:or(11) %266(int32) %269(int32) (flags:0)
  %271(int32). binop op:lshr(8) %267(int32) %269(int32) (flags:0)
  %272(int32). binop op:lshr(8) %271(int32) %73(int32) (flags:0)
  %273(int32). binop op:and(10) %272(int32) %73(int32) (flags:0)
  %274(int32). binop op:or(11) %270(int32) %273(int32) (flags:0)
  %275(int32). binop op:lshr(8) %271(int32) %273(int32) (flags:0)
  %276(int32). binop op:add(0) %274(int32) %275(int32) (flags:0)
  %277(int32). binop op:shl(7) %276(int32) %73(int32) (flags:0)
  %278(int32). binop op:add(0) %64(int32) %80(int32) (flags:0)
  %279(int32). binop op:mul(2) %277(int32) %72(int32) (flags:0)
  %280(int32). binop op:add(0) %278(int32) %279(int32) (flags:0)
  %281(int32). binop op:add(0) %277(int32) %79(int32) (flags:0)
  %282(int32). binop op:add(0) %64(int32) %80(int32) (flags:0)
  %283(int32). binop op:mul(2) %281(int32) %72(int32) (flags:0)
  %284(int32). binop op:add(0) %282(int32) %283(int32) (flags:0)
  %285(int32). load src:%284(int32) align=1
  %286(int32). binop op:add(0) %285(int32) %75(int32) (flags:0)
  %287(int32). load src:%286(int32) align=1
  %288(int1). cmp2 op:icmp_eq(32) %280(int32) %287(int32)
  br %288(int1) ? 36 : 37
bb:36 (succs: 41)
 defs: [%289,%291]
  %289(int32). binop op:shl(7) %73(int32) %276(int32) (flags:0)
  %290(int32). binop op:xor(12) %289(int32) %83(int32) (flags:0)
  %291(int32). binop op:and(10) %210(int32) %290(int32) (flags:0)
  store dest:%64(int32) value:%291(int32) align=1
  br 41
bb:37 (succs: 40 38)
 defs: [%292,%294]
  %292(int32). binop op:add(0) %64(int32) %74(int32) (flags:0)
  %293(int32). load src:%292(int32) align=1
  %294(int1). cmp2 op:icmp_ult(36) %287(int32) %293(int32)
  br %294(int1) ? 40 : 38
bb:38 (succs: 39 40)
 defs: [%295,%297]
  %295(int32). binop op:add(0) %287(int32) %76(int32) (flags:0)
  %296(int32). load src:%295(int32) align=1
  %297(int1). cmp2 op:icmp_eq(32) %296(int32) %285(int32)
  br %297(int1) ? 39 : 40
bb:39 (succs: 41)
 defs: [%298,%299]
  store dest:%295(int32) value:%280(int32) align=1
  store dest:%284(int32) value:%287(int32) align=1
  %298(int32). binop op:add(0) %64(int32) %75(int32) (flags:0)
  %299(int32). load src:%298(int32) align=1
  br 41
bb:40 (succs:)
  call %3(void()) args:
  unreachable
bb:41 (succs: 47 42)
 defs: [%300,%310]
  %300(int32). phi bb:39=>%299(int32) bb:36=>%246(int32)
  %301(int32). binop op:shl(7) %276(int32) %82(int32) (flags:0)
  %302(int32). binop op:sub(1) %301(int32) %208(int32) (flags:0)
  %303(int32). binop op:or(11) %208(int32) %82(int32) (flags:0)
  %304(int32). binop op:add(0) %285(int32) %72(int32) (flags:0)
  store dest:%304(int32) value:%303(int32) align=1
  %305(int32). binop op:add(0) %285(int32) %208(int32) (flags:0)
  %306(int32). binop op:or(11) %302(int32) %73(int32) (flags:0)
  %307(int32). binop op:or(11) %208(int32) %72(int32) (flags:0)
  %308(int32). binop op:add(0) %285(int32) %307(int32) (flags:0)
  store dest:%308(int32) value:%306(int32) align=1
  %309(int32). binop op:add(0) %285(int32) %301(int32) (flags:0)
  store dest:%309(int32) value:%302(int32) align=1
  %310(int1). cmp2 op:icmp_eq(32) %300(int32) %71(int32)
  br %310(int1) ? 47 : 42
bb:42 (succs: 43 44)
 defs: [%311,%321]
  %311(int32). binop op:add(0) %64(int32) %77(int32) (flags:0)
  %312(int32). load src:%311(int32) align=1
  %313(int32). binop op:lshr(8) %300(int32) %82(int32) (flags:0)
  %314(int32). binop op:shl(7) %313(int32) %73(int32) (flags:0)
  %315(int32). binop op:add(0) %64(int32) %80(int32) (flags:0)
  %316(int32). binop op:mul(2) %314(int32) %72(int32) (flags:0)
  %317(int32). binop op:add(0) %315(int32) %316(int32) (flags:0)
  %318(int32). load src:%64(int32) align=1
  %319(int32). binop op:shl(7) %73(int32) %313(int32) (flags:0)
  %320(int32). binop op:and(10) %318(int32) %319(int32) (flags:0)
  %321(int1). cmp2 op:icmp_eq(32) %320(int32) %71(int32)
  br %321(int1) ? 43 : 44
bb:43 (succs: 46)
 defs: [%322,%326]
  %322(int32). binop op:or(11) %318(int32) %319(int32) (flags:0)
  store dest:%64(int32) value:%322(int32) align=1
  %323(int32). binop op:add(0) %314(int32) %79(int32) (flags:0)
  %324(int32). binop op:add(0) %64(int32) %80(int32) (flags:0)
  %325(int32). binop op:mul(2) %323(int32) %72(int32) (flags:0)
  %326(int32). binop op:add(0) %324(int32) %325(int32) (flags:0)
  br 46
bb:44 (succs: 45 46)
 defs: [%327,%334]
  %327(int32). binop op:add(0) %314(int32) %79(int32) (flags:0)
  %328(int32). binop op:add(0) %64(int32) %80(int32) (flags:0)
  %329(int32). binop op:mul(2) %327(int32) %72(int32) (flags:0)
  %330(int32). binop op:add(0) %328(int32) %329(int32) (flags:0)
  %331(int32). load src:%330(int32) align=1
  %332(int32). binop op:add(0) %64(int32) %74(int32) (flags:0)
  %333(int32). load src:%332(int32) align=1
  %334(int1). cmp2 op:icmp_ult(36) %331(int32) %333(int32)
  br %334(int1) ? 45 : 46
bb:45 (succs:)
  call %3(void()) args:
  unreachable
bb:46 (succs: 47)
 defs: [%335,%339]
  %335(int32). phi bb:44=>%330(int32) bb:43=>%326(int32)
  %336(int32). phi bb:44=>%331(int32) bb:43=>%317(int32)
  store dest:%335(int32) value:%312(int32) align=1
  %337(int32). binop op:add(0) %336(int32) %76(int32) (flags:0)
  store dest:%337(int32) value:%312(int32) align=1
  %338(int32). binop op:add(0) %312(int32) %75(int32) (flags:0)
  store dest:%338(int32) value:%336(int32) align=1
  %339(int32). binop op:add(0) %312(int32) %76(int32) (flags:0)
  store dest:%339(int32) value:%317(int32) align=1
  br 47
bb:47 (succs: 362)
 defs: [%340,%341]
  %340(int32). binop op:add(0) %64(int32) %75(int32) (flags:0)
  store dest:%340(int32) value:%302(int32) align=1
  %341(int32). binop op:add(0) %64(int32) %77(int32) (flags:0)
  store dest:%341(int32) value:%305(int32) align=1
  br 362
bb:48 (succs: 181 49)
 defs: [%342,%344]
  %342(int32). binop op:add(0) %64(int32) %72(int32) (flags:0)
  %343(int32). load src:%342(int32) align=1
  %344(int1). cmp2 op:icmp_eq(32) %343(int32) %71(int32)
  br %344(int1) ? 181 : 49
bb:49 (succs: 50)
 defs: [%345,%375]
  %345(int32). binop op:sub(1) %71(int32) %343(int32) (flags:0)
  %346(int32). binop op:and(10) %343(int32) %345(int32) (flags:0)
  %347(int32). binop op:add(0) %346(int32) %83(int32) (flags:0)
  %348(int32). binop op:lshr(8) %347(int32) %76(int32) (flags:0)
  %349(int32). binop op:and(10) %348(int32) %74(int32) (flags:0)
  %350(int32). binop op:lshr(8) %347(int32) %349(int32) (flags:0)
  %351(int32). binop op:lshr(8) %350(int32) %106(int32) (flags:0)
  %352(int32). binop op:and(10) %351(int32) %75(int32) (flags:0)
  %353(int32). binop op:or(11) %352(int32) %349(int32) (flags:0)
  %354(int32). binop op:lshr(8) %350(int32) %352(int32) (flags:0)
  %355(int32). binop op:lshr(8) %354(int32) %79(int32) (flags:0)
  %356(int32). binop op:and(10) %355(int32) %72(int32) (flags:0)
  %357(int32). binop op:or(11) %353(int32) %356(int32) (flags:0)
  %358(int32). binop op:lshr(8) %354(int32) %356(int32) (flags:0)
  %359(int32). binop op:lshr(8) %358(int32) %73(int32) (flags:0)
  %360(int32). binop op:and(10) %359(int32) %79(int32) (flags:0)
  %361(int32). binop op:or(11) %357(int32) %360(int32) (flags:0)
  %362(int32). binop op:lshr(8) %358(int32) %360(int32) (flags:0)
  %363(int32). binop op:lshr(8) %362(int32) %73(int32) (flags:0)
  %364(int32). binop op:and(10) %363(int32) %73(int32) (flags:0)
  %365(int32). binop op:or(11) %361(int32) %364(int32) (flags:0)
  %366(int32). binop op:lshr(8) %362(int32) %364(int32) (flags:0)
  %367(int32). binop op:add(0) %365(int32) %366(int32) (flags:0)
  %368(int32). binop op:add(0) %64(int32) %88(int32) (flags:0)
  %369(int32). binop op:mul(2) %367(int32) %72(int32) (flags:0)
  %370(int32). binop op:add(0) %368(int32) %369(int32) (flags:0)
  %371(int32). load src:%370(int32) align=1
  %372(int32). binop op:add(0) %371(int32) %72(int32) (flags:0)
  %373(int32). load src:%372(int32) align=1
  %374(int32). binop op:and(10) %373(int32) %85(int32) (flags:0)
  %375(int32). binop op:sub(1) %374(int32) %208(int32) (flags:0)
  br 50
bb:50 (succs: 51 52)
 defs: [%376,%381]
  forwardtyperef %391(int32) int32
  %376(int32). phi bb:49=>%375(int32) bb:52=>%391(int32)
  forwardtyperef %392(int32) int32
  %377(int32). phi bb:49=>%371(int32) bb:52=>%392(int32)
  forwardtyperef %385(int32) int32
  %378(int32). phi bb:49=>%371(int32) bb:52=>%385(int32)
  %379(int32). binop op:add(0) %378(int32) %74(int32) (flags:0)
  %380(int32). load src:%379(int32) align=1
  %381(int1). cmp2 op:icmp_eq(32) %380(int32) %71(int32)
  br %381(int1) ? 51 : 52
bb:51 (succs: 53 52)
 defs: [%382,%384]
  %382(int32). binop op:add(0) %378(int32) %77(int32) (flags:0)
  %383(int32). load src:%382(int32) align=1
  %384(int1). cmp2 op:icmp_eq(32) %383(int32) %71(int32)
  br %384(int1) ? 53 : 52
bb:52 (succs: 50)
 defs: [%385,%392]
  %385(int32). phi bb:51=>%383(int32) bb:50=>%380(int32)
  %386(int32). binop op:add(0) %385(int32) %72(int32) (flags:0)
  %387(int32). load src:%386(int32) align=1
  %388(int32). binop op:and(10) %387(int32) %85(int32) (flags:0)
  %389(int32). binop op:sub(1) %388(int32) %208(int32) (flags:0)
  %390(int1). cmp2 op:icmp_ult(36) %389(int32) %376(int32)
  %391(int32). vselect %390(int1) ? %389(int32) : %376(int32)
  %392(int32). vselect %390(int1) ? %385(int32) : %377(int32)
  br 50
bb:53 (succs: 97 54)
 defs: [%393,%395]
  %393(int32). binop op:add(0) %64(int32) %74(int32) (flags:0)
  %394(int32). load src:%393(int32) align=1
  %395(int1). cmp2 op:icmp_ult(36) %377(int32) %394(int32)
  br %395(int1) ? 97 : 54
bb:54 (succs: 55 97)
 defs: [%396,%397]
  %396(int32). binop op:add(0) %377(int32) %208(int32) (flags:0)
  %397(int1). cmp2 op:icmp_ult(36) %377(int32) %396(int32)
  br %397(int1) ? 55 : 97
bb:55 (succs: 61 56)
 defs: [%398,%402]
  %398(int32). binop op:add(0) %377(int32) %78(int32) (flags:0)
  %399(int32). load src:%398(int32) align=1
  %400(int32). binop op:add(0) %377(int32) %76(int32) (flags:0)
  %401(int32). load src:%400(int32) align=1
  %402(int1). cmp2 op:icmp_eq(32) %401(int32) %377(int32)
  br %402(int1) ? 61 : 56
bb:56 (succs: 60 57)
 defs: [%403,%405]
  %403(int32). binop op:add(0) %377(int32) %75(int32) (flags:0)
  %404(int32). load src:%403(int32) align=1
  %405(int1). cmp2 op:icmp_ult(36) %404(int32) %394(int32)
  br %405(int1) ? 60 : 57
bb:57 (succs: 58 60)
 defs: [%406,%408]
  %406(int32). binop op:add(0) %404(int32) %76(int32) (flags:0)
  %407(int32). load src:%406(int32) align=1
  %408(int1). cmp2 op:icmp_eq(32) %407(int32) %377(int32)
  br %408(int1) ? 58 : 60
bb:58 (succs: 59 60)
 defs: [%409,%411]
  %409(int32). binop op:add(0) %401(int32) %75(int32) (flags:0)
  %410(int32). load src:%409(int32) align=1
  %411(int1). cmp2 op:icmp_eq(32) %410(int32) %377(int32)
  br %411(int1) ? 59 : 60
bb:59 (succs: 68)
  store dest:%406(int32) value:%401(int32) align=1
  store dest:%409(int32) value:%404(int32) align=1
  br 68
bb:60 (succs:)
  call %3(void()) args:
  unreachable
bb:61 (succs: 62 63)
 defs: [%412,%414]
  %412(int32). binop op:add(0) %377(int32) %77(int32) (flags:0)
  %413(int32). load src:%412(int32) align=1
  %414(int1). cmp2 op:icmp_eq(32) %413(int32) %71(int32)
  br %414(int1) ? 62 : 63
bb:62 (succs: 68 63)
 defs: [%415,%417]
  %415(int32). binop op:add(0) %377(int32) %74(int32) (flags:0)
  %416(int32). load src:%415(int32) align=1
  %417(int1). cmp2 op:icmp_eq(32) %416(int32) %71(int32)
  br %417(int1) ? 68 : 63
bb:63 (succs: 64 63)
 defs: [%418,%422]
  forwardtyperef %420(int32) int32
  forwardtyperef %423(int32) int32
  %418(int32). phi bb:62=>%415(int32) bb:61=>%412(int32) bb:63=>%420(int32) bb:64=>%423(int32)
  forwardtyperef %421(int32) int32
  forwardtyperef %424(int32) int32
  %419(int32). phi bb:62=>%416(int32) bb:61=>%413(int32) bb:63=>%421(int32) bb:64=>%424(int32)
  %420(int32). binop op:add(0) %419(int32) %77(int32) (flags:0)
  %421(int32). load src:%420(int32) align=1
  %422(int1). cmp2 op:icmp_eq(32) %421(int32) %71(int32)
  br %422(int1) ? 64 : 63
bb:64 (succs: 65 63)
 defs: [%423,%425]
  %423(int32). binop op:add(0) %419(int32) %74(int32) (flags:0)
  %424(int32). load src:%423(int32) align=1
  %425(int1). cmp2 op:icmp_eq(32) %424(int32) %71(int32)
  br %425(int1) ? 65 : 63
bb:65 (succs: 67 66)
 defs: [%426,%426]
  %426(int1). cmp2 op:icmp_ult(36) %418(int32) %394(int32)
  br %426(int1) ? 67 : 66
bb:66 (succs: 68)
  store dest:%418(int32) value:%71(int32) align=1
  br 68
bb:67 (succs:)
  call %3(void()) args:
  unreachable
bb:68 (succs: 88 69)
 defs: [%427,%428]
  %427(int32). phi bb:59=>%401(int32) bb:66=>%419(int32) bb:62=>%71(int32)
  %428(int1). cmp2 op:icmp_eq(32) %399(int32) %71(int32)
  br %428(int1) ? 88 : 69
bb:69 (succs: 70 72)
 defs: [%429,%435]
  %429(int32). binop op:add(0) %377(int32) %87(int32) (flags:0)
  %430(int32). load src:%429(int32) align=1
  %431(int32). binop op:add(0) %64(int32) %88(int32) (flags:0)
  %432(int32). binop op:mul(2) %430(int32) %72(int32) (flags:0)
  %433(int32). binop op:add(0) %431(int32) %432(int32) (flags:0)
  %434(int32). load src:%433(int32) align=1
  %435(int1). cmp2 op:icmp_eq(32) %377(int32) %434(int32)
  br %435(int1) ? 70 : 72
bb:70 (succs: 71 78)
 defs: [%436,%436]
  store dest:%433(int32) value:%427(int32) align=1
  %436(int1). cmp2 op:icmp_eq(32) %427(int32) %71(int32)
  br %436(int1) ? 71 : 78
bb:71 (succs: 88)
 defs: [%437,%442]
  %437(int32). binop op:shl(7) %73(int32) %430(int32) (flags:0)
  %438(int32). binop op:xor(12) %437(int32) %83(int32) (flags:0)
  %439(int32). binop op:add(0) %64(int32) %72(int32) (flags:0)
  %440(int32). load src:%439(int32) align=1
  %441(int32). binop op:and(10) %440(int32) %438(int32) (flags:0)
  %442(int32). binop op:add(0) %64(int32) %72(int32) (flags:0)
  store dest:%442(int32) value:%441(int32) align=1
  br 88
bb:72 (succs: 76 73)
 defs: [%443,%445]
  %443(int32). binop op:add(0) %64(int32) %74(int32) (flags:0)
  %444(int32). load src:%443(int32) align=1
  %445(int1). cmp2 op:icmp_ult(36) %399(int32) %444(int32)
  br %445(int1) ? 76 : 73
bb:73 (succs: 74 75)
 defs: [%446,%448]
  %446(int32). binop op:add(0) %399(int32) %74(int32) (flags:0)
  %447(int32). load src:%446(int32) align=1
  %448(int1). cmp2 op:icmp_eq(32) %447(int32) %377(int32)
  br %448(int1) ? 74 : 75
bb:74 (succs: 77)
  store dest:%446(int32) value:%427(int32) align=1
  br 77
bb:75 (succs: 77)
 defs: [%449,%449]
  %449(int32). binop op:add(0) %399(int32) %77(int32) (flags:0)
  store dest:%449(int32) value:%427(int32) align=1
  br 77
bb:76 (succs:)
  call %3(void()) args:
  unreachable
bb:77 (succs: 88 78)
 defs: [%450,%450]
  %450(int1). cmp2 op:icmp_eq(32) %427(int32) %71(int32)
  br %450(int1) ? 88 : 78
bb:78 (succs: 87 79)
 defs: [%451,%453]
  %451(int32). binop op:add(0) %64(int32) %74(int32) (flags:0)
  %452(int32). load src:%451(int32) align=1
  %453(int1). cmp2 op:icmp_ult(36) %427(int32) %452(int32)
  br %453(int1) ? 87 : 79
bb:79 (succs: 83 80)
 defs: [%454,%457]
  %454(int32). binop op:add(0) %427(int32) %78(int32) (flags:0)
  store dest:%454(int32) value:%399(int32) align=1
  %455(int32). binop op:add(0) %377(int32) %74(int32) (flags:0)
  %456(int32). load src:%455(int32) align=1
  %457(int1). cmp2 op:icmp_eq(32) %456(int32) %71(int32)
  br %457(int1) ? 83 : 80
bb:80 (succs: 82 81)
 defs: [%458,%458]
  %458(int1). cmp2 op:icmp_ult(36) %456(int32) %452(int32)
  br %458(int1) ? 82 : 81
bb:81 (succs: 83)
 defs: [%459,%460]
  %459(int32). binop op:add(0) %427(int32) %74(int32) (flags:0)
  store dest:%459(int32) value:%456(int32) align=1
  %460(int32). binop op:add(0) %456(int32) %78(int32) (flags:0)
  store dest:%460(int32) value:%427(int32) align=1
  br 83
bb:82 (succs:)
  call %3(void()) args:
  unreachable
bb:83 (succs: 88 84)
 defs: [%461,%463]
  %461(int32). binop op:add(0) %377(int32) %77(int32) (flags:0)
  %462(int32). load src:%461(int32) align=1
  %463(int1). cmp2 op:icmp_eq(32) %462(int32) %71(int32)
  br %463(int1) ? 88 : 84
bb:84 (succs: 86 85)
 defs: [%464,%466]
  %464(int32). binop op:add(0) %64(int32) %74(int32) (flags:0)
  %465(int32). load src:%464(int32) align=1
  %466(int1). cmp2 op:icmp_ult(36) %462(int32) %465(int32)
  br %466(int1) ? 86 : 85
bb:85 (succs: 88)
 defs: [%467,%468]
  %467(int32). binop op:add(0) %427(int32) %77(int32) (flags:0)
  store dest:%467(int32) value:%462(int32) align=1
  %468(int32). binop op:add(0) %462(int32) %78(int32) (flags:0)
  store dest:%468(int32) value:%427(int32) align=1
  br 88
bb:86 (succs:)
  call %3(void()) args:
  unreachable
bb:87 (succs:)
  call %3(void()) args:
  unreachable
bb:88 (succs: 89 90)
 defs: [%469,%469]
  %469(int1). cmp2 op:icmp_ult(36) %376(int32) %74(int32)
  br %469(int1) ? 89 : 90
bb:89 (succs: 98)
 defs: [%470,%476]
  %470(int32). binop op:add(0) %376(int32) %208(int32) (flags:0)
  %471(int32). binop op:or(11) %470(int32) %82(int32) (flags:0)
  %472(int32). binop op:add(0) %377(int32) %72(int32) (flags:0)
  store dest:%472(int32) value:%471(int32) align=1
  %473(int32). binop op:add(0) %470(int32) %72(int32) (flags:0)
  %474(int32). binop op:add(0) %377(int32) %473(int32) (flags:0)
  %475(int32). load src:%474(int32) align=1
  %476(int32). binop op:or(11) %475(int32) %73(int32) (flags:0)
  store dest:%474(int32) value:%476(int32) align=1
  br 98
bb:90 (succs: 96 91)
 defs: [%477,%486]
  %477(int32). binop op:or(11) %208(int32) %82(int32) (flags:0)
  %478(int32). binop op:add(0) %377(int32) %72(int32) (flags:0)
  store dest:%478(int32) value:%477(int32) align=1
  %479(int32). binop op:or(11) %376(int32) %73(int32) (flags:0)
  %480(int32). binop op:or(11) %208(int32) %72(int32) (flags:0)
  %481(int32). binop op:add(0) %377(int32) %480(int32) (flags:0)
  store dest:%481(int32) value:%479(int32) align=1
  %482(int32). binop op:add(0) %376(int32) %208(int32) (flags:0)
  %483(int32). binop op:add(0) %377(int32) %482(int32) (flags:0)
  store dest:%483(int32) value:%376(int32) align=1
  %484(int32). binop op:add(0) %64(int32) %75(int32) (flags:0)
  %485(int32). load src:%484(int32) align=1
  %486(int1). cmp2 op:icmp_eq(32) %485(int32) %71(int32)
  br %486(int1) ? 96 : 91
bb:91 (succs: 92 93)
 defs: [%487,%497]
  %487(int32). binop op:add(0) %64(int32) %77(int32) (flags:0)
  %488(int32). load src:%487(int32) align=1
  %489(int32). binop op:lshr(8) %485(int32) %82(int32) (flags:0)
  %490(int32). binop op:shl(7) %489(int32) %73(int32) (flags:0)
  %491(int32). binop op:add(0) %64(int32) %80(int32) (flags:0)
  %492(int32). binop op:mul(2) %490(int32) %72(int32) (flags:0)
  %493(int32). binop op:add(0) %491(int32) %492(int32) (flags:0)
  %494(int32). load src:%64(int32) align=1
  %495(int32). binop op:shl(7) %73(int32) %489(int32) (flags:0)
  %496(int32). binop op:and(10) %494(int32) %495(int32) (flags:0)
  %497(int1). cmp2 op:icmp_eq(32) %496(int32) %71(int32)
  br %497(int1) ? 92 : 93
bb:92 (succs: 95)
 defs: [%498,%502]
  %498(int32). binop op:or(11) %494(int32) %495(int32) (flags:0)
  store dest:%64(int32) value:%498(int32) align=1
  %499(int32). binop op:add(0) %490(int32) %79(int32) (flags:0)
  %500(int32). binop op:add(0) %64(int32) %80(int32) (flags:0)
  %501(int32). binop op:mul(2) %499(int32) %72(int32) (flags:0)
  %502(int32). binop op:add(0) %500(int32) %501(int32) (flags:0)
  br 95
bb:93 (succs: 94 95)
 defs: [%503,%510]
  %503(int32). binop op:add(0) %490(int32) %79(int32) (flags:0)
  %504(int32). binop op:add(0) %64(int32) %80(int32) (flags:0)
  %505(int32). binop op:mul(2) %503(int32) %72(int32) (flags:0)
  %506(int32). binop op:add(0) %504(int32) %505(int32) (flags:0)
  %507(int32). load src:%506(int32) align=1
  %508(int32). binop op:add(0) %64(int32) %74(int32) (flags:0)
  %509(int32). load src:%508(int32) align=1
  %510(int1). cmp2 op:icmp_ult(36) %507(int32) %509(int32)
  br %510(int1) ? 94 : 95
bb:94 (succs:)
  call %3(void()) args:
  unreachable
bb:95 (succs: 96)
 defs: [%511,%515]
  %511(int32). phi bb:93=>%506(int32) bb:92=>%502(int32)
  %512(int32). phi bb:93=>%507(int32) bb:92=>%493(int32)
  store dest:%511(int32) value:%488(int32) align=1
  %513(int32). binop op:add(0) %512(int32) %76(int32) (flags:0)
  store dest:%513(int32) value:%488(int32) align=1
  %514(int32). binop op:add(0) %488(int32) %75(int32) (flags:0)
  store dest:%514(int32) value:%512(int32) align=1
  %515(int32). binop op:add(0) %488(int32) %76(int32) (flags:0)
  store dest:%515(int32) value:%493(int32) align=1
  br 96
bb:96 (succs: 98)
 defs: [%516,%517]
  %516(int32). binop op:add(0) %64(int32) %75(int32) (flags:0)
  store dest:%516(int32) value:%376(int32) align=1
  %517(int32). binop op:add(0) %64(int32) %77(int32) (flags:0)
  store dest:%517(int32) value:%396(int32) align=1
  br 98
bb:97 (succs:)
  call %3(void()) args:
  unreachable
bb:98 (succs: 362)
 defs: [%518,%518]
  %518(int32). binop op:add(0) %377(int32) %75(int32) (flags:0)
  br 362
bb:99 (succs: 181 100)
 defs: [%519,%519]
  %519(int1). cmp2 op:icmp_ugt(34) %70(int32) %120(int32)
  br %519(int1) ? 181 : 100
bb:100 (succs: 181 101)
 defs: [%520,%524]
  %520(int32). binop op:add(0) %70(int32) %105(int32) (flags:0)
  %521(int32). binop op:and(10) %520(int32) %85(int32) (flags:0)
  %522(int32). binop op:add(0) %64(int32) %72(int32) (flags:0)
  %523(int32). load src:%522(int32) align=1
  %524(int1). cmp2 op:icmp_eq(32) %523(int32) %71(int32)
  br %524(int1) ? 181 : 101
bb:101 (succs: 104 102)
 defs: [%525,%527]
  %525(int32). binop op:sub(1) %71(int32) %521(int32) (flags:0)
  %526(int32). binop op:lshr(8) %520(int32) %75(int32) (flags:0)
  %527(int1). cmp2 op:icmp_eq(32) %526(int32) %71(int32)
  br %527(int1) ? 104 : 102
bb:102 (succs: 104 103)
 defs: [%528,%528]
  %528(int1). cmp2 op:icmp_ugt(34) %521(int32) %95(int32)
  br %528(int1) ? 104 : 103
bb:103 (succs: 104)
 defs: [%529,%550]
  %529(int32). binop op:add(0) %526(int32) %96(int32) (flags:0)
  %530(int32). binop op:lshr(8) %529(int32) %74(int32) (flags:0)
  %531(int32). binop op:and(10) %530(int32) %75(int32) (flags:0)
  %532(int32). binop op:shl(7) %526(int32) %531(int32) (flags:0)
  %533(int32). binop op:add(0) %532(int32) %97(int32) (flags:0)
  %534(int32). binop op:lshr(8) %533(int32) %74(int32) (flags:0)
  %535(int32). binop op:and(10) %534(int32) %72(int32) (flags:0)
  %536(int32). binop op:or(11) %535(int32) %531(int32) (flags:0)
  %537(int32). binop op:shl(7) %532(int32) %535(int32) (flags:0)
  %538(int32). binop op:add(0) %537(int32) %98(int32) (flags:0)
  %539(int32). binop op:lshr(8) %538(int32) %74(int32) (flags:0)
  %540(int32). binop op:and(10) %539(int32) %79(int32) (flags:0)
  %541(int32). binop op:or(11) %536(int32) %540(int32) (flags:0)
  %542(int32). binop op:sub(1) %99(int32) %541(int32) (flags:0)
  %543(int32). binop op:shl(7) %537(int32) %540(int32) (flags:0)
  %544(int32). binop op:lshr(8) %543(int32) %94(int32) (flags:0)
  %545(int32). binop op:add(0) %542(int32) %544(int32) (flags:0)
  %546(int32). binop op:shl(7) %545(int32) %73(int32) (flags:0)
  %547(int32). binop op:add(0) %545(int32) %81(int32) (flags:0)
  %548(int32). binop op:lshr(8) %521(int32) %547(int32) (flags:0)
  %549(int32). binop op:and(10) %548(int32) %73(int32) (flags:0)
  %550(int32). binop op:or(11) %549(int32) %546(int32) (flags:0)
  br 104
bb:104 (succs: 111 105)
 defs: [%551,%556]
  %551(int32). phi bb:103=>%550(int32) bb:101=>%71(int32) bb:102=>%86(int32)
  %552(int32). binop op:add(0) %64(int32) %88(int32) (flags:0)
  %553(int32). binop op:mul(2) %551(int32) %72(int32) (flags:0)
  %554(int32). binop op:add(0) %552(int32) %553(int32) (flags:0)
  %555(int32). load src:%554(int32) align=1
  %556(int1). cmp2 op:icmp_eq(32) %555(int32) %71(int32)
  br %556(int1) ? 111 : 105
bb:105 (succs: 107 106)
 defs: [%557,%557]
  %557(int1). cmp2 op:icmp_eq(32) %551(int32) %86(int32)
  br %557(int1) ? 107 : 106
bb:106 (succs: 107)
 defs: [%558,%559]
  %558(int32). binop op:lshr(8) %551(int32) %73(int32) (flags:0)
  %559(int32). binop op:sub(1) %100(int32) %558(int32) (flags:0)
  br 107
bb:107 (succs: 108)
 defs: [%560,%561]
  %560(int32). phi bb:106=>%559(int32) bb:105=>%71(int32)
  %561(int32). binop op:shl(7) %521(int32) %560(int32) (flags:0)
  br 108
bb:108 (succs: 109 110)
 defs: [%562,%571]
  forwardtyperef %585(int32) int32
  %562(int32). phi bb:107=>%71(int32) bb:110=>%585(int32)
  forwardtyperef %587(int32) int32
  %563(int32). phi bb:107=>%561(int32) bb:110=>%587(int32)
  forwardtyperef %581(int32) int32
  %564(int32). phi bb:107=>%555(int32) bb:110=>%581(int32)
  forwardtyperef %573(int32) int32
  %565(int32). phi bb:107=>%525(int32) bb:110=>%573(int32)
  forwardtyperef %574(int32) int32
  %566(int32). phi bb:107=>%71(int32) bb:110=>%574(int32)
  %567(int32). binop op:add(0) %564(int32) %72(int32) (flags:0)
  %568(int32). load src:%567(int32) align=1
  %569(int32). binop op:and(10) %568(int32) %85(int32) (flags:0)
  %570(int32). binop op:sub(1) %569(int32) %521(int32) (flags:0)
  %571(int1). cmp2 op:icmp_ult(36) %570(int32) %565(int32)
  br %571(int1) ? 109 : 110
bb:109 (succs: 115 110)
 defs: [%572,%572]
  %572(int1). cmp2 op:icmp_eq(32) %569(int32) %521(int32)
  br %572(int1) ? 115 : 110
bb:110 (succs: 111 108)
 defs: [%573,%587]
  %573(int32). phi bb:109=>%570(int32) bb:108=>%565(int32)
  %574(int32). phi bb:109=>%564(int32) bb:108=>%566(int32)
  %575(int32). binop op:add(0) %564(int32) %77(int32) (flags:0)
  %576(int32). load src:%575(int32) align=1
  %577(int32). binop op:lshr(8) %563(int32) %86(int32) (flags:0)
  %578(int32). binop op:add(0) %564(int32) %74(int32) (flags:0)
  %579(int32). binop op:mul(2) %577(int32) %72(int32) (flags:0)
  %580(int32). binop op:add(0) %578(int32) %579(int32) (flags:0)
  %581(int32). load src:%580(int32) align=1
  %582(int1). cmp2 op:icmp_eq(32) %576(int32) %71(int32)
  %583(int1). cmp2 op:icmp_eq(32) %576(int32) %581(int32)
  %584(int1). binop op:or(11) %582(int1) %583(int1) (flags:0)
  %585(int32). vselect %584(int1) ? %562(int32) : %576(int32)
  %586(int1). cmp2 op:icmp_eq(32) %581(int32) %71(int32)
  %587(int32). binop op:shl(7) %563(int32) %73(int32) (flags:0)
  br %586(int1) ? 111 : 108
bb:111 (succs: 112 114)
 defs: [%588,%593]
  %588(int32). phi bb:104=>%71(int32) bb:110=>%585(int32)
  %589(int32). phi bb:104=>%525(int32) bb:110=>%573(int32)
  %590(int32). phi bb:104=>%71(int32) bb:110=>%574(int32)
  %591(int1). cmp2 op:icmp_eq(32) %588(int32) %71(int32)
  %592(int1). cmp2 op:icmp_eq(32) %590(int32) %71(int32)
  %593(int1). binop op:and(10) %591(int1) %592(int1) (flags:0)
  br %593(int1) ? 112 : 114
bb:112 (succs: 181 113)
 defs: [%594,%598]
  %594(int32). binop op:shl(7) %79(int32) %551(int32) (flags:0)
  %595(int32). binop op:sub(1) %71(int32) %594(int32) (flags:0)
  %596(int32). binop op:or(11) %594(int32) %595(int32) (flags:0)
  %597(int32). binop op:and(10) %523(int32) %596(int32) (flags:0)
  %598(int1). cmp2 op:icmp_eq(32) %597(int32) %71(int32)
  br %598(int1) ? 181 : 113
bb:113 (succs: 114)
 defs: [%599,%625]
  %599(int32). binop op:sub(1) %71(int32) %597(int32) (flags:0)
  %600(int32). binop op:and(10) %597(int32) %599(int32) (flags:0)
  %601(int32). binop op:add(0) %600(int32) %83(int32) (flags:0)
  %602(int32). binop op:lshr(8) %601(int32) %76(int32) (flags:0)
  %603(int32). binop op:and(10) %602(int32) %74(int32) (flags:0)
  %604(int32). binop op:lshr(8) %601(int32) %603(int32) (flags:0)
  %605(int32). binop op:lshr(8) %604(int32) %106(int32) (flags:0)
  %606(int32). binop op:and(10) %605(int32) %75(int32) (flags:0)
  %607(int32). binop op:or(11) %606(int32) %603(int32) (flags:0)
  %608(int32). binop op:lshr(8) %604(int32) %606(int32) (flags:0)
  %609(int32). binop op:lshr(8) %608(int32) %79(int32) (flags:0)
  %610(int32). binop op:and(10) %609(int32) %72(int32) (flags:0)
  %611(int32). binop op:or(11) %607(int32) %610(int32) (flags:0)
  %612(int32). binop op:lshr(8) %608(int32) %610(int32) (flags:0)
  %613(int32). binop op:lshr(8) %612(int32) %73(int32) (flags:0)
  %614(int32). binop op:and(10) %613(int32) %79(int32) (flags:0)
  %615(int32). binop op:or(11) %611(int32) %614(int32) (flags:0)
  %616(int32). binop op:lshr(8) %612(int32) %614(int32) (flags:0)
  %617(int32). binop op:lshr(8) %616(int32) %73(int32) (flags:0)
  %618(int32). binop op:and(10) %617(int32) %73(int32) (flags:0)
  %619(int32). binop op:or(11) %615(int32) %618(int32) (flags:0)
  %620(int32). binop op:lshr(8) %616(int32) %618(int32) (flags:0)
  %621(int32). binop op:add(0) %619(int32) %620(int32) (flags:0)
  %622(int32). binop op:add(0) %64(int32) %88(int32) (flags:0)
  %623(int32). binop op:mul(2) %621(int32) %72(int32) (flags:0)
  %624(int32). binop op:add(0) %622(int32) %623(int32) (flags:0)
  %625(int32). load src:%624(int32) align=1
  br 114
bb:114 (succs: 117 115)
 defs: [%626,%627]
  %626(int32). phi bb:111=>%588(int32) bb:113=>%625(int32)
  %627(int1). cmp2 op:icmp_eq(32) %626(int32) %71(int32)
  br %627(int1) ? 117 : 115
bb:115 (succs: 116 115)
 defs: [%628,%640]
  forwardtyperef %637(int32) int32
  %628(int32). phi bb:114=>%590(int32) bb:109=>%564(int32) bb:116=>%637(int32) bb:115=>%637(int32)
  forwardtyperef %636(int32) int32
  %629(int32). phi bb:114=>%589(int32) bb:109=>%570(int32) bb:116=>%636(int32) bb:115=>%636(int32)
  forwardtyperef %642(int32) int32
  forwardtyperef %639(int32) int32
  %630(int32). phi bb:114=>%626(int32) bb:109=>%564(int32) bb:116=>%642(int32) bb:115=>%639(int32)
  %631(int32). binop op:add(0) %630(int32) %72(int32) (flags:0)
  %632(int32). load src:%631(int32) align=1
  %633(int32). binop op:and(10) %632(int32) %85(int32) (flags:0)
  %634(int32). binop op:sub(1) %633(int32) %521(int32) (flags:0)
  %635(int1). cmp2 op:icmp_ult(36) %634(int32) %629(int32)
  %636(int32). vselect %635(int1) ? %634(int32) : %629(int32)
  %637(int32). vselect %635(int1) ? %630(int32) : %628(int32)
  %638(int32). binop op:add(0) %630(int32) %74(int32) (flags:0)
  %639(int32). load src:%638(int32) align=1
  %640(int1). cmp2 op:icmp_eq(32) %639(int32) %71(int32)
  br %640(int1) ? 116 : 115
bb:116 (succs: 117 115)
 defs: [%641,%643]
  %641(int32). binop op:add(0) %630(int32) %77(int32) (flags:0)
  %642(int32). load src:%641(int32) align=1
  %643(int1). cmp2 op:icmp_eq(32) %642(int32) %71(int32)
  br %643(int1) ? 117 : 115
bb:117 (succs: 181 118)
 defs: [%644,%646]
  %644(int32). phi bb:114=>%590(int32) bb:116=>%637(int32)
  %645(int32). phi bb:114=>%589(int32) bb:116=>%636(int32)
  %646(int1). cmp2 op:icmp_eq(32) %644(int32) %71(int32)
  br %646(int1) ? 181 : 118
bb:118 (succs: 119 181)
 defs: [%647,%650]
  %647(int32). binop op:add(0) %64(int32) %75(int32) (flags:0)
  %648(int32). load src:%647(int32) align=1
  %649(int32). binop op:sub(1) %648(int32) %521(int32) (flags:0)
  %650(int1). cmp2 op:icmp_ult(36) %645(int32) %649(int32)
  br %650(int1) ? 119 : 181
bb:119 (succs: 179 120)
 defs: [%651,%653]
  %651(int32). binop op:add(0) %64(int32) %74(int32) (flags:0)
  %652(int32). load src:%651(int32) align=1
  %653(int1). cmp2 op:icmp_ult(36) %644(int32) %652(int32)
  br %653(int1) ? 179 : 120
bb:120 (succs: 121 179)
 defs: [%654,%655]
  %654(int32). binop op:add(0) %644(int32) %521(int32) (flags:0)
  %655(int1). cmp2 op:icmp_ult(36) %644(int32) %654(int32)
  br %655(int1) ? 121 : 179
bb:121 (succs: 127 122)
 defs: [%656,%660]
  %656(int32). binop op:add(0) %644(int32) %78(int32) (flags:0)
  %657(int32). load src:%656(int32) align=1
  %658(int32). binop op:add(0) %644(int32) %76(int32) (flags:0)
  %659(int32). load src:%658(int32) align=1
  %660(int1). cmp2 op:icmp_eq(32) %659(int32) %644(int32)
  br %660(int1) ? 127 : 122
bb:122 (succs: 126 123)
 defs: [%661,%663]
  %661(int32). binop op:add(0) %644(int32) %75(int32) (flags:0)
  %662(int32). load src:%661(int32) align=1
  %663(int1). cmp2 op:icmp_ult(36) %662(int32) %652(int32)
  br %663(int1) ? 126 : 123
bb:123 (succs: 124 126)
 defs: [%664,%666]
  %664(int32). binop op:add(0) %662(int32) %76(int32) (flags:0)
  %665(int32). load src:%664(int32) align=1
  %666(int1). cmp2 op:icmp_eq(32) %665(int32) %644(int32)
  br %666(int1) ? 124 : 126
bb:124 (succs: 125 126)
 defs: [%667,%669]
  %667(int32). binop op:add(0) %659(int32) %75(int32) (flags:0)
  %668(int32). load src:%667(int32) align=1
  %669(int1). cmp2 op:icmp_eq(32) %668(int32) %644(int32)
  br %669(int1) ? 125 : 126
bb:125 (succs: 134)
  store dest:%664(int32) value:%659(int32) align=1
  store dest:%667(int32) value:%662(int32) align=1
  br 134
bb:126 (succs:)
  call %3(void()) args:
  unreachable
bb:127 (succs: 128 129)
 defs: [%670,%672]
  %670(int32). binop op:add(0) %644(int32) %77(int32) (flags:0)
  %671(int32). load src:%670(int32) align=1
  %672(int1). cmp2 op:icmp_eq(32) %671(int32) %71(int32)
  br %672(int1) ? 128 : 129
bb:128 (succs: 134 129)
 defs: [%673,%675]
  %673(int32). binop op:add(0) %644(int32) %74(int32) (flags:0)
  %674(int32). load src:%673(int32) align=1
  %675(int1). cmp2 op:icmp_eq(32) %674(int32) %71(int32)
  br %675(int1) ? 134 : 129
bb:129 (succs: 130 129)
 defs: [%676,%680]
  forwardtyperef %678(int32) int32
  forwardtyperef %681(int32) int32
  %676(int32). phi bb:128=>%673(int32) bb:127=>%670(int32) bb:129=>%678(int32) bb:130=>%681(int32)
  forwardtyperef %679(int32) int32
  forwardtyperef %682(int32) int32
  %677(int32). phi bb:128=>%674(int32) bb:127=>%671(int32) bb:129=>%679(int32) bb:130=>%682(int32)
  %678(int32). binop op:add(0) %677(int32) %77(int32) (flags:0)
  %679(int32). load src:%678(int32) align=1
  %680(int1). cmp2 op:icmp_eq(32) %679(int32) %71(int32)
  br %680(int1) ? 130 : 129
bb:130 (succs: 131 129)
 defs: [%681,%683]
  %681(int32). binop op:add(0) %677(int32) %74(int32) (flags:0)
  %682(int32). load src:%681(int32) align=1
  %683(int1). cmp2 op:icmp_eq(32) %682(int32) %71(int32)
  br %683(int1) ? 131 : 129
bb:131 (succs: 133 132)
 defs: [%684,%684]
  %684(int1). cmp2 op:icmp_ult(36) %676(int32) %652(int32)
  br %684(int1) ? 133 : 132
bb:132 (succs: 134)
  store dest:%676(int32) value:%71(int32) align=1
  br 134
bb:133 (succs:)
  call %3(void()) args:
  unreachable
bb:134 (succs: 154 135)
 defs: [%685,%686]
  %685(int32). phi bb:125=>%659(int32) bb:132=>%677(int32) bb:128=>%71(int32)
  %686(int1). cmp2 op:icmp_eq(32) %657(int32) %71(int32)
  br %686(int1) ? 154 : 135
bb:135 (succs: 136 138)
 defs: [%687,%693]
  %687(int32). binop op:add(0) %644(int32) %87(int32) (flags:0)
  %688(int32). load src:%687(int32) align=1
  %689(int32). binop op:add(0) %64(int32) %88(int32) (flags:0)
  %690(int32). binop op:mul(2) %688(int32) %72(int32) (flags:0)
  %691(int32). binop op:add(0) %689(int32) %690(int32) (flags:0)
  %692(int32). load src:%691(int32) align=1
  %693(int1). cmp2 op:icmp_eq(32) %644(int32) %692(int32)
  br %693(int1) ? 136 : 138
bb:136 (succs: 137 144)
 defs: [%694,%694]
  store dest:%691(int32) value:%685(int32) align=1
  %694(int1). cmp2 op:icmp_eq(32) %685(int32) %71(int32)
  br %694(int1) ? 137 : 144
bb:137 (succs: 154)
 defs: [%695,%700]
  %695(int32). binop op:shl(7) %73(int32) %688(int32) (flags:0)
  %696(int32). binop op:xor(12) %695(int32) %83(int32) (flags:0)
  %697(int32). binop op:add(0) %64(int32) %72(int32) (flags:0)
  %698(int32). load src:%697(int32) align=1
  %699(int32). binop op:and(10) %698(int32) %696(int32) (flags:0)
  %700(int32). binop op:add(0) %64(int32) %72(int32) (flags:0)
  store dest:%700(int32) value:%699(int32) align=1
  br 154
bb:138 (succs: 142 139)
 defs: [%701,%703]
  %701(int32). binop op:add(0) %64(int32) %74(int32) (flags:0)
  %702(int32). load src:%701(int32) align=1
  %703(int1). cmp2 op:icmp_ult(36) %657(int32) %702(int32)
  br %703(int1) ? 142 : 139
bb:139 (succs: 140 141)
 defs: [%704,%706]
  %704(int32). binop op:add(0) %657(int32) %74(int32) (flags:0)
  %705(int32). load src:%704(int32) align=1
  %706(int1). cmp2 op:icmp_eq(32) %705(int32) %644(int32)
  br %706(int1) ? 140 : 141
bb:140 (succs: 143)
  store dest:%704(int32) value:%685(int32) align=1
  br 143
bb:141 (succs: 143)
 defs: [%707,%707]
  %707(int32). binop op:add(0) %657(int32) %77(int32) (flags:0)
  store dest:%707(int32) value:%685(int32) align=1
  br 143
bb:142 (succs:)
  call %3(void()) args:
  unreachable
bb:143 (succs: 154 144)
 defs: [%708,%708]
  %708(int1). cmp2 op:icmp_eq(32) %685(int32) %71(int32)
  br %708(int1) ? 154 : 144
bb:144 (succs: 153 145)
 defs: [%709,%711]
  %709(int32). binop op:add(0) %64(int32) %74(int32) (flags:0)
  %710(int32). load src:%709(int32) align=1
  %711(int1). cmp2 op:icmp_ult(36) %685(int32) %710(int32)
  br %711(int1) ? 153 : 145
bb:145 (succs: 149 146)
 defs: [%712,%715]
  %712(int32). binop op:add(0) %685(int32) %78(int32) (flags:0)
  store dest:%712(int32) value:%657(int32) align=1
  %713(int32). binop op:add(0) %644(int32) %74(int32) (flags:0)
  %714(int32). load src:%713(int32) align=1
  %715(int1). cmp2 op:icmp_eq(32) %714(int32) %71(int32)
  br %715(int1) ? 149 : 146
bb:146 (succs: 148 147)
 defs: [%716,%716]
  %716(int1). cmp2 op:icmp_ult(36) %714(int32) %710(int32)
  br %716(int1) ? 148 : 147
bb:147 (succs: 149)
 defs: [%717,%718]
  %717(int32). binop op:add(0) %685(int32) %74(int32) (flags:0)
  store dest:%717(int32) value:%714(int32) align=1
  %718(int32). binop op:add(0) %714(int32) %78(int32) (flags:0)
  store dest:%718(int32) value:%685(int32) align=1
  br 149
bb:148 (succs:)
  call %3(void()) args:
  unreachable
bb:149 (succs: 154 150)
 defs: [%719,%721]
  %719(int32). binop op:add(0) %644(int32) %77(int32) (flags:0)
  %720(int32). load src:%719(int32) align=1
  %721(int1). cmp2 op:icmp_eq(32) %720(int32) %71(int32)
  br %721(int1) ? 154 : 150
bb:150 (succs: 152 151)
 defs: [%722,%724]
  %722(int32). binop op:add(0) %64(int32) %74(int32) (flags:0)
  %723(int32). load src:%722(int32) align=1
  %724(int1). cmp2 op:icmp_ult(36) %720(int32) %723(int32)
  br %724(int1) ? 152 : 151
bb:151 (succs: 154)
 defs: [%725,%726]
  %725(int32). binop op:add(0) %685(int32) %77(int32) (flags:0)
  store dest:%725(int32) value:%720(int32) align=1
  %726(int32). binop op:add(0) %720(int32) %78(int32) (flags:0)
  store dest:%726(int32) value:%685(int32) align=1
  br 154
bb:152 (succs:)
  call %3(void()) args:
  unreachable
bb:153 (succs:)
  call %3(void()) args:
  unreachable
bb:154 (succs: 155 156)
 defs: [%727,%727]
  %727(int1). cmp2 op:icmp_ult(36) %645(int32) %74(int32)
  br %727(int1) ? 155 : 156
bb:155 (succs: 180)
 defs: [%728,%734]
  %728(int32). binop op:add(0) %645(int32) %521(int32) (flags:0)
  %729(int32). binop op:or(11) %728(int32) %82(int32) (flags:0)
  %730(int32). binop op:add(0) %644(int32) %72(int32) (flags:0)
  store dest:%730(int32) value:%729(int32) align=1
  %731(int32). binop op:add(0) %728(int32) %72(int32) (flags:0)
  %732(int32). binop op:add(0) %644(int32) %731(int32) (flags:0)
  %733(int32). load src:%732(int32) align=1
  %734(int32). binop op:or(11) %733(int32) %73(int32) (flags:0)
  store dest:%732(int32) value:%734(int32) align=1
  br 180
bb:156 (succs: 157 162)
 defs: [%735,%743]
  %735(int32). binop op:or(11) %521(int32) %82(int32) (flags:0)
  %736(int32). binop op:add(0) %644(int32) %72(int32) (flags:0)
  store dest:%736(int32) value:%735(int32) align=1
  %737(int32). binop op:or(11) %645(int32) %73(int32) (flags:0)
  %738(int32). binop op:or(11) %521(int32) %72(int32) (flags:0)
  %739(int32). binop op:add(0) %644(int32) %738(int32) (flags:0)
  store dest:%739(int32) value:%737(int32) align=1
  %740(int32). binop op:add(0) %645(int32) %521(int32) (flags:0)
  %741(int32). binop op:add(0) %644(int32) %740(int32) (flags:0)
  store dest:%741(int32) value:%645(int32) align=1
  %742(int32). binop op:lshr(8) %645(int32) %82(int32) (flags:0)
  %743(int1). cmp2 op:icmp_ult(36) %645(int32) %101(int32)
  br %743(int1) ? 157 : 162
bb:157 (succs: 158 159)
 defs: [%744,%751]
  %744(int32). binop op:shl(7) %742(int32) %73(int32) (flags:0)
  %745(int32). binop op:add(0) %64(int32) %80(int32) (flags:0)
  %746(int32). binop op:mul(2) %744(int32) %72(int32) (flags:0)
  %747(int32). binop op:add(0) %745(int32) %746(int32) (flags:0)
  %748(int32). load src:%64(int32) align=1
  %749(int32). binop op:shl(7) %73(int32) %742(int32) (flags:0)
  %750(int32). binop op:and(10) %748(int32) %749(int32) (flags:0)
  %751(int1). cmp2 op:icmp_eq(32) %750(int32) %71(int32)
  br %751(int1) ? 158 : 159
bb:158 (succs: 161)
 defs: [%752,%756]
  %752(int32). binop op:or(11) %748(int32) %749(int32) (flags:0)
  store dest:%64(int32) value:%752(int32) align=1
  %753(int32). binop op:add(0) %744(int32) %79(int32) (flags:0)
  %754(int32). binop op:add(0) %64(int32) %80(int32) (flags:0)
  %755(int32). binop op:mul(2) %753(int32) %72(int32) (flags:0)
  %756(int32). binop op:add(0) %754(int32) %755(int32) (flags:0)
  br 161
bb:159 (succs: 160 161)
 defs: [%757,%764]
  %757(int32). binop op:add(0) %744(int32) %79(int32) (flags:0)
  %758(int32). binop op:add(0) %64(int32) %80(int32) (flags:0)
  %759(int32). binop op:mul(2) %757(int32) %72(int32) (flags:0)
  %760(int32). binop op:add(0) %758(int32) %759(int32) (flags:0)
  %761(int32). load src:%760(int32) align=1
  %762(int32). binop op:add(0) %64(int32) %74(int32) (flags:0)
  %763(int32). load src:%762(int32) align=1
  %764(int1). cmp2 op:icmp_ult(36) %761(int32) %763(int32)
  br %764(int1) ? 160 : 161
bb:160 (succs:)
  call %3(void()) args:
  unreachable
bb:161 (succs: 180)
 defs: [%765,%771]
  %765(int32). phi bb:159=>%760(int32) bb:158=>%756(int32)
  %766(int32). phi bb:159=>%761(int32) bb:158=>%747(int32)
  store dest:%765(int32) value:%654(int32) align=1
  %767(int32). binop op:add(0) %766(int32) %76(int32) (flags:0)
  store dest:%767(int32) value:%654(int32) align=1
  %768(int32). binop op:add(0) %521(int32) %75(int32) (flags:0)
  %769(int32). binop op:add(0) %644(int32) %768(int32) (flags:0)
  store dest:%769(int32) value:%766(int32) align=1
  %770(int32). binop op:add(0) %521(int32) %76(int32) (flags:0)
  %771(int32). binop op:add(0) %644(int32) %770(int32) (flags:0)
  store dest:%771(int32) value:%747(int32) align=1
  br 180
bb:162 (succs: 165 163)
 defs: [%772,%773]
  %772(int32). binop op:lshr(8) %645(int32) %75(int32) (flags:0)
  %773(int1). cmp2 op:icmp_eq(32) %772(int32) %71(int32)
  br %773(int1) ? 165 : 163
bb:163 (succs: 165 164)
 defs: [%774,%774]
  %774(int1). cmp2 op:icmp_ugt(34) %645(int32) %95(int32)
  br %774(int1) ? 165 : 164
bb:164 (succs: 165)
 defs: [%775,%796]
  %775(int32). binop op:add(0) %772(int32) %96(int32) (flags:0)
  %776(int32). binop op:lshr(8) %775(int32) %74(int32) (flags:0)
  %777(int32). binop op:and(10) %776(int32) %75(int32) (flags:0)
  %778(int32). binop op:shl(7) %772(int32) %777(int32) (flags:0)
  %779(int32). binop op:add(0) %778(int32) %97(int32) (flags:0)
  %780(int32). binop op:lshr(8) %779(int32) %74(int32) (flags:0)
  %781(int32). binop op:and(10) %780(int32) %72(int32) (flags:0)
  %782(int32). binop op:or(11) %781(int32) %777(int32) (flags:0)
  %783(int32). binop op:shl(7) %778(int32) %781(int32) (flags:0)
  %784(int32). binop op:add(0) %783(int32) %98(int32) (flags:0)
  %785(int32). binop op:lshr(8) %784(int32) %74(int32) (flags:0)
  %786(int32). binop op:and(10) %785(int32) %79(int32) (flags:0)
  %787(int32). binop op:or(11) %782(int32) %786(int32) (flags:0)
  %788(int32). binop op:sub(1) %99(int32) %787(int32) (flags:0)
  %789(int32). binop op:shl(7) %783(int32) %786(int32) (flags:0)
  %790(int32). binop op:lshr(8) %789(int32) %94(int32) (flags:0)
  %791(int32). binop op:add(0) %788(int32) %790(int32) (flags:0)
  %792(int32). binop op:shl(7) %791(int32) %73(int32) (flags:0)
  %793(int32). binop op:add(0) %791(int32) %81(int32) (flags:0)
  %794(int32). binop op:lshr(8) %645(int32) %793(int32) (flags:0)
  %795(int32). binop op:and(10) %794(int32) %73(int32) (flags:0)
  %796(int32). binop op:or(11) %795(int32) %792(int32) (flags:0)
  br 165
bb:165 (succs: 166 167)
 defs: [%797,%811]
  %797(int32). phi bb:164=>%796(int32) bb:162=>%71(int32) bb:163=>%86(int32)
  %798(int32). binop op:add(0) %64(int32) %88(int32) (flags:0)
  %799(int32). binop op:mul(2) %797(int32) %72(int32) (flags:0)
  %800(int32). binop op:add(0) %798(int32) %799(int32) (flags:0)
  %801(int32). binop op:add(0) %521(int32) %87(int32) (flags:0)
  %802(int32). binop op:add(0) %644(int32) %801(int32) (flags:0)
  store dest:%802(int32) value:%797(int32) align=1
  %803(int32). binop op:add(0) %521(int32) %74(int32) (flags:0)
  %804(int32). binop op:add(0) %644(int32) %803(int32) (flags:0)
  %805(int32). binop op:add(0) %521(int32) %77(int32) (flags:0)
  %806(int32). binop op:add(0) %644(int32) %805(int32) (flags:0)
  store dest:%806(int32) value:%71(int32) align=1
  store dest:%804(int32) value:%71(int32) align=1
  %807(int32). binop op:add(0) %64(int32) %72(int32) (flags:0)
  %808(int32). load src:%807(int32) align=1
  %809(int32). binop op:shl(7) %73(int32) %797(int32) (flags:0)
  %810(int32). binop op:and(10) %808(int32) %809(int32) (flags:0)
  %811(int1). cmp2 op:icmp_eq(32) %810(int32) %71(int32)
  br %811(int1) ? 166 : 167
bb:166 (succs: 180)
 defs: [%812,%819]
  %812(int32). binop op:or(11) %808(int32) %809(int32) (flags:0)
  %813(int32). binop op:add(0) %64(int32) %72(int32) (flags:0)
  store dest:%813(int32) value:%812(int32) align=1
  store dest:%800(int32) value:%654(int32) align=1
  %814(int32). binop op:add(0) %521(int32) %78(int32) (flags:0)
  %815(int32). binop op:add(0) %644(int32) %814(int32) (flags:0)
  store dest:%815(int32) value:%800(int32) align=1
  %816(int32). binop op:add(0) %521(int32) %76(int32) (flags:0)
  %817(int32). binop op:add(0) %644(int32) %816(int32) (flags:0)
  store dest:%817(int32) value:%654(int32) align=1
  %818(int32). binop op:add(0) %521(int32) %75(int32) (flags:0)
  %819(int32). binop op:add(0) %644(int32) %818(int32) (flags:0)
  store dest:%819(int32) value:%654(int32) align=1
  br 180
bb:167 (succs: 169 168)
 defs: [%820,%821]
  %820(int32). load src:%800(int32) align=1
  %821(int1). cmp2 op:icmp_eq(32) %797(int32) %86(int32)
  br %821(int1) ? 169 : 168
bb:168 (succs: 169)
 defs: [%822,%823]
  %822(int32). binop op:lshr(8) %797(int32) %73(int32) (flags:0)
  %823(int32). binop op:sub(1) %100(int32) %822(int32) (flags:0)
  br 169
bb:169 (succs: 176 170)
 defs: [%824,%828]
  %824(int32). phi bb:168=>%823(int32) bb:167=>%71(int32)
  %825(int32). binop op:add(0) %820(int32) %72(int32) (flags:0)
  %826(int32). load src:%825(int32) align=1
  %827(int32). binop op:and(10) %826(int32) %85(int32) (flags:0)
  %828(int1). cmp2 op:icmp_eq(32) %827(int32) %645(int32)
  br %828(int1) ? 176 : 170
bb:170 (succs: 172)
 defs: [%829,%829]
  %829(int32). binop op:shl(7) %645(int32) %824(int32) (flags:0)
  br 172
bb:171 (succs: 176 172)
 defs: [%830,%834]
  forwardtyperef %835(int32) int32
  %830(int32). binop op:shl(7) %835(int32) %73(int32) (flags:0)
  forwardtyperef %841(int32) int32
  %831(int32). binop op:add(0) %841(int32) %72(int32) (flags:0)
  %832(int32). load src:%831(int32) align=1
  %833(int32). binop op:and(10) %832(int32) %85(int32) (flags:0)
  %834(int1). cmp2 op:icmp_eq(32) %833(int32) %645(int32)
  br %834(int1) ? 176 : 172
bb:172 (succs: 173 171)
 defs: [%835,%842]
  %835(int32). phi bb:170=>%829(int32) bb:171=>%830(int32)
  %836(int32). phi bb:170=>%820(int32) bb:171=>%841(int32)
  %837(int32). binop op:lshr(8) %835(int32) %86(int32) (flags:0)
  %838(int32). binop op:add(0) %836(int32) %74(int32) (flags:0)
  %839(int32). binop op:mul(2) %837(int32) %72(int32) (flags:0)
  %840(int32). binop op:add(0) %838(int32) %839(int32) (flags:0)
  %841(int32). load src:%840(int32) align=1
  %842(int1). cmp2 op:icmp_eq(32) %841(int32) %71(int32)
  br %842(int1) ? 173 : 171
bb:173 (succs: 175 174)
 defs: [%843,%845]
  %843(int32). binop op:add(0) %64(int32) %74(int32) (flags:0)
  %844(int32). load src:%843(int32) align=1
  %845(int1). cmp2 op:icmp_ult(36) %840(int32) %844(int32)
  br %845(int1) ? 175 : 174
bb:174 (succs: 180)
 defs: [%846,%851]
  store dest:%840(int32) value:%654(int32) align=1
  %846(int32). binop op:add(0) %521(int32) %78(int32) (flags:0)
  %847(int32). binop op:add(0) %644(int32) %846(int32) (flags:0)
  store dest:%847(int32) value:%836(int32) align=1
  %848(int32). binop op:add(0) %521(int32) %76(int32) (flags:0)
  %849(int32). binop op:add(0) %644(int32) %848(int32) (flags:0)
  store dest:%849(int32) value:%654(int32) align=1
  %850(int32). binop op:add(0) %521(int32) %75(int32) (flags:0)
  %851(int32). binop op:add(0) %644(int32) %850(int32) (flags:0)
  store dest:%851(int32) value:%654(int32) align=1
  br 180
bb:175 (succs:)
  call %3(void()) args:
  unreachable
bb:176 (succs: 177 178)
 defs: [%852,%859]
  %852(int32). phi bb:169=>%820(int32) bb:171=>%841(int32)
  %853(int32). binop op:add(0) %852(int32) %75(int32) (flags:0)
  %854(int32). load src:%853(int32) align=1
  %855(int32). binop op:add(0) %64(int32) %74(int32) (flags:0)
  %856(int32). load src:%855(int32) align=1
  %857(int1). cmp2 op:icmp_uge(35) %852(int32) %856(int32)
  %858(int1). cmp2 op:icmp_uge(35) %854(int32) %856(int32)
  %859(int1). binop op:and(10) %857(int1) %858(int1) (flags:0)
  br %859(int1) ? 177 : 178
bb:177 (succs: 180)
 defs: [%860,%866]
  %860(int32). binop op:add(0) %854(int32) %76(int32) (flags:0)
  store dest:%860(int32) value:%654(int32) align=1
  store dest:%853(int32) value:%654(int32) align=1
  %861(int32). binop op:add(0) %521(int32) %75(int32) (flags:0)
  %862(int32). binop op:add(0) %644(int32) %861(int32) (flags:0)
  store dest:%862(int32) value:%854(int32) align=1
  %863(int32). binop op:add(0) %521(int32) %76(int32) (flags:0)
  %864(int32). binop op:add(0) %644(int32) %863(int32) (flags:0)
  store dest:%864(int32) value:%852(int32) align=1
  %865(int32). binop op:add(0) %521(int32) %78(int32) (flags:0)
  %866(int32). binop op:add(0) %644(int32) %865(int32) (flags:0)
  store dest:%866(int32) value:%71(int32) align=1
  br 180
bb:178 (succs:)
  call %3(void()) args:
  unreachable
bb:179 (succs:)
  call %3(void()) args:
  unreachable
bb:180 (succs: 362)
 defs: [%867,%867]
  %867(int32). binop op:add(0) %644(int32) %75(int32) (flags:0)
  br 362
bb:181 (succs: 186 182)
 defs: [%868,%871]
  %868(int32). phi bb:48=>%208(int32) bb:33=>%208(int32) bb:100=>%521(int32) bb:99=>%83(int32) bb:117=>%521(int32) bb:118=>%521(int32) bb:112=>%521(int32)
  %869(int32). binop op:add(0) %64(int32) %75(int32) (flags:0)
  %870(int32). load src:%869(int32) align=1
  %871(int1). cmp2 op:icmp_ult(36) %870(int32) %868(int32)
  br %871(int1) ? 186 : 182
bb:182 (succs: 183 184)
 defs: [%872,%875]
  %872(int32). binop op:sub(1) %870(int32) %868(int32) (flags:0)
  %873(int32). binop op:add(0) %64(int32) %77(int32) (flags:0)
  %874(int32). load src:%873(int32) align=1
  %875(int1). cmp2 op:icmp_ugt(34) %872(int32) %94(int32)
  br %875(int1) ? 183 : 184
bb:183 (succs: 185)
 defs: [%876,%884]
  %876(int32). binop op:add(0) %874(int32) %868(int32) (flags:0)
  %877(int32). binop op:add(0) %64(int32) %77(int32) (flags:0)
  store dest:%877(int32) value:%876(int32) align=1
  %878(int32). binop op:add(0) %64(int32) %75(int32) (flags:0)
  store dest:%878(int32) value:%872(int32) align=1
  %879(int32). binop op:or(11) %872(int32) %73(int32) (flags:0)
  %880(int32). binop op:add(0) %868(int32) %72(int32) (flags:0)
  %881(int32). binop op:add(0) %874(int32) %880(int32) (flags:0)
  store dest:%881(int32) value:%879(int32) align=1
  %882(int32). binop op:add(0) %874(int32) %870(int32) (flags:0)
  store dest:%882(int32) value:%872(int32) align=1
  %883(int32). binop op:or(11) %868(int32) %82(int32) (flags:0)
  %884(int32). binop op:add(0) %874(int32) %72(int32) (flags:0)
  store dest:%884(int32) value:%883(int32) align=1
  br 185
bb:184 (succs: 185)
 defs: [%885,%892]
  %885(int32). binop op:add(0) %64(int32) %75(int32) (flags:0)
  store dest:%885(int32) value:%71(int32) align=1
  %886(int32). binop op:add(0) %64(int32) %77(int32) (flags:0)
  store dest:%886(int32) value:%71(int32) align=1
  %887(int32). binop op:or(11) %870(int32) %82(int32) (flags:0)
  %888(int32). binop op:add(0) %874(int32) %72(int32) (flags:0)
  store dest:%888(int32) value:%887(int32) align=1
  %889(int32). binop op:add(0) %870(int32) %72(int32) (flags:0)
  %890(int32). binop op:add(0) %874(int32) %889(int32) (flags:0)
  %891(int32). load src:%890(int32) align=1
  %892(int32). binop op:or(11) %891(int32) %73(int32) (flags:0)
  store dest:%890(int32) value:%892(int32) align=1
  br 185
bb:185 (succs: 362)
 defs: [%893,%893]
  %893(int32). binop op:add(0) %874(int32) %75(int32) (flags:0)
  br 362
bb:186 (succs: 187 188)
 defs: [%894,%896]
  %894(int32). binop op:add(0) %64(int32) %76(int32) (flags:0)
  %895(int32). load src:%894(int32) align=1
  %896(int1). cmp2 op:icmp_ugt(34) %895(int32) %868(int32)
  br %896(int1) ? 187 : 188
bb:187 (succs: 362)
 defs: [%897,%908]
  %897(int32). binop op:sub(1) %895(int32) %868(int32) (flags:0)
  %898(int32). binop op:add(0) %64(int32) %76(int32) (flags:0)
  store dest:%898(int32) value:%897(int32) align=1
  %899(int32). binop op:add(0) %64(int32) %78(int32) (flags:0)
  %900(int32). load src:%899(int32) align=1
  %901(int32). binop op:add(0) %900(int32) %868(int32) (flags:0)
  %902(int32). binop op:add(0) %64(int32) %78(int32) (flags:0)
  store dest:%902(int32) value:%901(int32) align=1
  %903(int32). binop op:or(11) %897(int32) %73(int32) (flags:0)
  %904(int32). binop op:add(0) %868(int32) %72(int32) (flags:0)
  %905(int32). binop op:add(0) %900(int32) %904(int32) (flags:0)
  store dest:%905(int32) value:%903(int32) align=1
  %906(int32). binop op:or(11) %868(int32) %82(int32) (flags:0)
  %907(int32). binop op:add(0) %900(int32) %72(int32) (flags:0)
  store dest:%907(int32) value:%906(int32) align=1
  %908(int32). binop op:add(0) %900(int32) %75(int32) (flags:0)
  br 362
bb:188 (succs: 189 203)
 defs: [%909,%910]
  %909(int32). load src:%63(int32) align=1
  %910(int1). cmp2 op:icmp_eq(32) %909(int32) %71(int32)
  br %910(int1) ? 189 : 203
bb:189 (succs: 195 190)
 defs: [%911,%912]
  %911(int32). call %36(int32(int32,int32,int32,int32))(llvm.nacl.atomic.rmw.i32) args: %84(int32) %65(int32) %73(int32) %84(int32)
  %912(int1). cmp2 op:icmp_eq(32) %911(int32) %71(int32)
  br %912(int1) ? 195 : 190
bb:190 (succs: 191 192)
 defs: [%913,%915]
  forwardtyperef %918(int32) int32
  %913(int32). phi bb:189=>%71(int32) bb:192=>%918(int32) bb:193=>%918(int32) bb:194=>%918(int32)
  %914(int32). call %37(int32(int32,int32))(llvm.nacl.atomic.load.i32) args: %65(int32) %84(int32)
  %915(int1). cmp2 op:icmp_eq(32) %914(int32) %71(int32)
  br %915(int1) ? 191 : 192
bb:191 (succs: 195 192)
 defs: [%916,%917]
  %916(int32). call %36(int32(int32,int32,int32,int32))(llvm.nacl.atomic.rmw.i32) args: %84(int32) %65(int32) %73(int32) %84(int32)
  %917(int1). cmp2 op:icmp_eq(32) %916(int32) %71(int32)
  br %917(int1) ? 195 : 192
bb:192 (succs: 193 190)
 defs: [%918,%920]
  %918(int32). binop op:add(0) %913(int32) %73(int32) (flags:0)
  %919(int32). binop op:and(10) %918(int32) %103(int32) (flags:0)
  %920(int1). cmp2 op:icmp_eq(32) %919(int32) %71(int32)
  br %920(int1) ? 193 : 190
bb:193 (succs: 190 194)
 defs: [%921,%924]
  %921(int32). binop op:add(0) %46(int32) %74(int32) (flags:0)
  %922(int32). load src:%921(int32) align=1
  %923(int32). call indirect %922(int32) args:
  %924(int1). cmp2 op:icmp_eq(32) %923(int32) %71(int32)
  br %924(int1) ? 190 : 194
bb:194 (succs: 190)
 defs: [%925,%927]
  %925(int32). call %33(int32())(llvm.nacl.read.tp) args:
  %926(int32). binop op:add(0) %925(int32) %89(int32) (flags:0)
  %927(int32). load src:%926(int32) align=1
  store dest:%927(int32) value:%923(int32) align=1
  br 190
bb:195 (succs: 196 202)
 defs: [%928,%929]
  %928(int32). load src:%63(int32) align=1
  %929(int1). cmp2 op:icmp_eq(32) %928(int32) %71(int32)
  br %929(int1) ? 196 : 202
bb:196 (succs: 198 197)
 defs: [%930,%933]
  %930(int32). binop op:add(0) %46(int32) %77(int32) (flags:0)
  %931(int32). load src:%930(int32) align=1
  %932(int32). call indirect %931(int32) args: %79(int32) %134(int32)
  %933(int1). cmp2 op:icmp_eq(32) %932(int32) %71(int32)
  br %933(int1) ? 198 : 197
bb:197 (succs: 199)
 defs: [%934,%936]
  %934(int32). call %33(int32())(llvm.nacl.read.tp) args:
  %935(int32). binop op:add(0) %934(int32) %89(int32) (flags:0)
  %936(int32). load src:%935(int32) align=1
  store dest:%936(int32) value:%932(int32) align=1
  br 199
bb:198 (succs: 199)
 defs: [%937,%937]
  %937(int32). load src:%134(int32) align=1
  br 199
bb:199 (succs: 201 200)
 defs: [%938,%941]
  %938(int32). phi bb:197=>%83(int32) bb:198=>%937(int32)
  %939(int32). binop op:add(0) %938(int32) %83(int32) (flags:0)
  %940(int32). binop op:and(10) %939(int32) %938(int32) (flags:0)
  %941(int1). cmp2 op:icmp_eq(32) %940(int32) %71(int32)
  br %941(int1) ? 201 : 200
bb:200 (succs:)
  call %3(void()) args:
  unreachable
bb:201 (succs: 202)
 defs: [%942,%950]
  %942(int32). binop op:add(0) %63(int32) %75(int32) (flags:0)
  store dest:%942(int32) value:%108(int32) align=1
  %943(int32). binop op:add(0) %63(int32) %72(int32) (flags:0)
  store dest:%943(int32) value:%938(int32) align=1
  %944(int32). binop op:add(0) %63(int32) %76(int32) (flags:0)
  store dest:%944(int32) value:%109(int32) align=1
  %945(int32). binop op:add(0) %63(int32) %74(int32) (flags:0)
  store dest:%945(int32) value:%110(int32) align=1
  %946(int32). binop op:add(0) %63(int32) %77(int32) (flags:0)
  store dest:%946(int32) value:%81(int32) align=1
  %947(int32). binop op:add(0) %64(int32) %93(int32) (flags:0)
  store dest:%947(int32) value:%81(int32) align=1
  %948(int32). binop op:add(0) %64(int32) %91(int32) (flags:0)
  store dest:%948(int32) value:%71(int32) align=1
  %949(int32). binop op:and(10) %136(int32) %104(int32) (flags:0)
  %950(int32). binop op:xor(12) %949(int32) %111(int32) (flags:0)
  store dest:%136(int32) value:%950(int32) align=1
  call %38(void(int32,int32,int32))(llvm.nacl.atomic.store.i32) args: %950(int32) %63(int32) %84(int32)
  br 202
bb:202 (succs: 203)
 defs: [%951,%952]
  call %38(void(int32,int32,int32))(llvm.nacl.atomic.store.i32) args: %71(int32) %65(int32) %72(int32)
  %951(int32). binop op:add(0) %64(int32) %76(int32) (flags:0)
  %952(int32). load src:%951(int32) align=1
  br 203
bb:203 (succs: 217 204)
 defs: [%953,%963]
  %953(int32). phi bb:202=>%952(int32) bb:188=>%895(int32)
  %954(int32). binop op:add(0) %64(int32) %93(int32) (flags:0)
  %955(int32). load src:%954(int32) align=1
  %956(int32). binop op:and(10) %955(int32) %73(int32) (flags:0)
  %957(int1). cmp2 op:icmp_eq(32) %956(int32) %71(int32)
  %958(int32). binop op:add(0) %63(int32) %76(int32) (flags:0)
  %959(int32). load src:%958(int32) align=1
  %960(int1). cmp2 op:icmp_ugt(34) %959(int32) %868(int32)
  %961(int1). binop op:or(11) %957(int1) %960(int1) (flags:0)
  %962(int1). cmp2 op:icmp_eq(32) %953(int32) %71(int32)
  %963(int1). binop op:or(11) %961(int1) %962(int1) (flags:0)
  br %963(int1) ? 217 : 204
bb:204 (succs: 206 205)
 defs: [%964,%972]
  %964(int32). binop op:add(0) %63(int32) %72(int32) (flags:0)
  %965(int32). load src:%964(int32) align=1
  %966(int32). binop op:add(0) %868(int32) %121(int32) (flags:0)
  %967(int32). binop op:add(0) %966(int32) %965(int32) (flags:0)
  %968(int32). binop op:sub(1) %71(int32) %965(int32) (flags:0)
  %969(int32). binop op:and(10) %967(int32) %968(int32) (flags:0)
  %970(int32). binop op:add(0) %64(int32) %112(int32) (flags:0)
  %971(int32). load src:%970(int32) align=1
  %972(int1). cmp2 op:icmp_eq(32) %971(int32) %71(int32)
  br %972(int1) ? 206 : 205
bb:205 (succs: 207 217)
 defs: [%973,%980]
  %973(int32). binop op:add(0) %64(int32) %92(int32) (flags:0)
  %974(int32). load src:%973(int32) align=1
  %975(int32). binop op:add(0) %974(int32) %969(int32) (flags:0)
  %976(int1). cmp2 op:icmp_ugt(34) %975(int32) %974(int32)
  %977(int1). cmp2 op:icmp_ule(37) %975(int32) %971(int32)
  %978(int1). binop op:and(10) %977(int1) %976(int1) (flags:0)
  %979(int1). cmp2 op:icmp_ugt(34) %969(int32) %868(int32)
  %980(int1). binop op:and(10) %979(int1) %978(int1) (flags:0)
  br %980(int1) ? 207 : 217
bb:206 (succs: 207 217)
 defs: [%981,%981]
  %981(int1). cmp2 op:icmp_ugt(34) %969(int32) %868(int32)
  br %981(int1) ? 207 : 217
bb:207 (succs: 209 208)
 defs: [%982,%984]
  store dest:%133(int32) value:%71(int32) align=1
  %982(int32). load src:%47(int32) align=1
  %983(int32). call indirect %982(int32) args: %133(int32) %969(int32) %82(int32) %113(int32) %83(int32) %131(int64)
  %984(int1). cmp2 op:icmp_eq(32) %983(int32) %71(int32)
  br %984(int1) ? 209 : 208
bb:208 (succs: 217)
 defs: [%985,%987]
  %985(int32). call %33(int32())(llvm.nacl.read.tp) args:
  %986(int32). binop op:add(0) %985(int32) %89(int32) (flags:0)
  %987(int32). load src:%986(int32) align=1
  store dest:%987(int32) value:%983(int32) align=1
  br 217
bb:209 (succs: 217 210)
 defs: [%988,%989]
  %988(int32). load src:%133(int32) align=1
  %989(int1). cmp2 op:icmp_eq(32) %988(int32) %83(int32)
  br %989(int1) ? 217 : 210
bb:210 (succs: 212 211)
 defs: [%990,%992]
  %990(int32). binop op:add(0) %988(int32) %75(int32) (flags:0)
  %991(int32). binop op:and(10) %990(int32) %81(int32) (flags:0)
  %992(int1). cmp2 op:icmp_eq(32) %991(int32) %71(int32)
  br %992(int1) ? 212 : 211
bb:211 (succs: 212)
 defs: [%993,%994]
  %993(int32). binop op:sub(1) %71(int32) %990(int32) (flags:0)
  %994(int32). binop op:and(10) %993(int32) %81(int32) (flags:0)
  br 212
bb:212 (succs: 213 214)
 defs: [%995,%1009]
  %995(int32). phi bb:211=>%994(int32) bb:210=>%71(int32)
  %996(int32). binop op:add(0) %969(int32) %104(int32) (flags:0)
  %997(int32). binop op:sub(1) %996(int32) %995(int32) (flags:0)
  %998(int32). binop op:add(0) %988(int32) %995(int32) (flags:0)
  store dest:%998(int32) value:%995(int32) align=1
  %999(int32). binop op:add(0) %995(int32) %72(int32) (flags:0)
  %1000(int32). binop op:add(0) %988(int32) %999(int32) (flags:0)
  store dest:%1000(int32) value:%997(int32) align=1
  %1001(int32). binop op:add(0) %969(int32) %122(int32) (flags:0)
  %1002(int32). binop op:add(0) %988(int32) %1001(int32) (flags:0)
  store dest:%1002(int32) value:%81(int32) align=1
  %1003(int32). binop op:add(0) %969(int32) %85(int32) (flags:0)
  %1004(int32). binop op:add(0) %988(int32) %1003(int32) (flags:0)
  store dest:%1004(int32) value:%71(int32) align=1
  %1005(int32). binop op:add(0) %64(int32) %74(int32) (flags:0)
  %1006(int32). load src:%1005(int32) align=1
  %1007(int1). cmp2 op:icmp_eq(32) %1006(int32) %71(int32)
  %1008(int1). cmp2 op:icmp_ult(36) %988(int32) %1006(int32)
  %1009(int1). binop op:or(11) %1007(int1) %1008(int1) (flags:0)
  br %1009(int1) ? 213 : 214
bb:213 (succs: 214)
 defs: [%1010,%1010]
  %1010(int32). binop op:add(0) %64(int32) %74(int32) (flags:0)
  store dest:%1010(int32) value:%988(int32) align=1
  br 214
bb:214 (succs: 215 216)
 defs: [%1011,%1017]
  %1011(int32). binop op:add(0) %64(int32) %92(int32) (flags:0)
  %1012(int32). load src:%1011(int32) align=1
  %1013(int32). binop op:add(0) %1012(int32) %969(int32) (flags:0)
  %1014(int32). binop op:add(0) %64(int32) %92(int32) (flags:0)
  store dest:%1014(int32) value:%1013(int32) align=1
  %1015(int32). binop op:add(0) %64(int32) %102(int32) (flags:0)
  %1016(int32). load src:%1015(int32) align=1
  %1017(int1). cmp2 op:icmp_ugt(34) %1013(int32) %1016(int32)
  br %1017(int1) ? 215 : 216
bb:215 (succs: 216)
 defs: [%1018,%1018]
  %1018(int32). binop op:add(0) %64(int32) %102(int32) (flags:0)
  store dest:%1018(int32) value:%1013(int32) align=1
  br 216
bb:216 (succs: 362)
 defs: [%1019,%1020]
  %1019(int32). binop op:or(11) %995(int32) %75(int32) (flags:0)
  %1020(int32). binop op:add(0) %988(int32) %1019(int32) (flags:0)
  br 362
bb:217 (succs: 218 362)
 defs: [%1021,%1027]
  %1021(int32). binop op:add(0) %63(int32) %75(int32) (flags:0)
  %1022(int32). load src:%1021(int32) align=1
  %1023(int32). binop op:add(0) %868(int32) %123(int32) (flags:0)
  %1024(int32). binop op:add(0) %1023(int32) %1022(int32) (flags:0)
  %1025(int32). binop op:sub(1) %71(int32) %1022(int32) (flags:0)
  %1026(int32). binop op:and(10) %1024(int32) %1025(int32) (flags:0)
  %1027(int1). cmp2 op:icmp_ugt(34) %1026(int32) %868(int32)
  br %1027(int1) ? 218 : 362
bb:218 (succs: 220 219)
 defs: [%1028,%1030]
  %1028(int32). binop op:add(0) %64(int32) %112(int32) (flags:0)
  %1029(int32). load src:%1028(int32) align=1
  %1030(int1). cmp2 op:icmp_eq(32) %1029(int32) %71(int32)
  br %1030(int1) ? 220 : 219
bb:219 (succs: 362 220)
 defs: [%1031,%1036]
  %1031(int32). binop op:add(0) %64(int32) %92(int32) (flags:0)
  %1032(int32). load src:%1031(int32) align=1
  %1033(int32). binop op:add(0) %1032(int32) %1026(int32) (flags:0)
  %1034(int1). cmp2 op:icmp_ule(37) %1033(int32) %1032(int32)
  %1035(int1). cmp2 op:icmp_ugt(34) %1033(int32) %1029(int32)
  %1036(int1). binop op:or(11) %1034(int1) %1035(int1) (flags:0)
  br %1036(int1) ? 362 : 220
bb:220 (succs: 222 221)
 defs: [%1037,%1039]
  store dest:%132(int32) value:%71(int32) align=1
  %1037(int32). load src:%47(int32) align=1
  %1038(int32). call indirect %1037(int32) args: %132(int32) %1026(int32) %82(int32) %113(int32) %83(int32) %131(int64)
  %1039(int1). cmp2 op:icmp_eq(32) %1038(int32) %71(int32)
  br %1039(int1) ? 222 : 221
bb:221 (succs: 361)
 defs: [%1040,%1042]
  %1040(int32). call %33(int32())(llvm.nacl.read.tp) args:
  %1041(int32). binop op:add(0) %1040(int32) %89(int32) (flags:0)
  %1042(int32). load src:%1041(int32) align=1
  store dest:%1042(int32) value:%1038(int32) align=1
  br 361
bb:222 (succs: 361 223)
 defs: [%1043,%1047]
  %1043(int32). load src:%132(int32) align=1
  %1044(int1). cmp2 op:icmp_eq(32) %1043(int32) %83(int32)
  %1045(int32). cast op:zext(1) %1044(int1)
  %1046(int32). binop op:xor(12) %1045(int32) %73(int32) (flags:0)
  %1047(int32). vselect %1044(int1) ? %71(int32) : %1026(int32)
  br %1044(int1) ? 361 : 223
bb:223 (succs: 224 225)
 defs: [%1048,%1054]
  %1048(int32). binop op:add(0) %64(int32) %92(int32) (flags:0)
  %1049(int32). load src:%1048(int32) align=1
  %1050(int32). binop op:add(0) %1049(int32) %1047(int32) (flags:0)
  %1051(int32). binop op:add(0) %64(int32) %92(int32) (flags:0)
  store dest:%1051(int32) value:%1050(int32) align=1
  %1052(int32). binop op:add(0) %64(int32) %102(int32) (flags:0)
  %1053(int32). load src:%1052(int32) align=1
  %1054(int1). cmp2 op:icmp_ugt(34) %1050(int32) %1053(int32)
  br %1054(int1) ? 224 : 225
bb:224 (succs: 225)
 defs: [%1055,%1055]
  %1055(int32). binop op:add(0) %64(int32) %102(int32) (flags:0)
  store dest:%1055(int32) value:%1050(int32) align=1
  br 225
bb:225 (succs: 226 233)
 defs: [%1056,%1059]
  %1056(int32). binop op:add(0) %64(int32) %78(int32) (flags:0)
  %1057(int32). load src:%1056(int32) align=1
  %1058(int1). cmp2 op:icmp_eq(32) %1057(int32) %71(int32)
  %1059(int32). binop op:add(0) %64(int32) %90(int32) (flags:0)
  br %1058(int1) ? 226 : 233
bb:226 (succs: 227 228)
 defs: [%1060,%1064]
  %1060(int32). binop op:add(0) %64(int32) %74(int32) (flags:0)
  %1061(int32). load src:%1060(int32) align=1
  %1062(int1). cmp2 op:icmp_eq(32) %1061(int32) %71(int32)
  %1063(int1). cmp2 op:icmp_ult(36) %1043(int32) %1061(int32)
  %1064(int1). binop op:or(11) %1062(int1) %1063(int1) (flags:0)
  br %1064(int1) ? 227 : 228
bb:227 (succs: 228)
 defs: [%1065,%1065]
  %1065(int32). binop op:add(0) %64(int32) %74(int32) (flags:0)
  store dest:%1065(int32) value:%1043(int32) align=1
  br 228
bb:228 (succs: 229)
 defs: [%1066,%1071]
  %1066(int32). binop op:add(0) %64(int32) %90(int32) (flags:0)
  store dest:%1066(int32) value:%1043(int32) align=1
  %1067(int32). binop op:add(0) %64(int32) %114(int32) (flags:0)
  store dest:%1067(int32) value:%1047(int32) align=1
  %1068(int32). binop op:add(0) %64(int32) %115(int32) (flags:0)
  store dest:%1068(int32) value:%1046(int32) align=1
  %1069(int32). load src:%63(int32) align=1
  %1070(int32). binop op:add(0) %64(int32) %124(int32) (flags:0)
  store dest:%1070(int32) value:%1069(int32) align=1
  %1071(int32). binop op:add(0) %64(int32) %107(int32) (flags:0)
  store dest:%1071(int32) value:%125(int32) align=1
  br 229
bb:229 (succs: 230 229)
 defs: [%1072,%1086]
  forwardtyperef %1085(int32) int32
  %1072(int32). phi bb:228=>%71(int32) bb:229=>%1085(int32)
  %1073(int32). binop op:shl(7) %1072(int32) %73(int32) (flags:0)
  %1074(int32). binop op:add(0) %64(int32) %80(int32) (flags:0)
  %1075(int32). binop op:mul(2) %1073(int32) %72(int32) (flags:0)
  %1076(int32). binop op:add(0) %1074(int32) %1075(int32) (flags:0)
  %1077(int32). binop op:add(0) %1073(int32) %82(int32) (flags:0)
  %1078(int32). binop op:add(0) %64(int32) %80(int32) (flags:0)
  %1079(int32). binop op:mul(2) %1077(int32) %72(int32) (flags:0)
  %1080(int32). binop op:add(0) %1078(int32) %1079(int32) (flags:0)
  store dest:%1080(int32) value:%1076(int32) align=1
  %1081(int32). binop op:add(0) %1073(int32) %79(int32) (flags:0)
  %1082(int32). binop op:add(0) %64(int32) %80(int32) (flags:0)
  %1083(int32). binop op:mul(2) %1081(int32) %72(int32) (flags:0)
  %1084(int32). binop op:add(0) %1082(int32) %1083(int32) (flags:0)
  store dest:%1084(int32) value:%1076(int32) align=1
  %1085(int32). binop op:add(0) %1072(int32) %73(int32) (flags:0)
  %1086(int1). cmp2 op:icmp_eq(32) %1085(int32) %107(int32)
  br %1086(int1) ? 230 : 229
bb:230 (succs: 232 231)
 defs: [%1087,%1090]
  %1087(int32). binop op:add(0) %1047(int32) %116(int32) (flags:0)
  %1088(int32). binop op:add(0) %1043(int32) %75(int32) (flags:0)
  %1089(int32). binop op:and(10) %1088(int32) %81(int32) (flags:0)
  %1090(int1). cmp2 op:icmp_eq(32) %1089(int32) %71(int32)
  br %1090(int1) ? 232 : 231
bb:231 (succs: 232)
 defs: [%1091,%1092]
  %1091(int32). binop op:sub(1) %71(int32) %1088(int32) (flags:0)
  %1092(int32). binop op:and(10) %1091(int32) %81(int32) (flags:0)
  br 232
bb:232 (succs: 359)
 defs: [%1093,%1105]
  %1093(int32). phi bb:231=>%1092(int32) bb:230=>%71(int32)
  %1094(int32). binop op:add(0) %1043(int32) %1093(int32) (flags:0)
  %1095(int32). binop op:sub(1) %1087(int32) %1093(int32) (flags:0)
  %1096(int32). binop op:add(0) %64(int32) %78(int32) (flags:0)
  store dest:%1096(int32) value:%1094(int32) align=1
  %1097(int32). binop op:add(0) %64(int32) %76(int32) (flags:0)
  store dest:%1097(int32) value:%1095(int32) align=1
  %1098(int32). binop op:or(11) %1095(int32) %73(int32) (flags:0)
  %1099(int32). binop op:add(0) %1093(int32) %72(int32) (flags:0)
  %1100(int32). binop op:add(0) %1043(int32) %1099(int32) (flags:0)
  store dest:%1100(int32) value:%1098(int32) align=1
  %1101(int32). binop op:add(0) %1047(int32) %117(int32) (flags:0)
  %1102(int32). binop op:add(0) %1043(int32) %1101(int32) (flags:0)
  store dest:%1102(int32) value:%80(int32) align=1
  %1103(int32). binop op:add(0) %63(int32) %74(int32) (flags:0)
  %1104(int32). load src:%1103(int32) align=1
  %1105(int32). binop op:add(0) %64(int32) %87(int32) (flags:0)
  store dest:%1105(int32) value:%1104(int32) align=1
  br 359
bb:233 (succs: 235 234)
 defs: [%1106,%1111]
  forwardtyperef %1113(int32) int32
  %1106(int32). phi bb:234=>%1113(int32) bb:225=>%1059(int32)
  %1107(int32). load src:%1106(int32) align=1
  %1108(int32). binop op:add(0) %1106(int32) %72(int32) (flags:0)
  %1109(int32). load src:%1108(int32) align=1
  %1110(int32). binop op:add(0) %1107(int32) %1109(int32) (flags:0)
  %1111(int1). cmp2 op:icmp_eq(32) %1043(int32) %1110(int32)
  br %1111(int1) ? 235 : 234
bb:234 (succs: 240 233)
 defs: [%1112,%1114]
  %1112(int32). binop op:add(0) %1106(int32) %75(int32) (flags:0)
  %1113(int32). load src:%1112(int32) align=1
  %1114(int1). cmp2 op:icmp_eq(32) %1113(int32) %71(int32)
  br %1114(int1) ? 240 : 233
bb:235 (succs: 236 240)
 defs: [%1115,%1121]
  %1115(int32). binop op:add(0) %1106(int32) %76(int32) (flags:0)
  %1116(int32). load src:%1115(int32) align=1
  %1117(int32). binop op:and(10) %1116(int32) %75(int32) (flags:0)
  %1118(int1). cmp2 op:icmp_eq(32) %1117(int32) %71(int32)
  %1119(int32). binop op:and(10) %1116(int32) %73(int32) (flags:0)
  %1120(int1). cmp2 op:icmp_eq(32) %1119(int32) %1046(int32)
  %1121(int1). binop op:and(10) %1118(int1) %1120(int1) (flags:0)
  br %1121(int1) ? 236 : 240
bb:236 (succs: 237 240)
 defs: [%1122,%1124]
  %1122(int1). cmp2 op:icmp_uge(35) %1057(int32) %1107(int32)
  %1123(int1). cmp2 op:icmp_ult(36) %1057(int32) %1043(int32)
  %1124(int1). binop op:and(10) %1123(int1) %1122(int1) (flags:0)
  br %1124(int1) ? 237 : 240
bb:237 (succs: 239 238)
 defs: [%1125,%1131]
  %1125(int32). binop op:add(0) %1109(int32) %1047(int32) (flags:0)
  store dest:%1108(int32) value:%1125(int32) align=1
  %1126(int32). binop op:add(0) %64(int32) %76(int32) (flags:0)
  %1127(int32). load src:%1126(int32) align=1
  %1128(int32). binop op:add(0) %1127(int32) %1047(int32) (flags:0)
  %1129(int32). binop op:add(0) %1057(int32) %75(int32) (flags:0)
  %1130(int32). binop op:and(10) %1129(int32) %81(int32) (flags:0)
  %1131(int1). cmp2 op:icmp_eq(32) %1130(int32) %71(int32)
  br %1131(int1) ? 239 : 238
bb:238 (succs: 239)
 defs: [%1132,%1133]
  %1132(int32). binop op:sub(1) %71(int32) %1129(int32) (flags:0)
  %1133(int32). binop op:and(10) %1132(int32) %81(int32) (flags:0)
  br 239
bb:239 (succs: 359)
 defs: [%1134,%1146]
  %1134(int32). phi bb:238=>%1133(int32) bb:237=>%71(int32)
  %1135(int32). binop op:add(0) %1057(int32) %1134(int32) (flags:0)
  %1136(int32). binop op:sub(1) %1128(int32) %1134(int32) (flags:0)
  %1137(int32). binop op:add(0) %64(int32) %78(int32) (flags:0)
  store dest:%1137(int32) value:%1135(int32) align=1
  %1138(int32). binop op:add(0) %64(int32) %76(int32) (flags:0)
  store dest:%1138(int32) value:%1136(int32) align=1
  %1139(int32). binop op:or(11) %1136(int32) %73(int32) (flags:0)
  %1140(int32). binop op:add(0) %1134(int32) %72(int32) (flags:0)
  %1141(int32). binop op:add(0) %1057(int32) %1140(int32) (flags:0)
  store dest:%1141(int32) value:%1139(int32) align=1
  %1142(int32). binop op:add(0) %1128(int32) %72(int32) (flags:0)
  %1143(int32). binop op:add(0) %1057(int32) %1142(int32) (flags:0)
  store dest:%1143(int32) value:%80(int32) align=1
  %1144(int32). binop op:add(0) %63(int32) %74(int32) (flags:0)
  %1145(int32). load src:%1144(int32) align=1
  %1146(int32). binop op:add(0) %64(int32) %87(int32) (flags:0)
  store dest:%1146(int32) value:%1145(int32) align=1
  br 359
bb:240 (succs: 241 242)
 defs: [%1147,%1149]
  %1147(int32). binop op:add(0) %64(int32) %74(int32) (flags:0)
  %1148(int32). load src:%1147(int32) align=1
  %1149(int1). cmp2 op:icmp_ult(36) %1043(int32) %1148(int32)
  br %1149(int1) ? 241 : 242
bb:241 (succs: 242)
 defs: [%1150,%1150]
  %1150(int32). binop op:add(0) %64(int32) %74(int32) (flags:0)
  store dest:%1150(int32) value:%1043(int32) align=1
  br 242
bb:242 (succs: 243)
 defs: [%1151,%1153]
  %1151(int32). phi bb:241=>%1043(int32) bb:240=>%1148(int32)
  %1152(int32). binop op:add(0) %1043(int32) %1047(int32) (flags:0)
  %1153(int32). binop op:add(0) %64(int32) %90(int32) (flags:0)
  br 243
bb:243 (succs: 245 244)
 defs: [%1154,%1156]
  forwardtyperef %1158(int32) int32
  %1154(int32). phi bb:242=>%1153(int32) bb:244=>%1158(int32)
  %1155(int32). load src:%1154(int32) align=1
  %1156(int1). cmp2 op:icmp_eq(32) %1155(int32) %1152(int32)
  br %1156(int1) ? 245 : 244
bb:244 (succs: 326 243)
 defs: [%1157,%1160]
  %1157(int32). binop op:add(0) %1154(int32) %75(int32) (flags:0)
  %1158(int32). load src:%1157(int32) align=1
  %1159(int1). cmp2 op:icmp_eq(32) %1158(int32) %71(int32)
  %1160(int32). binop op:add(0) %64(int32) %90(int32) (flags:0)
  br %1159(int1) ? 326 : 243
bb:245 (succs: 246 326)
 defs: [%1161,%1168]
  %1161(int32). binop op:add(0) %1154(int32) %76(int32) (flags:0)
  %1162(int32). load src:%1161(int32) align=1
  %1163(int32). binop op:and(10) %1162(int32) %75(int32) (flags:0)
  %1164(int1). cmp2 op:icmp_eq(32) %1163(int32) %71(int32)
  %1165(int32). binop op:and(10) %1162(int32) %73(int32) (flags:0)
  %1166(int1). cmp2 op:icmp_eq(32) %1165(int32) %1046(int32)
  %1167(int1). binop op:and(10) %1164(int1) %1166(int1) (flags:0)
  %1168(int32). binop op:add(0) %64(int32) %90(int32) (flags:0)
  br %1167(int1) ? 246 : 326
bb:246 (succs: 248 247)
 defs: [%1169,%1174]
  store dest:%1154(int32) value:%1043(int32) align=1
  %1169(int32). binop op:add(0) %1154(int32) %72(int32) (flags:0)
  %1170(int32). load src:%1169(int32) align=1
  %1171(int32). binop op:add(0) %1170(int32) %1047(int32) (flags:0)
  store dest:%1169(int32) value:%1171(int32) align=1
  %1172(int32). binop op:add(0) %1043(int32) %75(int32) (flags:0)
  %1173(int32). binop op:and(10) %1172(int32) %81(int32) (flags:0)
  %1174(int1). cmp2 op:icmp_eq(32) %1173(int32) %71(int32)
  br %1174(int1) ? 248 : 247
bb:247 (succs: 248)
 defs: [%1175,%1176]
  %1175(int32). binop op:sub(1) %71(int32) %1172(int32) (flags:0)
  %1176(int32). binop op:and(10) %1175(int32) %81(int32) (flags:0)
  br 248
bb:248 (succs: 250 249)
 defs: [%1177,%1182]
  %1177(int32). phi bb:247=>%1176(int32) bb:246=>%71(int32)
  %1178(int32). binop op:add(0) %1043(int32) %1177(int32) (flags:0)
  %1179(int32). binop op:add(0) %1047(int32) %75(int32) (flags:0)
  %1180(int32). binop op:add(0) %1043(int32) %1179(int32) (flags:0)
  %1181(int32). binop op:and(10) %1180(int32) %81(int32) (flags:0)
  %1182(int1). cmp2 op:icmp_eq(32) %1181(int32) %71(int32)
  br %1182(int1) ? 250 : 249
bb:249 (succs: 250)
 defs: [%1183,%1184]
  %1183(int32). binop op:sub(1) %71(int32) %1180(int32) (flags:0)
  %1184(int32). binop op:and(10) %1183(int32) %81(int32) (flags:0)
  br 250
bb:250 (succs: 251 252)
 defs: [%1185,%1195]
  %1185(int32). phi bb:249=>%1184(int32) bb:248=>%71(int32)
  %1186(int32). binop op:add(0) %1185(int32) %1047(int32) (flags:0)
  %1187(int32). binop op:add(0) %1043(int32) %1186(int32) (flags:0)
  %1188(int32). binop op:sub(1) %1187(int32) %1178(int32) (flags:0)
  %1189(int32). binop op:add(0) %1177(int32) %868(int32) (flags:0)
  %1190(int32). binop op:add(0) %1043(int32) %1189(int32) (flags:0)
  %1191(int32). binop op:sub(1) %1188(int32) %868(int32) (flags:0)
  %1192(int32). binop op:or(11) %868(int32) %82(int32) (flags:0)
  %1193(int32). binop op:add(0) %1177(int32) %72(int32) (flags:0)
  %1194(int32). binop op:add(0) %1043(int32) %1193(int32) (flags:0)
  store dest:%1194(int32) value:%1192(int32) align=1
  %1195(int1). cmp2 op:icmp_eq(32) %1187(int32) %1057(int32)
  br %1195(int1) ? 251 : 252
bb:251 (succs: 325)
 defs: [%1196,%1203]
  %1196(int32). binop op:add(0) %64(int32) %76(int32) (flags:0)
  %1197(int32). load src:%1196(int32) align=1
  %1198(int32). binop op:add(0) %1197(int32) %1191(int32) (flags:0)
  %1199(int32). binop op:add(0) %64(int32) %76(int32) (flags:0)
  store dest:%1199(int32) value:%1198(int32) align=1
  %1200(int32). binop op:add(0) %64(int32) %78(int32) (flags:0)
  store dest:%1200(int32) value:%1190(int32) align=1
  %1201(int32). binop op:or(11) %1198(int32) %73(int32) (flags:0)
  %1202(int32). binop op:add(0) %1189(int32) %72(int32) (flags:0)
  %1203(int32). binop op:add(0) %1043(int32) %1202(int32) (flags:0)
  store dest:%1203(int32) value:%1201(int32) align=1
  br 325
bb:252 (succs: 253 254)
 defs: [%1204,%1206]
  %1204(int32). binop op:add(0) %64(int32) %77(int32) (flags:0)
  %1205(int32). load src:%1204(int32) align=1
  %1206(int1). cmp2 op:icmp_eq(32) %1187(int32) %1205(int32)
  br %1206(int1) ? 253 : 254
bb:253 (succs: 325)
 defs: [%1207,%1216]
  %1207(int32). binop op:add(0) %64(int32) %75(int32) (flags:0)
  %1208(int32). load src:%1207(int32) align=1
  %1209(int32). binop op:add(0) %1208(int32) %1191(int32) (flags:0)
  %1210(int32). binop op:add(0) %64(int32) %75(int32) (flags:0)
  store dest:%1210(int32) value:%1209(int32) align=1
  %1211(int32). binop op:add(0) %64(int32) %77(int32) (flags:0)
  store dest:%1211(int32) value:%1190(int32) align=1
  %1212(int32). binop op:or(11) %1209(int32) %73(int32) (flags:0)
  %1213(int32). binop op:add(0) %1189(int32) %72(int32) (flags:0)
  %1214(int32). binop op:add(0) %1043(int32) %1213(int32) (flags:0)
  store dest:%1214(int32) value:%1212(int32) align=1
  %1215(int32). binop op:add(0) %1209(int32) %1189(int32) (flags:0)
  %1216(int32). binop op:add(0) %1043(int32) %1215(int32) (flags:0)
  store dest:%1216(int32) value:%1209(int32) align=1
  br 325
bb:254 (succs: 255 302)
 defs: [%1217,%1222]
  %1217(int32). binop op:add(0) %1047(int32) %72(int32) (flags:0)
  %1218(int32). binop op:add(0) %1217(int32) %1185(int32) (flags:0)
  %1219(int32). binop op:add(0) %1043(int32) %1218(int32) (flags:0)
  %1220(int32). load src:%1219(int32) align=1
  %1221(int32). binop op:and(10) %1220(int32) %82(int32) (flags:0)
  %1222(int1). cmp2 op:icmp_eq(32) %1221(int32) %73(int32)
  br %1222(int1) ? 255 : 302
bb:255 (succs: 256 268)
 defs: [%1223,%1225]
  %1223(int32). binop op:and(10) %1220(int32) %85(int32) (flags:0)
  %1224(int32). binop op:lshr(8) %1220(int32) %82(int32) (flags:0)
  %1225(int1). cmp2 op:icmp_ult(36) %1220(int32) %101(int32)
  br %1225(int1) ? 256 : 268
bb:256 (succs: 259 257)
 defs: [%1226,%1238]
  %1226(int32). binop op:or(11) %1185(int32) %75(int32) (flags:0)
  %1227(int32). binop op:add(0) %1226(int32) %1047(int32) (flags:0)
  %1228(int32). binop op:add(0) %1043(int32) %1227(int32) (flags:0)
  %1229(int32). load src:%1228(int32) align=1
  %1230(int32). binop op:add(0) %1047(int32) %76(int32) (flags:0)
  %1231(int32). binop op:add(0) %1230(int32) %1185(int32) (flags:0)
  %1232(int32). binop op:add(0) %1043(int32) %1231(int32) (flags:0)
  %1233(int32). load src:%1232(int32) align=1
  %1234(int32). binop op:shl(7) %1224(int32) %73(int32) (flags:0)
  %1235(int32). binop op:add(0) %64(int32) %80(int32) (flags:0)
  %1236(int32). binop op:mul(2) %1234(int32) %72(int32) (flags:0)
  %1237(int32). binop op:add(0) %1235(int32) %1236(int32) (flags:0)
  %1238(int1). cmp2 op:icmp_eq(32) %1229(int32) %1237(int32)
  br %1238(int1) ? 259 : 257
bb:257 (succs: 267 258)
 defs: [%1239,%1239]
  %1239(int1). cmp2 op:icmp_ult(36) %1229(int32) %1151(int32)
  br %1239(int1) ? 267 : 258
bb:258 (succs: 259 267)
 defs: [%1240,%1242]
  %1240(int32). binop op:add(0) %1229(int32) %76(int32) (flags:0)
  %1241(int32). load src:%1240(int32) align=1
  %1242(int1). cmp2 op:icmp_eq(32) %1241(int32) %1187(int32)
  br %1242(int1) ? 259 : 267
bb:259 (succs: 260 261)
 defs: [%1243,%1243]
  %1243(int1). cmp2 op:icmp_eq(32) %1233(int32) %1229(int32)
  br %1243(int1) ? 260 : 261
bb:260 (succs: 301)
 defs: [%1244,%1247]
  %1244(int32). binop op:shl(7) %73(int32) %1224(int32) (flags:0)
  %1245(int32). binop op:xor(12) %1244(int32) %83(int32) (flags:0)
  %1246(int32). load src:%64(int32) align=1
  %1247(int32). binop op:and(10) %1246(int32) %1245(int32) (flags:0)
  store dest:%64(int32) value:%1247(int32) align=1
  br 301
bb:261 (succs: 262 263)
 defs: [%1248,%1248]
  %1248(int1). cmp2 op:icmp_eq(32) %1233(int32) %1237(int32)
  br %1248(int1) ? 262 : 263
bb:262 (succs: 265)
 defs: [%1249,%1249]
  %1249(int32). binop op:add(0) %1233(int32) %75(int32) (flags:0)
  br 265
bb:263 (succs: 266 264)
 defs: [%1250,%1250]
  %1250(int1). cmp2 op:icmp_ult(36) %1233(int32) %1151(int32)
  br %1250(int1) ? 266 : 264
bb:264 (succs: 265 266)
 defs: [%1251,%1253]
  %1251(int32). binop op:add(0) %1233(int32) %75(int32) (flags:0)
  %1252(int32). load src:%1251(int32) align=1
  %1253(int1). cmp2 op:icmp_eq(32) %1252(int32) %1187(int32)
  br %1253(int1) ? 265 : 266
bb:265 (succs: 301)
 defs: [%1254,%1255]
  %1254(int32). phi bb:262=>%1249(int32) bb:264=>%1251(int32)
  %1255(int32). binop op:add(0) %1229(int32) %76(int32) (flags:0)
  store dest:%1255(int32) value:%1233(int32) align=1
  store dest:%1254(int32) value:%1229(int32) align=1
  br 301
bb:266 (succs:)
  call %3(void()) args:
  unreachable
bb:267 (succs:)
  call %3(void()) args:
  unreachable
bb:268 (succs: 274 269)
 defs: [%1256,%1264]
  %1256(int32). binop op:or(11) %1185(int32) %78(int32) (flags:0)
  %1257(int32). binop op:add(0) %1256(int32) %1047(int32) (flags:0)
  %1258(int32). binop op:add(0) %1043(int32) %1257(int32) (flags:0)
  %1259(int32). load src:%1258(int32) align=1
  %1260(int32). binop op:add(0) %1047(int32) %76(int32) (flags:0)
  %1261(int32). binop op:add(0) %1260(int32) %1185(int32) (flags:0)
  %1262(int32). binop op:add(0) %1043(int32) %1261(int32) (flags:0)
  %1263(int32). load src:%1262(int32) align=1
  %1264(int1). cmp2 op:icmp_eq(32) %1263(int32) %1187(int32)
  br %1264(int1) ? 274 : 269
bb:269 (succs: 273 270)
 defs: [%1265,%1269]
  %1265(int32). binop op:or(11) %1185(int32) %75(int32) (flags:0)
  %1266(int32). binop op:add(0) %1265(int32) %1047(int32) (flags:0)
  %1267(int32). binop op:add(0) %1043(int32) %1266(int32) (flags:0)
  %1268(int32). load src:%1267(int32) align=1
  %1269(int1). cmp2 op:icmp_ult(36) %1268(int32) %1151(int32)
  br %1269(int1) ? 273 : 270
bb:270 (succs: 271 273)
 defs: [%1270,%1272]
  %1270(int32). binop op:add(0) %1268(int32) %76(int32) (flags:0)
  %1271(int32). load src:%1270(int32) align=1
  %1272(int1). cmp2 op:icmp_eq(32) %1271(int32) %1187(int32)
  br %1272(int1) ? 271 : 273
bb:271 (succs: 272 273)
 defs: [%1273,%1275]
  %1273(int32). binop op:add(0) %1263(int32) %75(int32) (flags:0)
  %1274(int32). load src:%1273(int32) align=1
  %1275(int1). cmp2 op:icmp_eq(32) %1274(int32) %1187(int32)
  br %1275(int1) ? 272 : 273
bb:272 (succs: 281)
  store dest:%1270(int32) value:%1263(int32) align=1
  store dest:%1273(int32) value:%1268(int32) align=1
  br 281
bb:273 (succs:)
  call %3(void()) args:
  unreachable
bb:274 (succs: 275 276)
 defs: [%1276,%1280]
  %1276(int32). binop op:or(11) %1185(int32) %74(int32) (flags:0)
  %1277(int32). binop op:add(0) %1217(int32) %1276(int32) (flags:0)
  %1278(int32). binop op:add(0) %1043(int32) %1277(int32) (flags:0)
  %1279(int32). load src:%1278(int32) align=1
  %1280(int1). cmp2 op:icmp_eq(32) %1279(int32) %71(int32)
  br %1280(int1) ? 275 : 276
bb:275 (succs: 281 276)
 defs: [%1281,%1284]
  %1281(int32). binop op:add(0) %1276(int32) %1047(int32) (flags:0)
  %1282(int32). binop op:add(0) %1043(int32) %1281(int32) (flags:0)
  %1283(int32). load src:%1282(int32) align=1
  %1284(int1). cmp2 op:icmp_eq(32) %1283(int32) %71(int32)
  br %1284(int1) ? 281 : 276
bb:276 (succs: 277 276)
 defs: [%1285,%1289]
  forwardtyperef %1287(int32) int32
  forwardtyperef %1290(int32) int32
  %1285(int32). phi bb:274=>%1278(int32) bb:275=>%1282(int32) bb:276=>%1287(int32) bb:277=>%1290(int32)
  forwardtyperef %1288(int32) int32
  forwardtyperef %1291(int32) int32
  %1286(int32). phi bb:274=>%1279(int32) bb:275=>%1283(int32) bb:276=>%1288(int32) bb:277=>%1291(int32)
  %1287(int32). binop op:add(0) %1286(int32) %77(int32) (flags:0)
  %1288(int32). load src:%1287(int32) align=1
  %1289(int1). cmp2 op:icmp_eq(32) %1288(int32) %71(int32)
  br %1289(int1) ? 277 : 276
bb:277 (succs: 278 276)
 defs: [%1290,%1292]
  %1290(int32). binop op:add(0) %1286(int32) %74(int32) (flags:0)
  %1291(int32). load src:%1290(int32) align=1
  %1292(int1). cmp2 op:icmp_eq(32) %1291(int32) %71(int32)
  br %1292(int1) ? 278 : 276
bb:278 (succs: 280 279)
 defs: [%1293,%1293]
  %1293(int1). cmp2 op:icmp_ult(36) %1285(int32) %1151(int32)
  br %1293(int1) ? 280 : 279
bb:279 (succs: 281)
  store dest:%1285(int32) value:%71(int32) align=1
  br 281
bb:280 (succs:)
  call %3(void()) args:
  unreachable
bb:281 (succs: 301 282)
 defs: [%1294,%1295]
  %1294(int32). phi bb:272=>%1263(int32) bb:279=>%1286(int32) bb:275=>%71(int32)
  %1295(int1). cmp2 op:icmp_eq(32) %1259(int32) %71(int32)
  br %1295(int1) ? 301 : 282
bb:282 (succs: 283 285)
 defs: [%1296,%1304]
  %1296(int32). binop op:add(0) %1047(int32) %87(int32) (flags:0)
  %1297(int32). binop op:add(0) %1296(int32) %1185(int32) (flags:0)
  %1298(int32). binop op:add(0) %1043(int32) %1297(int32) (flags:0)
  %1299(int32). load src:%1298(int32) align=1
  %1300(int32). binop op:add(0) %64(int32) %88(int32) (flags:0)
  %1301(int32). binop op:mul(2) %1299(int32) %72(int32) (flags:0)
  %1302(int32). binop op:add(0) %1300(int32) %1301(int32) (flags:0)
  %1303(int32). load src:%1302(int32) align=1
  %1304(int1). cmp2 op:icmp_eq(32) %1187(int32) %1303(int32)
  br %1304(int1) ? 283 : 285
bb:283 (succs: 284 291)
 defs: [%1305,%1305]
  store dest:%1302(int32) value:%1294(int32) align=1
  %1305(int1). cmp2 op:icmp_eq(32) %1294(int32) %71(int32)
  br %1305(int1) ? 284 : 291
bb:284 (succs: 301)
 defs: [%1306,%1311]
  %1306(int32). binop op:shl(7) %73(int32) %1299(int32) (flags:0)
  %1307(int32). binop op:xor(12) %1306(int32) %83(int32) (flags:0)
  %1308(int32). binop op:add(0) %64(int32) %72(int32) (flags:0)
  %1309(int32). load src:%1308(int32) align=1
  %1310(int32). binop op:and(10) %1309(int32) %1307(int32) (flags:0)
  %1311(int32). binop op:add(0) %64(int32) %72(int32) (flags:0)
  store dest:%1311(int32) value:%1310(int32) align=1
  br 301
bb:285 (succs: 289 286)
 defs: [%1312,%1314]
  %1312(int32). binop op:add(0) %64(int32) %74(int32) (flags:0)
  %1313(int32). load src:%1312(int32) align=1
  %1314(int1). cmp2 op:icmp_ult(36) %1259(int32) %1313(int32)
  br %1314(int1) ? 289 : 286
bb:286 (succs: 287 288)
 defs: [%1315,%1317]
  %1315(int32). binop op:add(0) %1259(int32) %74(int32) (flags:0)
  %1316(int32). load src:%1315(int32) align=1
  %1317(int1). cmp2 op:icmp_eq(32) %1316(int32) %1187(int32)
  br %1317(int1) ? 287 : 288
bb:287 (succs: 290)
  store dest:%1315(int32) value:%1294(int32) align=1
  br 290
bb:288 (succs: 290)
 defs: [%1318,%1318]
  %1318(int32). binop op:add(0) %1259(int32) %77(int32) (flags:0)
  store dest:%1318(int32) value:%1294(int32) align=1
  br 290
bb:289 (succs:)
  call %3(void()) args:
  unreachable
bb:290 (succs: 301 291)
 defs: [%1319,%1319]
  %1319(int1). cmp2 op:icmp_eq(32) %1294(int32) %71(int32)
  br %1319(int1) ? 301 : 291
bb:291 (succs: 300 292)
 defs: [%1320,%1322]
  %1320(int32). binop op:add(0) %64(int32) %74(int32) (flags:0)
  %1321(int32). load src:%1320(int32) align=1
  %1322(int1). cmp2 op:icmp_ult(36) %1294(int32) %1321(int32)
  br %1322(int1) ? 300 : 292
bb:292 (succs: 296 293)
 defs: [%1323,%1328]
  %1323(int32). binop op:add(0) %1294(int32) %78(int32) (flags:0)
  store dest:%1323(int32) value:%1259(int32) align=1
  %1324(int32). binop op:or(11) %1185(int32) %74(int32) (flags:0)
  %1325(int32). binop op:add(0) %1324(int32) %1047(int32) (flags:0)
  %1326(int32). binop op:add(0) %1043(int32) %1325(int32) (flags:0)
  %1327(int32). load src:%1326(int32) align=1
  %1328(int1). cmp2 op:icmp_eq(32) %1327(int32) %71(int32)
  br %1328(int1) ? 296 : 293
bb:293 (succs: 295 294)
 defs: [%1329,%1329]
  %1329(int1). cmp2 op:icmp_ult(36) %1327(int32) %1321(int32)
  br %1329(int1) ? 295 : 294
bb:294 (succs: 296)
 defs: [%1330,%1331]
  %1330(int32). binop op:add(0) %1294(int32) %74(int32) (flags:0)
  store dest:%1330(int32) value:%1327(int32) align=1
  %1331(int32). binop op:add(0) %1327(int32) %78(int32) (flags:0)
  store dest:%1331(int32) value:%1294(int32) align=1
  br 296
bb:295 (succs:)
  call %3(void()) args:
  unreachable
bb:296 (succs: 301 297)
 defs: [%1332,%1335]
  %1332(int32). binop op:add(0) %1217(int32) %1324(int32) (flags:0)
  %1333(int32). binop op:add(0) %1043(int32) %1332(int32) (flags:0)
  %1334(int32). load src:%1333(int32) align=1
  %1335(int1). cmp2 op:icmp_eq(32) %1334(int32) %71(int32)
  br %1335(int1) ? 301 : 297
bb:297 (succs: 299 298)
 defs: [%1336,%1338]
  %1336(int32). binop op:add(0) %64(int32) %74(int32) (flags:0)
  %1337(int32). load src:%1336(int32) align=1
  %1338(int1). cmp2 op:icmp_ult(36) %1334(int32) %1337(int32)
  br %1338(int1) ? 299 : 298
bb:298 (succs: 301)
 defs: [%1339,%1340]
  %1339(int32). binop op:add(0) %1294(int32) %77(int32) (flags:0)
  store dest:%1339(int32) value:%1334(int32) align=1
  %1340(int32). binop op:add(0) %1334(int32) %78(int32) (flags:0)
  store dest:%1340(int32) value:%1294(int32) align=1
  br 301
bb:299 (succs:)
  call %3(void()) args:
  unreachable
bb:300 (succs:)
  call %3(void()) args:
  unreachable
bb:301 (succs: 302)
 defs: [%1341,%1344]
  %1341(int32). binop op:or(11) %1223(int32) %1185(int32) (flags:0)
  %1342(int32). binop op:add(0) %1341(int32) %1047(int32) (flags:0)
  %1343(int32). binop op:add(0) %1043(int32) %1342(int32) (flags:0)
  %1344(int32). binop op:add(0) %1223(int32) %1191(int32) (flags:0)
  br 302
bb:302 (succs: 303 308)
 defs: [%1345,%1356]
  %1345(int32). phi bb:254=>%1191(int32) bb:301=>%1344(int32)
  %1346(int32). phi bb:254=>%1187(int32) bb:301=>%1343(int32)
  %1347(int32). binop op:add(0) %1346(int32) %72(int32) (flags:0)
  %1348(int32). load src:%1347(int32) align=1
  %1349(int32). binop op:and(10) %1348(int32) %118(int32) (flags:0)
  store dest:%1347(int32) value:%1349(int32) align=1
  %1350(int32). binop op:or(11) %1345(int32) %73(int32) (flags:0)
  %1351(int32). binop op:add(0) %1189(int32) %72(int32) (flags:0)
  %1352(int32). binop op:add(0) %1043(int32) %1351(int32) (flags:0)
  store dest:%1352(int32) value:%1350(int32) align=1
  %1353(int32). binop op:add(0) %1345(int32) %1189(int32) (flags:0)
  %1354(int32). binop op:add(0) %1043(int32) %1353(int32) (flags:0)
  store dest:%1354(int32) value:%1345(int32) align=1
  %1355(int32). binop op:lshr(8) %1345(int32) %82(int32) (flags:0)
  %1356(int1). cmp2 op:icmp_ult(36) %1345(int32) %101(int32)
  br %1356(int1) ? 303 : 308
bb:303 (succs: 304 305)
 defs: [%1357,%1364]
  %1357(int32). binop op:shl(7) %1355(int32) %73(int32) (flags:0)
  %1358(int32). binop op:add(0) %64(int32) %80(int32) (flags:0)
  %1359(int32). binop op:mul(2) %1357(int32) %72(int32) (flags:0)
  %1360(int32). binop op:add(0) %1358(int32) %1359(int32) (flags:0)
  %1361(int32). load src:%64(int32) align=1
  %1362(int32). binop op:shl(7) %73(int32) %1355(int32) (flags:0)
  %1363(int32). binop op:and(10) %1361(int32) %1362(int32) (flags:0)
  %1364(int1). cmp2 op:icmp_eq(32) %1363(int32) %71(int32)
  br %1364(int1) ? 304 : 305
bb:304 (succs: 307)
 defs: [%1365,%1369]
  %1365(int32). binop op:or(11) %1361(int32) %1362(int32) (flags:0)
  store dest:%64(int32) value:%1365(int32) align=1
  %1366(int32). binop op:add(0) %1357(int32) %79(int32) (flags:0)
  %1367(int32). binop op:add(0) %64(int32) %80(int32) (flags:0)
  %1368(int32). binop op:mul(2) %1366(int32) %72(int32) (flags:0)
  %1369(int32). binop op:add(0) %1367(int32) %1368(int32) (flags:0)
  br 307
bb:305 (succs: 306 307)
 defs: [%1370,%1377]
  %1370(int32). binop op:add(0) %1357(int32) %79(int32) (flags:0)
  %1371(int32). binop op:add(0) %64(int32) %80(int32) (flags:0)
  %1372(int32). binop op:mul(2) %1370(int32) %72(int32) (flags:0)
  %1373(int32). binop op:add(0) %1371(int32) %1372(int32) (flags:0)
  %1374(int32). load src:%1373(int32) align=1
  %1375(int32). binop op:add(0) %64(int32) %74(int32) (flags:0)
  %1376(int32). load src:%1375(int32) align=1
  %1377(int1). cmp2 op:icmp_ult(36) %1374(int32) %1376(int32)
  br %1377(int1) ? 306 : 307
bb:306 (succs:)
  call %3(void()) args:
  unreachable
bb:307 (succs: 325)
 defs: [%1378,%1384]
  %1378(int32). phi bb:305=>%1373(int32) bb:304=>%1369(int32)
  %1379(int32). phi bb:305=>%1374(int32) bb:304=>%1360(int32)
  store dest:%1378(int32) value:%1190(int32) align=1
  %1380(int32). binop op:add(0) %1379(int32) %76(int32) (flags:0)
  store dest:%1380(int32) value:%1190(int32) align=1
  %1381(int32). binop op:add(0) %1189(int32) %75(int32) (flags:0)
  %1382(int32). binop op:add(0) %1043(int32) %1381(int32) (flags:0)
  store dest:%1382(int32) value:%1379(int32) align=1
  %1383(int32). binop op:add(0) %1189(int32) %76(int32) (flags:0)
  %1384(int32). binop op:add(0) %1043(int32) %1383(int32) (flags:0)
  store dest:%1384(int32) value:%1360(int32) align=1
  br 325
bb:308 (succs: 311 309)
 defs: [%1385,%1386]
  %1385(int32). binop op:lshr(8) %1345(int32) %75(int32) (flags:0)
  %1386(int1). cmp2 op:icmp_eq(32) %1385(int32) %71(int32)
  br %1386(int1) ? 311 : 309
bb:309 (succs: 311 310)
 defs: [%1387,%1387]
  %1387(int1). cmp2 op:icmp_ugt(34) %1345(int32) %95(int32)
  br %1387(int1) ? 311 : 310
bb:310 (succs: 311)
 defs: [%1388,%1409]
  %1388(int32). binop op:add(0) %1385(int32) %96(int32) (flags:0)
  %1389(int32). binop op:lshr(8) %1388(int32) %74(int32) (flags:0)
  %1390(int32). binop op:and(10) %1389(int32) %75(int32) (flags:0)
  %1391(int32). binop op:shl(7) %1385(int32) %1390(int32) (flags:0)
  %1392(int32). binop op:add(0) %1391(int32) %97(int32) (flags:0)
  %1393(int32). binop op:lshr(8) %1392(int32) %74(int32) (flags:0)
  %1394(int32). binop op:and(10) %1393(int32) %72(int32) (flags:0)
  %1395(int32). binop op:or(11) %1394(int32) %1390(int32) (flags:0)
  %1396(int32). binop op:shl(7) %1391(int32) %1394(int32) (flags:0)
  %1397(int32). binop op:add(0) %1396(int32) %98(int32) (flags:0)
  %1398(int32). binop op:lshr(8) %1397(int32) %74(int32) (flags:0)
  %1399(int32). binop op:and(10) %1398(int32) %79(int32) (flags:0)
  %1400(int32). binop op:or(11) %1395(int32) %1399(int32) (flags:0)
  %1401(int32). binop op:sub(1) %99(int32) %1400(int32) (flags:0)
  %1402(int32). binop op:shl(7) %1396(int32) %1399(int32) (flags:0)
  %1403(int32). binop op:lshr(8) %1402(int32) %94(int32) (flags:0)
  %1404(int32). binop op:add(0) %1401(int32) %1403(int32) (flags:0)
  %1405(int32). binop op:shl(7) %1404(int32) %73(int32) (flags:0)
  %1406(int32). binop op:add(0) %1404(int32) %81(int32) (flags:0)
  %1407(int32). binop op:lshr(8) %1345(int32) %1406(int32) (flags:0)
  %1408(int32). binop op:and(10) %1407(int32) %73(int32) (flags:0)
  %1409(int32). binop op:or(11) %1408(int32) %1405(int32) (flags:0)
  br 311
bb:311 (succs: 312 313)
 defs: [%1410,%1424]
  %1410(int32). phi bb:310=>%1409(int32) bb:308=>%71(int32) bb:309=>%86(int32)
  %1411(int32). binop op:add(0) %64(int32) %88(int32) (flags:0)
  %1412(int32). binop op:mul(2) %1410(int32) %72(int32) (flags:0)
  %1413(int32). binop op:add(0) %1411(int32) %1412(int32) (flags:0)
  %1414(int32). binop op:add(0) %1189(int32) %87(int32) (flags:0)
  %1415(int32). binop op:add(0) %1043(int32) %1414(int32) (flags:0)
  store dest:%1415(int32) value:%1410(int32) align=1
  %1416(int32). binop op:add(0) %1189(int32) %74(int32) (flags:0)
  %1417(int32). binop op:add(0) %1043(int32) %1416(int32) (flags:0)
  %1418(int32). binop op:add(0) %1189(int32) %77(int32) (flags:0)
  %1419(int32). binop op:add(0) %1043(int32) %1418(int32) (flags:0)
  store dest:%1419(int32) value:%71(int32) align=1
  store dest:%1417(int32) value:%71(int32) align=1
  %1420(int32). binop op:add(0) %64(int32) %72(int32) (flags:0)
  %1421(int32). load src:%1420(int32) align=1
  %1422(int32). binop op:shl(7) %73(int32) %1410(int32) (flags:0)
  %1423(int32). binop op:and(10) %1421(int32) %1422(int32) (flags:0)
  %1424(int1). cmp2 op:icmp_eq(32) %1423(int32) %71(int32)
  br %1424(int1) ? 312 : 313
bb:312 (succs: 325)
 defs: [%1425,%1432]
  %1425(int32). binop op:or(11) %1421(int32) %1422(int32) (flags:0)
  %1426(int32). binop op:add(0) %64(int32) %72(int32) (flags:0)
  store dest:%1426(int32) value:%1425(int32) align=1
  store dest:%1413(int32) value:%1190(int32) align=1
  %1427(int32). binop op:add(0) %1189(int32) %78(int32) (flags:0)
  %1428(int32). binop op:add(0) %1043(int32) %1427(int32) (flags:0)
  store dest:%1428(int32) value:%1413(int32) align=1
  %1429(int32). binop op:add(0) %1189(int32) %76(int32) (flags:0)
  %1430(int32). binop op:add(0) %1043(int32) %1429(int32) (flags:0)
  store dest:%1430(int32) value:%1190(int32) align=1
  %1431(int32). binop op:add(0) %1189(int32) %75(int32) (flags:0)
  %1432(int32). binop op:add(0) %1043(int32) %1431(int32) (flags:0)
  store dest:%1432(int32) value:%1190(int32) align=1
  br 325
bb:313 (succs: 315 314)
 defs: [%1433,%1434]
  %1433(int32). load src:%1413(int32) align=1
  %1434(int1). cmp2 op:icmp_eq(32) %1410(int32) %86(int32)
  br %1434(int1) ? 315 : 314
bb:314 (succs: 315)
 defs: [%1435,%1436]
  %1435(int32). binop op:lshr(8) %1410(int32) %73(int32) (flags:0)
  %1436(int32). binop op:sub(1) %100(int32) %1435(int32) (flags:0)
  br 315
bb:315 (succs: 322 316)
 defs: [%1437,%1441]
  %1437(int32). phi bb:314=>%1436(int32) bb:313=>%71(int32)
  %1438(int32). binop op:add(0) %1433(int32) %72(int32) (flags:0)
  %1439(int32). load src:%1438(int32) align=1
  %1440(int32). binop op:and(10) %1439(int32) %85(int32) (flags:0)
  %1441(int1). cmp2 op:icmp_eq(32) %1440(int32) %1345(int32)
  br %1441(int1) ? 322 : 316
bb:316 (succs: 318)
 defs: [%1442,%1442]
  %1442(int32). binop op:shl(7) %1345(int32) %1437(int32) (flags:0)
  br 318
bb:317 (succs: 322 318)
 defs: [%1443,%1447]
  forwardtyperef %1448(int32) int32
  %1443(int32). binop op:shl(7) %1448(int32) %73(int32) (flags:0)
  forwardtyperef %1454(int32) int32
  %1444(int32). binop op:add(0) %1454(int32) %72(int32) (flags:0)
  %1445(int32). load src:%1444(int32) align=1
  %1446(int32). binop op:and(10) %1445(int32) %85(int32) (flags:0)
  %1447(int1). cmp2 op:icmp_eq(32) %1446(int32) %1345(int32)
  br %1447(int1) ? 322 : 318
bb:318 (succs: 319 317)
 defs: [%1448,%1455]
  %1448(int32). phi bb:316=>%1442(int32) bb:317=>%1443(int32)
  %1449(int32). phi bb:316=>%1433(int32) bb:317=>%1454(int32)
  %1450(int32). binop op:lshr(8) %1448(int32) %86(int32) (flags:0)
  %1451(int32). binop op:add(0) %1449(int32) %74(int32) (flags:0)
  %1452(int32). binop op:mul(2) %1450(int32) %72(int32) (flags:0)
  %1453(int32). binop op:add(0) %1451(int32) %1452(int32) (flags:0)
  %1454(int32). load src:%1453(int32) align=1
  %1455(int1). cmp2 op:icmp_eq(32) %1454(int32) %71(int32)
  br %1455(int1) ? 319 : 317
bb:319 (succs: 321 320)
 defs: [%1456,%1458]
  %1456(int32). binop op:add(0) %64(int32) %74(int32) (flags:0)
  %1457(int32). load src:%1456(int32) align=1
  %1458(int1). cmp2 op:icmp_ult(36) %1453(int32) %1457(int32)
  br %1458(int1) ? 321 : 320
bb:320 (succs: 325)
 defs: [%1459,%1464]
  store dest:%1453(int32) value:%1190(int32) align=1
  %1459(int32). binop op:add(0) %1189(int32) %78(int32) (flags:0)
  %1460(int32). binop op:add(0) %1043(int32) %1459(int32) (flags:0)
  store dest:%1460(int32) value:%1449(int32) align=1
  %1461(int32). binop op:add(0) %1189(int32) %76(int32) (flags:0)
  %1462(int32). binop op:add(0) %1043(int32) %1461(int32) (flags:0)
  store dest:%1462(int32) value:%1190(int32) align=1
  %1463(int32). binop op:add(0) %1189(int32) %75(int32) (flags:0)
  %1464(int32). binop op:add(0) %1043(int32) %1463(int32) (flags:0)
  store dest:%1464(int32) value:%1190(int32) align=1
  br 325
bb:321 (succs:)
  call %3(void()) args:
  unreachable
bb:322 (succs: 323 324)
 defs: [%1465,%1472]
  %1465(int32). phi bb:315=>%1433(int32) bb:317=>%1454(int32)
  %1466(int32). binop op:add(0) %1465(int32) %75(int32) (flags:0)
  %1467(int32). load src:%1466(int32) align=1
  %1468(int32). binop op:add(0) %64(int32) %74(int32) (flags:0)
  %1469(int32). load src:%1468(int32) align=1
  %1470(int1). cmp2 op:icmp_uge(35) %1465(int32) %1469(int32)
  %1471(int1). cmp2 op:icmp_uge(35) %1467(int32) %1469(int32)
  %1472(int1). binop op:and(10) %1470(int1) %1471(int1) (flags:0)
  br %1472(int1) ? 323 : 324
bb:323 (succs: 325)
 defs: [%1473,%1479]
  %1473(int32). binop op:add(0) %1467(int32) %76(int32) (flags:0)
  store dest:%1473(int32) value:%1190(int32) align=1
  store dest:%1466(int32) value:%1190(int32) align=1
  %1474(int32). binop op:add(0) %1189(int32) %75(int32) (flags:0)
  %1475(int32). binop op:add(0) %1043(int32) %1474(int32) (flags:0)
  store dest:%1475(int32) value:%1467(int32) align=1
  %1476(int32). binop op:add(0) %1189(int32) %76(int32) (flags:0)
  %1477(int32). binop op:add(0) %1043(int32) %1476(int32) (flags:0)
  store dest:%1477(int32) value:%1465(int32) align=1
  %1478(int32). binop op:add(0) %1189(int32) %78(int32) (flags:0)
  %1479(int32). binop op:add(0) %1043(int32) %1478(int32) (flags:0)
  store dest:%1479(int32) value:%71(int32) align=1
  br 325
bb:324 (succs:)
  call %3(void()) args:
  unreachable
bb:325 (succs: 362)
 defs: [%1480,%1481]
  %1480(int32). binop op:or(11) %1177(int32) %75(int32) (flags:0)
  %1481(int32). binop op:add(0) %1043(int32) %1480(int32) (flags:0)
  br 362
bb:326 (succs: 328 327)
 defs: [%1482,%1484]
  forwardtyperef %1490(int32) int32
  %1482(int32). phi bb:328=>%1490(int32) bb:244=>%1160(int32) bb:245=>%1168(int32)
  %1483(int32). load src:%1482(int32) align=1
  %1484(int1). cmp2 op:icmp_ugt(34) %1483(int32) %1057(int32)
  br %1484(int1) ? 328 : 327
bb:327 (succs: 329 328)
 defs: [%1485,%1488]
  %1485(int32). binop op:add(0) %1482(int32) %72(int32) (flags:0)
  %1486(int32). load src:%1485(int32) align=1
  %1487(int32). binop op:add(0) %1483(int32) %1486(int32) (flags:0)
  %1488(int1). cmp2 op:icmp_ugt(34) %1487(int32) %1057(int32)
  br %1488(int1) ? 329 : 328
bb:328 (succs: 326)
 defs: [%1489,%1490]
  %1489(int32). binop op:add(0) %1482(int32) %75(int32) (flags:0)
  %1490(int32). load src:%1489(int32) align=1
  br 326
bb:329 (succs: 331 330)
 defs: [%1491,%1495]
  %1491(int32). binop op:add(0) %1486(int32) %126(int32) (flags:0)
  %1492(int32). binop op:add(0) %1486(int32) %127(int32) (flags:0)
  %1493(int32). binop op:add(0) %1483(int32) %1492(int32) (flags:0)
  %1494(int32). binop op:and(10) %1493(int32) %81(int32) (flags:0)
  %1495(int1). cmp2 op:icmp_eq(32) %1494(int32) %71(int32)
  br %1495(int1) ? 331 : 330
bb:330 (succs: 331)
 defs: [%1496,%1497]
  %1496(int32). binop op:sub(1) %71(int32) %1493(int32) (flags:0)
  %1497(int32). binop op:and(10) %1496(int32) %81(int32) (flags:0)
  br 331
bb:331 (succs: 333 332)
 defs: [%1498,%1508]
  %1498(int32). phi bb:330=>%1497(int32) bb:329=>%71(int32)
  %1499(int32). binop op:add(0) %1491(int32) %1498(int32) (flags:0)
  %1500(int32). binop op:add(0) %1483(int32) %1499(int32) (flags:0)
  %1501(int32). binop op:add(0) %1057(int32) %74(int32) (flags:0)
  %1502(int1). cmp2 op:icmp_ult(36) %1500(int32) %1501(int32)
  %1503(int32). vselect %1502(int1) ? %1057(int32) : %1500(int32)
  %1504(int32). binop op:add(0) %1503(int32) %75(int32) (flags:0)
  %1505(int32). binop op:add(0) %1047(int32) %116(int32) (flags:0)
  %1506(int32). binop op:add(0) %1043(int32) %75(int32) (flags:0)
  %1507(int32). binop op:and(10) %1506(int32) %81(int32) (flags:0)
  %1508(int1). cmp2 op:icmp_eq(32) %1507(int32) %71(int32)
  br %1508(int1) ? 333 : 332
bb:332 (succs: 333)
 defs: [%1509,%1510]
  %1509(int32). binop op:sub(1) %71(int32) %1506(int32) (flags:0)
  %1510(int32). binop op:and(10) %1509(int32) %81(int32) (flags:0)
  br 333
bb:333 (succs: 334 335)
 defs: [%1511,%1532]
  %1511(int32). phi bb:332=>%1510(int32) bb:331=>%71(int32)
  %1512(int32). binop op:add(0) %1043(int32) %1511(int32) (flags:0)
  %1513(int32). binop op:sub(1) %1505(int32) %1511(int32) (flags:0)
  %1514(int32). binop op:add(0) %64(int32) %78(int32) (flags:0)
  store dest:%1514(int32) value:%1512(int32) align=1
  %1515(int32). binop op:add(0) %64(int32) %76(int32) (flags:0)
  store dest:%1515(int32) value:%1513(int32) align=1
  %1516(int32). binop op:or(11) %1513(int32) %73(int32) (flags:0)
  %1517(int32). binop op:add(0) %1511(int32) %72(int32) (flags:0)
  %1518(int32). binop op:add(0) %1043(int32) %1517(int32) (flags:0)
  store dest:%1518(int32) value:%1516(int32) align=1
  %1519(int32). binop op:add(0) %1047(int32) %117(int32) (flags:0)
  %1520(int32). binop op:add(0) %1043(int32) %1519(int32) (flags:0)
  store dest:%1520(int32) value:%80(int32) align=1
  %1521(int32). binop op:add(0) %63(int32) %74(int32) (flags:0)
  %1522(int32). load src:%1521(int32) align=1
  %1523(int32). binop op:add(0) %64(int32) %87(int32) (flags:0)
  store dest:%1523(int32) value:%1522(int32) align=1
  %1524(int32). binop op:add(0) %1503(int32) %72(int32) (flags:0)
  store dest:%1524(int32) value:%128(int32) align=1
  %1525(int32). binop op:add(0) %64(int32) %90(int32) (flags:0)
  call %0(void(int32,int32,int32,int32,int1))(llvm.memcpy.p0i8.p0i8.i32) args: %1504(int32) %1525(int32) %74(int32) %73(int32) %130(int1)
  %1526(int32). binop op:add(0) %64(int32) %90(int32) (flags:0)
  store dest:%1526(int32) value:%1043(int32) align=1
  %1527(int32). binop op:add(0) %64(int32) %114(int32) (flags:0)
  store dest:%1527(int32) value:%1047(int32) align=1
  %1528(int32). binop op:add(0) %64(int32) %115(int32) (flags:0)
  store dest:%1528(int32) value:%1046(int32) align=1
  %1529(int32). binop op:add(0) %64(int32) %129(int32) (flags:0)
  store dest:%1529(int32) value:%1504(int32) align=1
  %1530(int32). binop op:add(0) %1503(int32) %87(int32) (flags:0)
  store dest:%1530(int32) value:%81(int32) align=1
  %1531(int32). binop op:add(0) %1503(int32) %107(int32) (flags:0)
  %1532(int1). cmp2 op:icmp_ult(36) %1531(int32) %1487(int32)
  br %1532(int1) ? 334 : 335
bb:334 (succs: 334 335)
 defs: [%1533,%1536]
  forwardtyperef %1534(int32) int32
  %1533(int32). phi bb:334=>%1534(int32) bb:333=>%1530(int32)
  %1534(int32). binop op:add(0) %1533(int32) %72(int32) (flags:0)
  store dest:%1534(int32) value:%81(int32) align=1
  %1535(int32). binop op:add(0) %1533(int32) %75(int32) (flags:0)
  %1536(int1). cmp2 op:icmp_ult(36) %1535(int32) %1487(int32)
  br %1536(int1) ? 334 : 335
bb:335 (succs: 359 336)
 defs: [%1537,%1537]
  %1537(int1). cmp2 op:icmp_eq(32) %1503(int32) %1057(int32)
  br %1537(int1) ? 359 : 336
bb:336 (succs: 337 342)
 defs: [%1538,%1544]
  %1538(int32). binop op:sub(1) %1503(int32) %1057(int32) (flags:0)
  %1539(int32). load src:%1524(int32) align=1
  %1540(int32). binop op:and(10) %1539(int32) %118(int32) (flags:0)
  store dest:%1524(int32) value:%1540(int32) align=1
  %1541(int32). binop op:or(11) %1538(int32) %73(int32) (flags:0)
  %1542(int32). binop op:add(0) %1057(int32) %72(int32) (flags:0)
  store dest:%1542(int32) value:%1541(int32) align=1
  store dest:%1503(int32) value:%1538(int32) align=1
  %1543(int32). binop op:lshr(8) %1538(int32) %82(int32) (flags:0)
  %1544(int1). cmp2 op:icmp_ult(36) %1538(int32) %101(int32)
  br %1544(int1) ? 337 : 342
bb:337 (succs: 338 339)
 defs: [%1545,%1552]
  %1545(int32). binop op:shl(7) %1543(int32) %73(int32) (flags:0)
  %1546(int32). binop op:add(0) %64(int32) %80(int32) (flags:0)
  %1547(int32). binop op:mul(2) %1545(int32) %72(int32) (flags:0)
  %1548(int32). binop op:add(0) %1546(int32) %1547(int32) (flags:0)
  %1549(int32). load src:%64(int32) align=1
  %1550(int32). binop op:shl(7) %73(int32) %1543(int32) (flags:0)
  %1551(int32). binop op:and(10) %1549(int32) %1550(int32) (flags:0)
  %1552(int1). cmp2 op:icmp_eq(32) %1551(int32) %71(int32)
  br %1552(int1) ? 338 : 339
bb:338 (succs: 341)
 defs: [%1553,%1557]
  %1553(int32). binop op:or(11) %1549(int32) %1550(int32) (flags:0)
  store dest:%64(int32) value:%1553(int32) align=1
  %1554(int32). binop op:add(0) %1545(int32) %79(int32) (flags:0)
  %1555(int32). binop op:add(0) %64(int32) %80(int32) (flags:0)
  %1556(int32). binop op:mul(2) %1554(int32) %72(int32) (flags:0)
  %1557(int32). binop op:add(0) %1555(int32) %1556(int32) (flags:0)
  br 341
bb:339 (succs: 340 341)
 defs: [%1558,%1565]
  %1558(int32). binop op:add(0) %1545(int32) %79(int32) (flags:0)
  %1559(int32). binop op:add(0) %64(int32) %80(int32) (flags:0)
  %1560(int32). binop op:mul(2) %1558(int32) %72(int32) (flags:0)
  %1561(int32). binop op:add(0) %1559(int32) %1560(int32) (flags:0)
  %1562(int32). load src:%1561(int32) align=1
  %1563(int32). binop op:add(0) %64(int32) %74(int32) (flags:0)
  %1564(int32). load src:%1563(int32) align=1
  %1565(int1). cmp2 op:icmp_ult(36) %1562(int32) %1564(int32)
  br %1565(int1) ? 340 : 341
bb:340 (succs:)
  call %3(void()) args:
  unreachable
bb:341 (succs: 359)
 defs: [%1566,%1570]
  %1566(int32). phi bb:339=>%1561(int32) bb:338=>%1557(int32)
  %1567(int32). phi bb:339=>%1562(int32) bb:338=>%1548(int32)
  store dest:%1566(int32) value:%1057(int32) align=1
  %1568(int32). binop op:add(0) %1567(int32) %76(int32) (flags:0)
  store dest:%1568(int32) value:%1057(int32) align=1
  %1569(int32). binop op:add(0) %1057(int32) %75(int32) (flags:0)
  store dest:%1569(int32) value:%1567(int32) align=1
  %1570(int32). binop op:add(0) %1057(int32) %76(int32) (flags:0)
  store dest:%1570(int32) value:%1548(int32) align=1
  br 359
bb:342 (succs: 345 343)
 defs: [%1571,%1572]
  %1571(int32). binop op:lshr(8) %1538(int32) %75(int32) (flags:0)
  %1572(int1). cmp2 op:icmp_eq(32) %1571(int32) %71(int32)
  br %1572(int1) ? 345 : 343
bb:343 (succs: 345 344)
 defs: [%1573,%1573]
  %1573(int1). cmp2 op:icmp_ugt(34) %1538(int32) %95(int32)
  br %1573(int1) ? 345 : 344
bb:344 (succs: 345)
 defs: [%1574,%1595]
  %1574(int32). binop op:add(0) %1571(int32) %96(int32) (flags:0)
  %1575(int32). binop op:lshr(8) %1574(int32) %74(int32) (flags:0)
  %1576(int32). binop op:and(10) %1575(int32) %75(int32) (flags:0)
  %1577(int32). binop op:shl(7) %1571(int32) %1576(int32) (flags:0)
  %1578(int32). binop op:add(0) %1577(int32) %97(int32) (flags:0)
  %1579(int32). binop op:lshr(8) %1578(int32) %74(int32) (flags:0)
  %1580(int32). binop op:and(10) %1579(int32) %72(int32) (flags:0)
  %1581(int32). binop op:or(11) %1580(int32) %1576(int32) (flags:0)
  %1582(int32). binop op:shl(7) %1577(int32) %1580(int32) (flags:0)
  %1583(int32). binop op:add(0) %1582(int32) %98(int32) (flags:0)
  %1584(int32). binop op:lshr(8) %1583(int32) %74(int32) (flags:0)
  %1585(int32). binop op:and(10) %1584(int32) %79(int32) (flags:0)
  %1586(int32). binop op:or(11) %1581(int32) %1585(int32) (flags:0)
  %1587(int32). binop op:sub(1) %99(int32) %1586(int32) (flags:0)
  %1588(int32). binop op:shl(7) %1582(int32) %1585(int32) (flags:0)
  %1589(int32). binop op:lshr(8) %1588(int32) %94(int32) (flags:0)
  %1590(int32). binop op:add(0) %1587(int32) %1589(int32) (flags:0)
  %1591(int32). binop op:shl(7) %1590(int32) %73(int32) (flags:0)
  %1592(int32). binop op:add(0) %1590(int32) %81(int32) (flags:0)
  %1593(int32). binop op:lshr(8) %1538(int32) %1592(int32) (flags:0)
  %1594(int32). binop op:and(10) %1593(int32) %73(int32) (flags:0)
  %1595(int32). binop op:or(11) %1594(int32) %1591(int32) (flags:0)
  br 345
bb:345 (succs: 346 347)
 defs: [%1596,%1606]
  %1596(int32). phi bb:344=>%1595(int32) bb:342=>%71(int32) bb:343=>%86(int32)
  %1597(int32). binop op:add(0) %64(int32) %88(int32) (flags:0)
  %1598(int32). binop op:mul(2) %1596(int32) %72(int32) (flags:0)
  %1599(int32). binop op:add(0) %1597(int32) %1598(int32) (flags:0)
  %1600(int32). binop op:add(0) %1057(int32) %87(int32) (flags:0)
  store dest:%1600(int32) value:%1596(int32) align=1
  %1601(int32). binop op:add(0) %1057(int32) %77(int32) (flags:0)
  store dest:%1601(int32) value:%71(int32) align=1
  store dest:%1501(int32) value:%71(int32) align=1
  %1602(int32). binop op:add(0) %64(int32) %72(int32) (flags:0)
  %1603(int32). load src:%1602(int32) align=1
  %1604(int32). binop op:shl(7) %73(int32) %1596(int32) (flags:0)
  %1605(int32). binop op:and(10) %1603(int32) %1604(int32) (flags:0)
  %1606(int1). cmp2 op:icmp_eq(32) %1605(int32) %71(int32)
  br %1606(int1) ? 346 : 347
bb:346 (succs: 359)
 defs: [%1607,%1611]
  %1607(int32). binop op:or(11) %1603(int32) %1604(int32) (flags:0)
  %1608(int32). binop op:add(0) %64(int32) %72(int32) (flags:0)
  store dest:%1608(int32) value:%1607(int32) align=1
  store dest:%1599(int32) value:%1057(int32) align=1
  %1609(int32). binop op:add(0) %1057(int32) %78(int32) (flags:0)
  store dest:%1609(int32) value:%1599(int32) align=1
  %1610(int32). binop op:add(0) %1057(int32) %76(int32) (flags:0)
  store dest:%1610(int32) value:%1057(int32) align=1
  %1611(int32). binop op:add(0) %1057(int32) %75(int32) (flags:0)
  store dest:%1611(int32) value:%1057(int32) align=1
  br 359
bb:347 (succs: 349 348)
 defs: [%1612,%1613]
  %1612(int32). load src:%1599(int32) align=1
  %1613(int1). cmp2 op:icmp_eq(32) %1596(int32) %86(int32)
  br %1613(int1) ? 349 : 348
bb:348 (succs: 349)
 defs: [%1614,%1615]
  %1614(int32). binop op:lshr(8) %1596(int32) %73(int32) (flags:0)
  %1615(int32). binop op:sub(1) %100(int32) %1614(int32) (flags:0)
  br 349
bb:349 (succs: 356 350)
 defs: [%1616,%1620]
  %1616(int32). phi bb:348=>%1615(int32) bb:347=>%71(int32)
  %1617(int32). binop op:add(0) %1612(int32) %72(int32) (flags:0)
  %1618(int32). load src:%1617(int32) align=1
  %1619(int32). binop op:and(10) %1618(int32) %85(int32) (flags:0)
  %1620(int1). cmp2 op:icmp_eq(32) %1619(int32) %1538(int32)
  br %1620(int1) ? 356 : 350
bb:350 (succs: 352)
 defs: [%1621,%1621]
  %1621(int32). binop op:shl(7) %1538(int32) %1616(int32) (flags:0)
  br 352
bb:351 (succs: 356 352)
 defs: [%1622,%1626]
  forwardtyperef %1627(int32) int32
  %1622(int32). binop op:shl(7) %1627(int32) %73(int32) (flags:0)
  forwardtyperef %1633(int32) int32
  %1623(int32). binop op:add(0) %1633(int32) %72(int32) (flags:0)
  %1624(int32). load src:%1623(int32) align=1
  %1625(int32). binop op:and(10) %1624(int32) %85(int32) (flags:0)
  %1626(int1). cmp2 op:icmp_eq(32) %1625(int32) %1538(int32)
  br %1626(int1) ? 356 : 352
bb:352 (succs: 353 351)
 defs: [%1627,%1634]
  %1627(int32). phi bb:350=>%1621(int32) bb:351=>%1622(int32)
  %1628(int32). phi bb:350=>%1612(int32) bb:351=>%1633(int32)
  %1629(int32). binop op:lshr(8) %1627(int32) %86(int32) (flags:0)
  %1630(int32). binop op:add(0) %1628(int32) %74(int32) (flags:0)
  %1631(int32). binop op:mul(2) %1629(int32) %72(int32) (flags:0)
  %1632(int32). binop op:add(0) %1630(int32) %1631(int32) (flags:0)
  %1633(int32). load src:%1632(int32) align=1
  %1634(int1). cmp2 op:icmp_eq(32) %1633(int32) %71(int32)
  br %1634(int1) ? 353 : 351
bb:353 (succs: 355 354)
 defs: [%1635,%1637]
  %1635(int32). binop op:add(0) %64(int32) %74(int32) (flags:0)
  %1636(int32). load src:%1635(int32) align=1
  %1637(int1). cmp2 op:icmp_ult(36) %1632(int32) %1636(int32)
  br %1637(int1) ? 355 : 354
bb:354 (succs: 359)
 defs: [%1638,%1640]
  store dest:%1632(int32) value:%1057(int32) align=1
  %1638(int32). binop op:add(0) %1057(int32) %78(int32) (flags:0)
  store dest:%1638(int32) value:%1628(int32) align=1
  %1639(int32). binop op:add(0) %1057(int32) %76(int32) (flags:0)
  store dest:%1639(int32) value:%1057(int32) align=1
  %1640(int32). binop op:add(0) %1057(int32) %75(int32) (flags:0)
  store dest:%1640(int32) value:%1057(int32) align=1
  br 359
bb:355 (succs:)
  call %3(void()) args:
  unreachable
bb:356 (succs: 357 358)
 defs: [%1641,%1648]
  %1641(int32). phi bb:349=>%1612(int32) bb:351=>%1633(int32)
  %1642(int32). binop op:add(0) %1641(int32) %75(int32) (flags:0)
  %1643(int32). load src:%1642(int32) align=1
  %1644(int32). binop op:add(0) %64(int32) %74(int32) (flags:0)
  %1645(int32). load src:%1644(int32) align=1
  %1646(int1). cmp2 op:icmp_uge(35) %1641(int32) %1645(int32)
  %1647(int1). cmp2 op:icmp_uge(35) %1643(int32) %1645(int32)
  %1648(int1). binop op:and(10) %1646(int1) %1647(int1) (flags:0)
  br %1648(int1) ? 357 : 358
bb:357 (succs: 359)
 defs: [%1649,%1652]
  %1649(int32). binop op:add(0) %1643(int32) %76(int32) (flags:0)
  store dest:%1649(int32) value:%1057(int32) align=1
  store dest:%1642(int32) value:%1057(int32) align=1
  %1650(int32). binop op:add(0) %1057(int32) %75(int32) (flags:0)
  store dest:%1650(int32) value:%1643(int32) align=1
  %1651(int32). binop op:add(0) %1057(int32) %76(int32) (flags:0)
  store dest:%1651(int32) value:%1641(int32) align=1
  %1652(int32). binop op:add(0) %1057(int32) %78(int32) (flags:0)
  store dest:%1652(int32) value:%71(int32) align=1
  br 359
bb:358 (succs:)
  call %3(void()) args:
  unreachable
bb:359 (succs: 360 361)
 defs: [%1653,%1655]
  %1653(int32). binop op:add(0) %64(int32) %76(int32) (flags:0)
  %1654(int32). load src:%1653(int32) align=1
  %1655(int1). cmp2 op:icmp_ugt(34) %1654(int32) %868(int32)
  br %1655(int1) ? 360 : 361
bb:360 (succs: 362)
 defs: [%1656,%1667]
  %1656(int32). binop op:sub(1) %1654(int32) %868(int32) (flags:0)
  %1657(int32). binop op:add(0) %64(int32) %76(int32) (flags:0)
  store dest:%1657(int32) value:%1656(int32) align=1
  %1658(int32). binop op:add(0) %64(int32) %78(int32) (flags:0)
  %1659(int32). load src:%1658(int32) align=1
  %1660(int32). binop op:add(0) %1659(int32) %868(int32) (flags:0)
  %1661(int32). binop op:add(0) %64(int32) %78(int32) (flags:0)
  store dest:%1661(int32) value:%1660(int32) align=1
  %1662(int32). binop op:or(11) %1656(int32) %73(int32) (flags:0)
  %1663(int32). binop op:add(0) %868(int32) %72(int32) (flags:0)
  %1664(int32). binop op:add(0) %1659(int32) %1663(int32) (flags:0)
  store dest:%1664(int32) value:%1662(int32) align=1
  %1665(int32). binop op:or(11) %868(int32) %82(int32) (flags:0)
  %1666(int32). binop op:add(0) %1659(int32) %72(int32) (flags:0)
  store dest:%1666(int32) value:%1665(int32) align=1
  %1667(int32). binop op:add(0) %1659(int32) %75(int32) (flags:0)
  br 362
bb:361 (succs: 362)
 defs: [%1668,%1670]
  %1668(int32). call %33(int32())(llvm.nacl.read.tp) args:
  %1669(int32). binop op:add(0) %1668(int32) %89(int32) (flags:0)
  %1670(int32). load src:%1669(int32) align=1
  store dest:%1670(int32) value:%76(int32) align=1
  br 362
bb:362 (succs: 364 363)
 defs: [%1671,%1675]
  %1671(int32). phi bb:32=>%226(int32) bb:47=>%286(int32) bb:98=>%518(int32) bb:185=>%893(int32) bb:187=>%908(int32) bb:180=>%867(int32) bb:360=>%1667(int32) bb:361=>%71(int32) bb:325=>%1481(int32) bb:216=>%1020(int32) bb:217=>%71(int32) bb:219=>%71(int32)
  %1672(int32). binop op:add(0) %64(int32) %93(int32) (flags:0)
  %1673(int32). load src:%1672(int32) align=1
  %1674(int32). binop op:and(10) %1673(int32) %79(int32) (flags:0)
  %1675(int1). cmp2 op:icmp_eq(32) %1674(int32) %71(int32)
  br %1675(int1) ? 364 : 363
bb:363 (succs: 364)
 defs: [%1676,%1676]
  %1676(int32). binop op:add(0) %64(int32) %91(int32) (flags:0)
  call %38(void(int32,int32,int32))(llvm.nacl.atomic.store.i32) args: %71(int32) %1676(int32) %72(int32)
  br 364
bb:364 (succs:)
  ret %1671(int32)
*** END BLOCK
*** SUBBLOCK FUNCTION (12)
function %30
  %70. function arg 0
num bbs:186
*** SUBBLOCK CONSTANTS (11)
  constants settype 0 (int32)
  %71. integer 0
  %72. integer 4
  %73. integer 16
  %74. integer 1
  %75. integer 8
  %76. integer 12
  %77. integer 20
  %78. integer 24
  %79. integer 6
  %80. integer -1
  %81. integer -8
  %82. integer 2
  %83. integer 40
  %84. integer 3
  %85. integer 28
  %86. integer 448
  %87. integer -1144
  %88. integer 7
  %89. integer 432
  %90. integer 444
  %91. integer -4
  %92. integer 256
  %93. integer 304
  %94. integer 31
  %95. integer 63
  %96. integer -2
  %97. integer 452
  %98. integer 32
  %99. integer 65536
  %100. integer 262144
  %101. integer 2097152
  %102. integer -16
  %103. integer 1431655768
  %104. integer -41
  %105. integer 9
  %106. integer 16777215
  %107. integer 1048320
  %108. integer 520192
  %109. integer 245760
  %110. integer 14
  %111. integer 15
  %112. integer 25
*** END BLOCK
bb:0 (succs: 185 1)
 defs: [%113,%115]
  %113(int32). alloca %72(int32) align=4
  %114(int32). alloca %72(int32) align=4
  %115(int1). cmp2 op:icmp_eq(32) %70(int32) %71(int32)
  br %115(int1) ? 185 : 1
bb:1 (succs: 8 2)
 defs: [%116,%120]
  %116(int32). binop op:add(0) %70(int32) %81(int32) (flags:0)
  %117(int32). binop op:add(0) %64(int32) %90(int32) (flags:0)
  %118(int32). load src:%117(int32) align=1
  %119(int32). binop op:and(10) %118(int32) %82(int32) (flags:0)
  %120(int1). cmp2 op:icmp_eq(32) %119(int32) %71(int32)
  br %120(int1) ? 8 : 2
bb:2 (succs: 8 3)
 defs: [%121,%123]
  %121(int32). binop op:add(0) %64(int32) %86(int32) (flags:0)
  %122(int32). call %36(int32(int32,int32,int32,int32))(llvm.nacl.atomic.rmw.i32) args: %79(int32) %121(int32) %74(int32) %79(int32)
  %123(int1). cmp2 op:icmp_eq(32) %122(int32) %71(int32)
  br %123(int1) ? 8 : 3
bb:3 (succs: 4 5)
 defs: [%124,%127]
  forwardtyperef %131(int32) int32
  %124(int32). phi bb:2=>%71(int32) bb:5=>%131(int32) bb:6=>%131(int32) bb:7=>%131(int32)
  %125(int32). binop op:add(0) %64(int32) %86(int32) (flags:0)
  %126(int32). call %37(int32(int32,int32))(llvm.nacl.atomic.load.i32) args: %125(int32) %79(int32)
  %127(int1). cmp2 op:icmp_eq(32) %126(int32) %71(int32)
  br %127(int1) ? 4 : 5
bb:4 (succs: 8 5)
 defs: [%128,%130]
  %128(int32). binop op:add(0) %64(int32) %86(int32) (flags:0)
  %129(int32). call %36(int32(int32,int32,int32,int32))(llvm.nacl.atomic.rmw.i32) args: %79(int32) %128(int32) %74(int32) %79(int32)
  %130(int1). cmp2 op:icmp_eq(32) %129(int32) %71(int32)
  br %130(int1) ? 8 : 5
bb:5 (succs: 6 3)
 defs: [%131,%133]
  %131(int32). binop op:add(0) %124(int32) %74(int32) (flags:0)
  %132(int32). binop op:and(10) %131(int32) %95(int32) (flags:0)
  %133(int1). cmp2 op:icmp_eq(32) %132(int32) %71(int32)
  br %133(int1) ? 6 : 3
bb:6 (succs: 3 7)
 defs: [%134,%137]
  %134(int32). binop op:add(0) %46(int32) %73(int32) (flags:0)
  %135(int32). load src:%134(int32) align=1
  %136(int32). call indirect %135(int32) args:
  %137(int1). cmp2 op:icmp_eq(32) %136(int32) %71(int32)
  br %137(int1) ? 3 : 7
bb:7 (succs: 3)
 defs: [%138,%140]
  %138(int32). call %33(int32())(llvm.nacl.read.tp) args:
  %139(int32). binop op:add(0) %138(int32) %87(int32) (flags:0)
  %140(int32). load src:%139(int32) align=1
  store dest:%140(int32) value:%136(int32) align=1
  br 3
bb:8 (succs: 182 9)
 defs: [%141,%143]
  %141(int32). binop op:add(0) %64(int32) %73(int32) (flags:0)
  %142(int32). load src:%141(int32) align=1
  %143(int1). cmp2 op:icmp_ult(36) %116(int32) %142(int32)
  br %143(int1) ? 182 : 9
bb:9 (succs: 182 10)
 defs: [%144,%147]
  %144(int32). binop op:add(0) %70(int32) %91(int32) (flags:0)
  %145(int32). load src:%144(int32) align=1
  %146(int32). binop op:and(10) %145(int32) %84(int32) (flags:0)
  %147(int1). cmp2 op:icmp_eq(32) %146(int32) %74(int32)
  br %147(int1) ? 182 : 10
bb:10 (succs: 11 65)
 defs: [%148,%152]
  %148(int32). binop op:and(10) %145(int32) %81(int32) (flags:0)
  %149(int32). binop op:add(0) %148(int32) %81(int32) (flags:0)
  %150(int32). binop op:add(0) %70(int32) %149(int32) (flags:0)
  %151(int32). binop op:and(10) %145(int32) %74(int32) (flags:0)
  %152(int1). cmp2 op:icmp_eq(32) %151(int32) %71(int32)
  br %152(int1) ? 11 : 65
bb:11 (succs: 12 15)
 defs: [%153,%154]
  %153(int32). load src:%116(int32) align=1
  %154(int1). cmp2 op:icmp_eq(32) %146(int32) %71(int32)
  br %154(int1) ? 12 : 15
bb:12 (succs: 14 13)
 defs: [%155,%162]
  %155(int32). binop op:add(0) %148(int32) %73(int32) (flags:0)
  %156(int32). binop op:add(0) %155(int32) %153(int32) (flags:0)
  %157(int32). binop op:sub(1) %81(int32) %153(int32) (flags:0)
  %158(int32). binop op:add(0) %70(int32) %157(int32) (flags:0)
  %159(int32). binop op:add(0) %47(int32) %72(int32) (flags:0)
  %160(int32). load src:%159(int32) align=1
  %161(int32). call indirect %160(int32) args: %158(int32) %156(int32)
  %162(int1). cmp2 op:icmp_eq(32) %161(int32) %71(int32)
  br %162(int1) ? 14 : 13
bb:13 (succs: 183)
 defs: [%163,%165]
  %163(int32). call %33(int32())(llvm.nacl.read.tp) args:
  %164(int32). binop op:add(0) %163(int32) %87(int32) (flags:0)
  %165(int32). load src:%164(int32) align=1
  store dest:%165(int32) value:%161(int32) align=1
  br 183
bb:14 (succs: 183)
 defs: [%166,%169]
  %166(int32). binop op:add(0) %64(int32) %89(int32) (flags:0)
  %167(int32). load src:%166(int32) align=1
  %168(int32). binop op:sub(1) %167(int32) %156(int32) (flags:0)
  %169(int32). binop op:add(0) %64(int32) %89(int32) (flags:0)
  store dest:%169(int32) value:%168(int32) align=1
  br 183
bb:15 (succs: 182 16)
 defs: [%170,%173]
  %170(int32). binop op:sub(1) %81(int32) %153(int32) (flags:0)
  %171(int32). binop op:add(0) %70(int32) %170(int32) (flags:0)
  %172(int32). binop op:add(0) %153(int32) %148(int32) (flags:0)
  %173(int1). cmp2 op:icmp_ult(36) %171(int32) %142(int32)
  br %173(int1) ? 182 : 16
bb:16 (succs: 63 17)
 defs: [%174,%176]
  %174(int32). binop op:add(0) %64(int32) %77(int32) (flags:0)
  %175(int32). load src:%174(int32) align=1
  %176(int1). cmp2 op:icmp_eq(32) %171(int32) %175(int32)
  br %176(int1) ? 63 : 17
bb:17 (succs: 18 30)
 defs: [%177,%178]
  %177(int32). binop op:lshr(8) %153(int32) %84(int32) (flags:0)
  %178(int1). cmp2 op:icmp_ult(36) %153(int32) %92(int32)
  br %178(int1) ? 18 : 30
bb:18 (succs: 21 19)
 defs: [%179,%189]
  %179(int32). binop op:add(0) %170(int32) %75(int32) (flags:0)
  %180(int32). binop op:add(0) %70(int32) %179(int32) (flags:0)
  %181(int32). load src:%180(int32) align=1
  %182(int32). binop op:add(0) %170(int32) %76(int32) (flags:0)
  %183(int32). binop op:add(0) %70(int32) %182(int32) (flags:0)
  %184(int32). load src:%183(int32) align=1
  %185(int32). binop op:shl(7) %177(int32) %74(int32) (flags:0)
  %186(int32). binop op:add(0) %64(int32) %83(int32) (flags:0)
  %187(int32). binop op:mul(2) %185(int32) %72(int32) (flags:0)
  %188(int32). binop op:add(0) %186(int32) %187(int32) (flags:0)
  %189(int1). cmp2 op:icmp_eq(32) %181(int32) %188(int32)
  br %189(int1) ? 21 : 19
bb:19 (succs: 29 20)
 defs: [%190,%190]
  %190(int1). cmp2 op:icmp_ult(36) %181(int32) %142(int32)
  br %190(int1) ? 29 : 20
bb:20 (succs: 21 29)
 defs: [%191,%193]
  %191(int32). binop op:add(0) %181(int32) %76(int32) (flags:0)
  %192(int32). load src:%191(int32) align=1
  %193(int1). cmp2 op:icmp_eq(32) %192(int32) %171(int32)
  br %193(int1) ? 21 : 29
bb:21 (succs: 22 23)
 defs: [%194,%194]
  %194(int1). cmp2 op:icmp_eq(32) %184(int32) %181(int32)
  br %194(int1) ? 22 : 23
bb:22 (succs: 65)
 defs: [%195,%198]
  %195(int32). binop op:shl(7) %74(int32) %177(int32) (flags:0)
  %196(int32). binop op:xor(12) %195(int32) %80(int32) (flags:0)
  %197(int32). load src:%64(int32) align=1
  %198(int32). binop op:and(10) %197(int32) %196(int32) (flags:0)
  store dest:%64(int32) value:%198(int32) align=1
  br 65
bb:23 (succs: 24 25)
 defs: [%199,%199]
  %199(int1). cmp2 op:icmp_eq(32) %184(int32) %188(int32)
  br %199(int1) ? 24 : 25
bb:24 (succs: 27)
 defs: [%200,%200]
  %200(int32). binop op:add(0) %184(int32) %75(int32) (flags:0)
  br 27
bb:25 (succs: 28 26)
 defs: [%201,%201]
  %201(int1). cmp2 op:icmp_ult(36) %184(int32) %142(int32)
  br %201(int1) ? 28 : 26
bb:26 (succs: 27 28)
 defs: [%202,%204]
  %202(int32). binop op:add(0) %184(int32) %75(int32) (flags:0)
  %203(int32). load src:%202(int32) align=1
  %204(int1). cmp2 op:icmp_eq(32) %203(int32) %171(int32)
  br %204(int1) ? 27 : 28
bb:27 (succs: 65)
 defs: [%205,%206]
  %205(int32). phi bb:24=>%200(int32) bb:26=>%202(int32)
  %206(int32). binop op:add(0) %181(int32) %76(int32) (flags:0)
  store dest:%206(int32) value:%184(int32) align=1
  store dest:%205(int32) value:%181(int32) align=1
  br 65
bb:28 (succs:)
  call %3(void()) args:
  unreachable
bb:29 (succs:)
  call %3(void()) args:
  unreachable
bb:30 (succs: 36 31)
 defs: [%207,%213]
  %207(int32). binop op:add(0) %170(int32) %78(int32) (flags:0)
  %208(int32). binop op:add(0) %70(int32) %207(int32) (flags:0)
  %209(int32). load src:%208(int32) align=1
  %210(int32). binop op:add(0) %170(int32) %76(int32) (flags:0)
  %211(int32). binop op:add(0) %70(int32) %210(int32) (flags:0)
  %212(int32). load src:%211(int32) align=1
  %213(int1). cmp2 op:icmp_eq(32) %212(int32) %171(int32)
  br %213(int1) ? 36 : 31
bb:31 (succs: 35 32)
 defs: [%214,%217]
  %214(int32). binop op:add(0) %170(int32) %75(int32) (flags:0)
  %215(int32). binop op:add(0) %70(int32) %214(int32) (flags:0)
  %216(int32). load src:%215(int32) align=1
  %217(int1). cmp2 op:icmp_ult(36) %216(int32) %142(int32)
  br %217(int1) ? 35 : 32
bb:32 (succs: 33 35)
 defs: [%218,%220]
  %218(int32). binop op:add(0) %216(int32) %76(int32) (flags:0)
  %219(int32). load src:%218(int32) align=1
  %220(int1). cmp2 op:icmp_eq(32) %219(int32) %171(int32)
  br %220(int1) ? 33 : 35
bb:33 (succs: 34 35)
 defs: [%221,%223]
  %221(int32). binop op:add(0) %212(int32) %75(int32) (flags:0)
  %222(int32). load src:%221(int32) align=1
  %223(int1). cmp2 op:icmp_eq(32) %222(int32) %171(int32)
  br %223(int1) ? 34 : 35
bb:34 (succs: 43)
  store dest:%218(int32) value:%212(int32) align=1
  store dest:%221(int32) value:%216(int32) align=1
  br 43
bb:35 (succs:)
  call %3(void()) args:
  unreachable
bb:36 (succs: 37 38)
 defs: [%224,%227]
  %224(int32). binop op:add(0) %170(int32) %77(int32) (flags:0)
  %225(int32). binop op:add(0) %70(int32) %224(int32) (flags:0)
  %226(int32). load src:%225(int32) align=1
  %227(int1). cmp2 op:icmp_eq(32) %226(int32) %71(int32)
  br %227(int1) ? 37 : 38
bb:37 (succs: 43 38)
 defs: [%228,%231]
  %228(int32). binop op:add(0) %170(int32) %73(int32) (flags:0)
  %229(int32). binop op:add(0) %70(int32) %228(int32) (flags:0)
  %230(int32). load src:%229(int32) align=1
  %231(int1). cmp2 op:icmp_eq(32) %230(int32) %71(int32)
  br %231(int1) ? 43 : 38
bb:38 (succs: 39 38)
 defs: [%232,%236]
  forwardtyperef %234(int32) int32
  forwardtyperef %237(int32) int32
  %232(int32). phi bb:36=>%225(int32) bb:37=>%229(int32) bb:38=>%234(int32) bb:39=>%237(int32)
  forwardtyperef %235(int32) int32
  forwardtyperef %238(int32) int32
  %233(int32). phi bb:36=>%226(int32) bb:37=>%230(int32) bb:38=>%235(int32) bb:39=>%238(int32)
  %234(int32). binop op:add(0) %233(int32) %77(int32) (flags:0)
  %235(int32). load src:%234(int32) align=1
  %236(int1). cmp2 op:icmp_eq(32) %235(int32) %71(int32)
  br %236(int1) ? 39 : 38
bb:39 (succs: 40 38)
 defs: [%237,%239]
  %237(int32). binop op:add(0) %233(int32) %73(int32) (flags:0)
  %238(int32). load src:%237(int32) align=1
  %239(int1). cmp2 op:icmp_eq(32) %238(int32) %71(int32)
  br %239(int1) ? 40 : 38
bb:40 (succs: 42 41)
 defs: [%240,%240]
  %240(int1). cmp2 op:icmp_ult(36) %232(int32) %142(int32)
  br %240(int1) ? 42 : 41
bb:41 (succs: 43)
  store dest:%232(int32) value:%71(int32) align=1
  br 43
bb:42 (succs:)
  call %3(void()) args:
  unreachable
bb:43 (succs: 65 44)
 defs: [%241,%242]
  %241(int32). phi bb:34=>%212(int32) bb:41=>%233(int32) bb:37=>%71(int32)
  %242(int1). cmp2 op:icmp_eq(32) %209(int32) %71(int32)
  br %242(int1) ? 65 : 44
bb:44 (succs: 45 47)
 defs: [%243,%250]
  %243(int32). binop op:add(0) %170(int32) %85(int32) (flags:0)
  %244(int32). binop op:add(0) %70(int32) %243(int32) (flags:0)
  %245(int32). load src:%244(int32) align=1
  %246(int32). binop op:add(0) %64(int32) %93(int32) (flags:0)
  %247(int32). binop op:mul(2) %245(int32) %72(int32) (flags:0)
  %248(int32). binop op:add(0) %246(int32) %247(int32) (flags:0)
  %249(int32). load src:%248(int32) align=1
  %250(int1). cmp2 op:icmp_eq(32) %171(int32) %249(int32)
  br %250(int1) ? 45 : 47
bb:45 (succs: 46 53)
 defs: [%251,%251]
  store dest:%248(int32) value:%241(int32) align=1
  %251(int1). cmp2 op:icmp_eq(32) %241(int32) %71(int32)
  br %251(int1) ? 46 : 53
bb:46 (succs: 65)
 defs: [%252,%257]
  %252(int32). binop op:shl(7) %74(int32) %245(int32) (flags:0)
  %253(int32). binop op:xor(12) %252(int32) %80(int32) (flags:0)
  %254(int32). binop op:add(0) %64(int32) %72(int32) (flags:0)
  %255(int32). load src:%254(int32) align=1
  %256(int32). binop op:and(10) %255(int32) %253(int32) (flags:0)
  %257(int32). binop op:add(0) %64(int32) %72(int32) (flags:0)
  store dest:%257(int32) value:%256(int32) align=1
  br 65
bb:47 (succs: 51 48)
 defs: [%258,%260]
  %258(int32). binop op:add(0) %64(int32) %73(int32) (flags:0)
  %259(int32). load src:%258(int32) align=1
  %260(int1). cmp2 op:icmp_ult(36) %209(int32) %259(int32)
  br %260(int1) ? 51 : 48
bb:48 (succs: 49 50)
 defs: [%261,%263]
  %261(int32). binop op:add(0) %209(int32) %73(int32) (flags:0)
  %262(int32). load src:%261(int32) align=1
  %263(int1). cmp2 op:icmp_eq(32) %262(int32) %171(int32)
  br %263(int1) ? 49 : 50
bb:49 (succs: 52)
  store dest:%261(int32) value:%241(int32) align=1
  br 52
bb:50 (succs: 52)
 defs: [%264,%264]
  %264(int32). binop op:add(0) %209(int32) %77(int32) (flags:0)
  store dest:%264(int32) value:%241(int32) align=1
  br 52
bb:51 (succs:)
  call %3(void()) args:
  unreachable
bb:52 (succs: 65 53)
 defs: [%265,%265]
  %265(int1). cmp2 op:icmp_eq(32) %241(int32) %71(int32)
  br %265(int1) ? 65 : 53
bb:53 (succs: 62 54)
 defs: [%266,%268]
  %266(int32). binop op:add(0) %64(int32) %73(int32) (flags:0)
  %267(int32). load src:%266(int32) align=1
  %268(int1). cmp2 op:icmp_ult(36) %241(int32) %267(int32)
  br %268(int1) ? 62 : 54
bb:54 (succs: 58 55)
 defs: [%269,%273]
  %269(int32). binop op:add(0) %241(int32) %78(int32) (flags:0)
  store dest:%269(int32) value:%209(int32) align=1
  %270(int32). binop op:add(0) %170(int32) %73(int32) (flags:0)
  %271(int32). binop op:add(0) %70(int32) %270(int32) (flags:0)
  %272(int32). load src:%271(int32) align=1
  %273(int1). cmp2 op:icmp_eq(32) %272(int32) %71(int32)
  br %273(int1) ? 58 : 55
bb:55 (succs: 57 56)
 defs: [%274,%274]
  %274(int1). cmp2 op:icmp_ult(36) %272(int32) %267(int32)
  br %274(int1) ? 57 : 56
bb:56 (succs: 58)
 defs: [%275,%276]
  %275(int32). binop op:add(0) %241(int32) %73(int32) (flags:0)
  store dest:%275(int32) value:%272(int32) align=1
  %276(int32). binop op:add(0) %272(int32) %78(int32) (flags:0)
  store dest:%276(int32) value:%241(int32) align=1
  br 58
bb:57 (succs:)
  call %3(void()) args:
  unreachable
bb:58 (succs: 65 59)
 defs: [%277,%280]
  %277(int32). binop op:add(0) %170(int32) %77(int32) (flags:0)
  %278(int32). binop op:add(0) %70(int32) %277(int32) (flags:0)
  %279(int32). load src:%278(int32) align=1
  %280(int1). cmp2 op:icmp_eq(32) %279(int32) %71(int32)
  br %280(int1) ? 65 : 59
bb:59 (succs: 61 60)
 defs: [%281,%283]
  %281(int32). binop op:add(0) %64(int32) %73(int32) (flags:0)
  %282(int32). load src:%281(int32) align=1
  %283(int1). cmp2 op:icmp_ult(36) %279(int32) %282(int32)
  br %283(int1) ? 61 : 60
bb:60 (succs: 65)
 defs: [%284,%285]
  %284(int32). binop op:add(0) %241(int32) %77(int32) (flags:0)
  store dest:%284(int32) value:%279(int32) align=1
  %285(int32). binop op:add(0) %279(int32) %78(int32) (flags:0)
  store dest:%285(int32) value:%241(int32) align=1
  br 65
bb:61 (succs:)
  call %3(void()) args:
  unreachable
bb:62 (succs:)
  call %3(void()) args:
  unreachable
bb:63 (succs: 64 65)
 defs: [%286,%290]
  %286(int32). binop op:add(0) %148(int32) %91(int32) (flags:0)
  %287(int32). binop op:add(0) %70(int32) %286(int32) (flags:0)
  %288(int32). load src:%287(int32) align=1
  %289(int32). binop op:and(10) %288(int32) %84(int32) (flags:0)
  %290(int1). cmp2 op:icmp_eq(32) %289(int32) %84(int32)
  br %290(int1) ? 64 : 65
bb:64 (succs: 183)
 defs: [%291,%295]
  %291(int32). binop op:add(0) %64(int32) %75(int32) (flags:0)
  store dest:%291(int32) value:%172(int32) align=1
  %292(int32). binop op:and(10) %288(int32) %96(int32) (flags:0)
  store dest:%287(int32) value:%292(int32) align=1
  %293(int32). binop op:or(11) %172(int32) %74(int32) (flags:0)
  %294(int32). binop op:add(0) %170(int32) %72(int32) (flags:0)
  %295(int32). binop op:add(0) %70(int32) %294(int32) (flags:0)
  store dest:%295(int32) value:%293(int32) align=1
  store dest:%150(int32) value:%172(int32) align=1
  br 183
bb:65 (succs: 66 182)
 defs: [%296,%298]
  %296(int32). phi bb:10=>%148(int32) bb:22=>%172(int32) bb:27=>%172(int32) bb:60=>%172(int32) bb:58=>%172(int32) bb:52=>%172(int32) bb:43=>%172(int32) bb:63=>%172(int32) bb:46=>%172(int32)
  %297(int32). phi bb:10=>%116(int32) bb:22=>%171(int32) bb:27=>%171(int32) bb:60=>%171(int32) bb:58=>%171(int32) bb:52=>%171(int32) bb:43=>%171(int32) bb:63=>%171(int32) bb:46=>%171(int32)
  %298(int1). cmp2 op:icmp_ult(36) %297(int32) %150(int32)
  br %298(int1) ? 66 : 182
bb:66 (succs: 182 67)
 defs: [%299,%303]
  %299(int32). binop op:add(0) %148(int32) %91(int32) (flags:0)
  %300(int32). binop op:add(0) %70(int32) %299(int32) (flags:0)
  %301(int32). load src:%300(int32) align=1
  %302(int32). binop op:and(10) %301(int32) %74(int32) (flags:0)
  %303(int1). cmp2 op:icmp_eq(32) %302(int32) %71(int32)
  br %303(int1) ? 182 : 67
bb:67 (succs: 68 156)
 defs: [%304,%305]
  %304(int32). binop op:and(10) %301(int32) %82(int32) (flags:0)
  %305(int1). cmp2 op:icmp_eq(32) %304(int32) %71(int32)
  br %305(int1) ? 68 : 156
bb:68 (succs: 69 106)
 defs: [%306,%308]
  %306(int32). binop op:add(0) %64(int32) %78(int32) (flags:0)
  %307(int32). load src:%306(int32) align=1
  %308(int1). cmp2 op:icmp_eq(32) %150(int32) %307(int32)
  br %308(int1) ? 69 : 106
bb:69 (succs: 70 71)
 defs: [%309,%318]
  %309(int32). binop op:add(0) %64(int32) %76(int32) (flags:0)
  %310(int32). load src:%309(int32) align=1
  %311(int32). binop op:add(0) %310(int32) %296(int32) (flags:0)
  %312(int32). binop op:add(0) %64(int32) %76(int32) (flags:0)
  store dest:%312(int32) value:%311(int32) align=1
  %313(int32). binop op:add(0) %64(int32) %78(int32) (flags:0)
  store dest:%313(int32) value:%297(int32) align=1
  %314(int32). binop op:or(11) %311(int32) %74(int32) (flags:0)
  %315(int32). binop op:add(0) %297(int32) %72(int32) (flags:0)
  store dest:%315(int32) value:%314(int32) align=1
  %316(int32). binop op:add(0) %64(int32) %77(int32) (flags:0)
  %317(int32). load src:%316(int32) align=1
  %318(int1). cmp2 op:icmp_eq(32) %297(int32) %317(int32)
  br %318(int1) ? 70 : 71
bb:70 (succs: 71)
 defs: [%319,%320]
  %319(int32). binop op:add(0) %64(int32) %77(int32) (flags:0)
  store dest:%319(int32) value:%71(int32) align=1
  %320(int32). binop op:add(0) %64(int32) %75(int32) (flags:0)
  store dest:%320(int32) value:%71(int32) align=1
  br 71
bb:71 (succs: 72 183)
 defs: [%321,%323]
  %321(int32). binop op:add(0) %64(int32) %85(int32) (flags:0)
  %322(int32). load src:%321(int32) align=1
  %323(int1). cmp2 op:icmp_ugt(34) %311(int32) %322(int32)
  br %323(int1) ? 72 : 183
bb:72 (succs: 73 87)
 defs: [%324,%325]
  %324(int32). load src:%63(int32) align=1
  %325(int1). cmp2 op:icmp_eq(32) %324(int32) %71(int32)
  br %325(int1) ? 73 : 87
bb:73 (succs: 79 74)
 defs: [%326,%327]
  %326(int32). call %36(int32(int32,int32,int32,int32))(llvm.nacl.atomic.rmw.i32) args: %79(int32) %65(int32) %74(int32) %79(int32)
  %327(int1). cmp2 op:icmp_eq(32) %326(int32) %71(int32)
  br %327(int1) ? 79 : 74
bb:74 (succs: 75 76)
 defs: [%328,%330]
  forwardtyperef %333(int32) int32
  %328(int32). phi bb:73=>%71(int32) bb:76=>%333(int32) bb:78=>%333(int32) bb:77=>%333(int32)
  %329(int32). call %37(int32(int32,int32))(llvm.nacl.atomic.load.i32) args: %65(int32) %79(int32)
  %330(int1). cmp2 op:icmp_eq(32) %329(int32) %71(int32)
  br %330(int1) ? 75 : 76
bb:75 (succs: 79 76)
 defs: [%331,%332]
  %331(int32). call %36(int32(int32,int32,int32,int32))(llvm.nacl.atomic.rmw.i32) args: %79(int32) %65(int32) %74(int32) %79(int32)
  %332(int1). cmp2 op:icmp_eq(32) %331(int32) %71(int32)
  br %332(int1) ? 79 : 76
bb:76 (succs: 77 74)
 defs: [%333,%335]
  %333(int32). binop op:add(0) %328(int32) %74(int32) (flags:0)
  %334(int32). binop op:and(10) %333(int32) %95(int32) (flags:0)
  %335(int1). cmp2 op:icmp_eq(32) %334(int32) %71(int32)
  br %335(int1) ? 77 : 74
bb:77 (succs: 74 78)
 defs: [%336,%339]
  %336(int32). binop op:add(0) %46(int32) %73(int32) (flags:0)
  %337(int32). load src:%336(int32) align=1
  %338(int32). call indirect %337(int32) args:
  %339(int1). cmp2 op:icmp_eq(32) %338(int32) %71(int32)
  br %339(int1) ? 74 : 78
bb:78 (succs: 74)
 defs: [%340,%342]
  %340(int32). call %33(int32())(llvm.nacl.read.tp) args:
  %341(int32). binop op:add(0) %340(int32) %87(int32) (flags:0)
  %342(int32). load src:%341(int32) align=1
  store dest:%342(int32) value:%338(int32) align=1
  br 74
bb:79 (succs: 80 86)
 defs: [%343,%344]
  %343(int32). load src:%63(int32) align=1
  %344(int1). cmp2 op:icmp_eq(32) %343(int32) %71(int32)
  br %344(int1) ? 80 : 86
bb:80 (succs: 82 81)
 defs: [%345,%348]
  %345(int32). binop op:add(0) %46(int32) %77(int32) (flags:0)
  %346(int32). load src:%345(int32) align=1
  %347(int32). call indirect %346(int32) args: %82(int32) %113(int32)
  %348(int1). cmp2 op:icmp_eq(32) %347(int32) %71(int32)
  br %348(int1) ? 82 : 81
bb:81 (succs: 83)
 defs: [%349,%351]
  %349(int32). call %33(int32())(llvm.nacl.read.tp) args:
  %350(int32). binop op:add(0) %349(int32) %87(int32) (flags:0)
  %351(int32). load src:%350(int32) align=1
  store dest:%351(int32) value:%347(int32) align=1
  br 83
bb:82 (succs: 83)
 defs: [%352,%352]
  %352(int32). load src:%113(int32) align=1
  br 83
bb:83 (succs: 85 84)
 defs: [%353,%356]
  %353(int32). phi bb:81=>%80(int32) bb:82=>%352(int32)
  %354(int32). binop op:add(0) %353(int32) %80(int32) (flags:0)
  %355(int32). binop op:and(10) %354(int32) %353(int32) (flags:0)
  %356(int1). cmp2 op:icmp_eq(32) %355(int32) %71(int32)
  br %356(int1) ? 85 : 84
bb:84 (succs:)
  call %3(void()) args:
  unreachable
bb:85 (succs: 86)
 defs: [%357,%365]
  %357(int32). binop op:add(0) %63(int32) %75(int32) (flags:0)
  store dest:%357(int32) value:%99(int32) align=1
  %358(int32). binop op:add(0) %63(int32) %72(int32) (flags:0)
  store dest:%358(int32) value:%353(int32) align=1
  %359(int32). binop op:add(0) %63(int32) %76(int32) (flags:0)
  store dest:%359(int32) value:%100(int32) align=1
  %360(int32). binop op:add(0) %63(int32) %73(int32) (flags:0)
  store dest:%360(int32) value:%101(int32) align=1
  %361(int32). binop op:add(0) %63(int32) %77(int32) (flags:0)
  store dest:%361(int32) value:%88(int32) align=1
  %362(int32). binop op:add(0) %64(int32) %90(int32) (flags:0)
  store dest:%362(int32) value:%88(int32) align=1
  %363(int32). binop op:add(0) %64(int32) %86(int32) (flags:0)
  store dest:%363(int32) value:%71(int32) align=1
  %364(int32). binop op:and(10) %114(int32) %102(int32) (flags:0)
  %365(int32). binop op:xor(12) %364(int32) %103(int32) (flags:0)
  store dest:%114(int32) value:%365(int32) align=1
  call %38(void(int32,int32,int32))(llvm.nacl.atomic.store.i32) args: %365(int32) %63(int32) %79(int32)
  br 86
bb:86 (succs: 183 87)
 defs: [%366,%368]
  call %38(void(int32,int32,int32))(llvm.nacl.atomic.store.i32) args: %71(int32) %65(int32) %72(int32)
  %366(int32). binop op:add(0) %64(int32) %78(int32) (flags:0)
  %367(int32). load src:%366(int32) align=1
  %368(int1). cmp2 op:icmp_eq(32) %367(int32) %71(int32)
  br %368(int1) ? 183 : 87
bb:87 (succs: 88 103)
 defs: [%369,%372]
  %369(int32). phi bb:86=>%367(int32) bb:72=>%297(int32)
  %370(int32). binop op:add(0) %64(int32) %76(int32) (flags:0)
  %371(int32). load src:%370(int32) align=1
  %372(int1). cmp2 op:icmp_ugt(34) %371(int32) %83(int32)
  br %372(int1) ? 88 : 103
bb:88 (succs: 89)
 defs: [%373,%380]
  %373(int32). binop op:add(0) %63(int32) %75(int32) (flags:0)
  %374(int32). load src:%373(int32) align=1
  %375(int32). binop op:add(0) %371(int32) %104(int32) (flags:0)
  %376(int32). binop op:add(0) %375(int32) %374(int32) (flags:0)
  %377(int32). binop op:udiv(3) %376(int32) %374(int32) (flags:0)
  %378(int32). binop op:add(0) %377(int32) %80(int32) (flags:0)
  %379(int32). binop op:mul(2) %378(int32) %374(int32) (flags:0)
  %380(int32). binop op:add(0) %64(int32) %97(int32) (flags:0)
  br 89
bb:89 (succs: 91 90)
 defs: [%381,%383]
  forwardtyperef %389(int32) int32
  %381(int32). phi bb:88=>%380(int32) bb:91=>%389(int32)
  %382(int32). load src:%381(int32) align=1
  %383(int1). cmp2 op:icmp_ugt(34) %382(int32) %369(int32)
  br %383(int1) ? 91 : 90
bb:90 (succs: 92 91)
 defs: [%384,%387]
  %384(int32). binop op:add(0) %381(int32) %72(int32) (flags:0)
  %385(int32). load src:%384(int32) align=1
  %386(int32). binop op:add(0) %382(int32) %385(int32) (flags:0)
  %387(int1). cmp2 op:icmp_ugt(34) %386(int32) %369(int32)
  br %387(int1) ? 92 : 91
bb:91 (succs: 92 89)
 defs: [%388,%390]
  %388(int32). binop op:add(0) %381(int32) %75(int32) (flags:0)
  %389(int32). load src:%388(int32) align=1
  %390(int1). cmp2 op:icmp_eq(32) %389(int32) %71(int32)
  br %390(int1) ? 92 : 89
bb:92 (succs: 93 103)
 defs: [%391,%395]
  %391(int32). phi bb:90=>%381(int32) bb:91=>%71(int32)
  %392(int32). binop op:add(0) %391(int32) %76(int32) (flags:0)
  %393(int32). load src:%392(int32) align=1
  %394(int32). binop op:and(10) %393(int32) %105(int32) (flags:0)
  %395(int1). cmp2 op:icmp_eq(32) %394(int32) %74(int32)
  br %395(int1) ? 93 : 103
bb:93 (succs: 103 94)
 defs: [%396,%398]
  %396(int32). binop op:add(0) %391(int32) %72(int32) (flags:0)
  %397(int32). load src:%396(int32) align=1
  %398(int1). cmp2 op:icmp_ult(36) %397(int32) %379(int32)
  br %398(int1) ? 103 : 94
bb:94 (succs: 95)
 defs: [%399,%401]
  %399(int32). load src:%391(int32) align=1
  %400(int32). binop op:add(0) %399(int32) %397(int32) (flags:0)
  %401(int32). binop op:add(0) %64(int32) %97(int32) (flags:0)
  br 95
bb:95 (succs: 103 96)
 defs: [%402,%405]
  forwardtyperef %407(int32) int32
  %402(int32). phi bb:94=>%401(int32) bb:96=>%407(int32)
  %403(int1). cmp2 op:icmp_uge(35) %402(int32) %399(int32)
  %404(int1). cmp2 op:icmp_ult(36) %402(int32) %400(int32)
  %405(int1). binop op:and(10) %403(int1) %404(int1) (flags:0)
  br %405(int1) ? 103 : 96
bb:96 (succs: 97 95)
 defs: [%406,%408]
  %406(int32). binop op:add(0) %402(int32) %75(int32) (flags:0)
  %407(int32). load src:%406(int32) align=1
  %408(int1). cmp2 op:icmp_eq(32) %407(int32) %71(int32)
  br %408(int1) ? 97 : 95
bb:97 (succs: 99 98)
 defs: [%409,%414]
  %409(int32). binop op:sub(1) %397(int32) %379(int32) (flags:0)
  %410(int32). binop op:add(0) %399(int32) %409(int32) (flags:0)
  %411(int32). binop op:add(0) %47(int32) %72(int32) (flags:0)
  %412(int32). load src:%411(int32) align=1
  %413(int32). call indirect %412(int32) args: %410(int32) %379(int32)
  %414(int1). cmp2 op:icmp_eq(32) %413(int32) %71(int32)
  br %414(int1) ? 99 : 98
bb:98 (succs: 103)
 defs: [%415,%417]
  %415(int32). call %33(int32())(llvm.nacl.read.tp) args:
  %416(int32). binop op:add(0) %415(int32) %87(int32) (flags:0)
  %417(int32). load src:%416(int32) align=1
  store dest:%417(int32) value:%413(int32) align=1
  br 103
bb:99 (succs: 103 100)
 defs: [%418,%418]
  %418(int1). cmp2 op:icmp_eq(32) %379(int32) %71(int32)
  br %418(int1) ? 103 : 100
bb:100 (succs: 102 101)
 defs: [%419,%432]
  %419(int32). load src:%396(int32) align=1
  %420(int32). binop op:sub(1) %419(int32) %379(int32) (flags:0)
  store dest:%396(int32) value:%420(int32) align=1
  %421(int32). binop op:add(0) %64(int32) %89(int32) (flags:0)
  %422(int32). load src:%421(int32) align=1
  %423(int32). binop op:sub(1) %422(int32) %379(int32) (flags:0)
  %424(int32). binop op:add(0) %64(int32) %89(int32) (flags:0)
  store dest:%424(int32) value:%423(int32) align=1
  %425(int32). binop op:add(0) %64(int32) %78(int32) (flags:0)
  %426(int32). load src:%425(int32) align=1
  %427(int32). binop op:add(0) %64(int32) %76(int32) (flags:0)
  %428(int32). load src:%427(int32) align=1
  %429(int32). binop op:sub(1) %428(int32) %379(int32) (flags:0)
  %430(int32). binop op:add(0) %426(int32) %75(int32) (flags:0)
  %431(int32). binop op:and(10) %430(int32) %88(int32) (flags:0)
  %432(int1). cmp2 op:icmp_eq(32) %431(int32) %71(int32)
  br %432(int1) ? 102 : 101
bb:101 (succs: 102)
 defs: [%433,%434]
  %433(int32). binop op:sub(1) %71(int32) %430(int32) (flags:0)
  %434(int32). binop op:and(10) %433(int32) %88(int32) (flags:0)
  br 102
bb:102 (succs: 103)
 defs: [%435,%447]
  %435(int32). phi bb:101=>%434(int32) bb:100=>%71(int32)
  %436(int32). binop op:add(0) %426(int32) %435(int32) (flags:0)
  %437(int32). binop op:sub(1) %429(int32) %435(int32) (flags:0)
  %438(int32). binop op:add(0) %64(int32) %78(int32) (flags:0)
  store dest:%438(int32) value:%436(int32) align=1
  %439(int32). binop op:add(0) %64(int32) %76(int32) (flags:0)
  store dest:%439(int32) value:%437(int32) align=1
  %440(int32). binop op:or(11) %437(int32) %74(int32) (flags:0)
  %441(int32). binop op:add(0) %435(int32) %72(int32) (flags:0)
  %442(int32). binop op:add(0) %426(int32) %441(int32) (flags:0)
  store dest:%442(int32) value:%440(int32) align=1
  %443(int32). binop op:add(0) %429(int32) %72(int32) (flags:0)
  %444(int32). binop op:add(0) %426(int32) %443(int32) (flags:0)
  store dest:%444(int32) value:%83(int32) align=1
  %445(int32). binop op:add(0) %63(int32) %73(int32) (flags:0)
  %446(int32). load src:%445(int32) align=1
  %447(int32). binop op:add(0) %64(int32) %85(int32) (flags:0)
  store dest:%447(int32) value:%446(int32) align=1
  br 103
bb:103 (succs: 104 183)
 defs: [%448,%451]
  %448(int32). phi bb:102=>%379(int32) bb:87=>%71(int32) bb:92=>%71(int32) bb:93=>%71(int32) bb:99=>%71(int32) bb:98=>%71(int32) bb:95=>%71(int32)
  %449(int32). call %31(int32()) args:
  %450(int32). binop op:sub(1) %71(int32) %448(int32) (flags:0)
  %451(int1). cmp2 op:icmp_eq(32) %449(int32) %450(int32)
  br %451(int1) ? 104 : 183
bb:104 (succs: 105 183)
 defs: [%452,%456]
  %452(int32). binop op:add(0) %64(int32) %76(int32) (flags:0)
  %453(int32). load src:%452(int32) align=1
  %454(int32). binop op:add(0) %64(int32) %85(int32) (flags:0)
  %455(int32). load src:%454(int32) align=1
  %456(int1). cmp2 op:icmp_ugt(34) %453(int32) %455(int32)
  br %456(int1) ? 105 : 183
bb:105 (succs: 183)
 defs: [%457,%457]
  %457(int32). binop op:add(0) %64(int32) %85(int32) (flags:0)
  store dest:%457(int32) value:%80(int32) align=1
  br 183
bb:106 (succs: 107 108)
 defs: [%458,%460]
  %458(int32). binop op:add(0) %64(int32) %77(int32) (flags:0)
  %459(int32). load src:%458(int32) align=1
  %460(int1). cmp2 op:icmp_eq(32) %150(int32) %459(int32)
  br %460(int1) ? 107 : 108
bb:107 (succs: 183)
 defs: [%461,%468]
  %461(int32). binop op:add(0) %64(int32) %75(int32) (flags:0)
  %462(int32). load src:%461(int32) align=1
  %463(int32). binop op:add(0) %462(int32) %296(int32) (flags:0)
  %464(int32). binop op:add(0) %64(int32) %75(int32) (flags:0)
  store dest:%464(int32) value:%463(int32) align=1
  %465(int32). binop op:add(0) %64(int32) %77(int32) (flags:0)
  store dest:%465(int32) value:%297(int32) align=1
  %466(int32). binop op:or(11) %463(int32) %74(int32) (flags:0)
  %467(int32). binop op:add(0) %297(int32) %72(int32) (flags:0)
  store dest:%467(int32) value:%466(int32) align=1
  %468(int32). binop op:add(0) %297(int32) %463(int32) (flags:0)
  store dest:%468(int32) value:%463(int32) align=1
  br 183
bb:108 (succs: 109 121)
 defs: [%469,%472]
  %469(int32). binop op:and(10) %301(int32) %81(int32) (flags:0)
  %470(int32). binop op:add(0) %469(int32) %296(int32) (flags:0)
  %471(int32). binop op:lshr(8) %301(int32) %84(int32) (flags:0)
  %472(int1). cmp2 op:icmp_ult(36) %301(int32) %92(int32)
  br %472(int1) ? 109 : 121
bb:109 (succs: 112 110)
 defs: [%473,%482]
  %473(int32). binop op:add(0) %70(int32) %148(int32) (flags:0)
  %474(int32). load src:%473(int32) align=1
  %475(int32). binop op:or(11) %148(int32) %72(int32) (flags:0)
  %476(int32). binop op:add(0) %70(int32) %475(int32) (flags:0)
  %477(int32). load src:%476(int32) align=1
  %478(int32). binop op:shl(7) %471(int32) %74(int32) (flags:0)
  %479(int32). binop op:add(0) %64(int32) %83(int32) (flags:0)
  %480(int32). binop op:mul(2) %478(int32) %72(int32) (flags:0)
  %481(int32). binop op:add(0) %479(int32) %480(int32) (flags:0)
  %482(int1). cmp2 op:icmp_eq(32) %474(int32) %481(int32)
  br %482(int1) ? 112 : 110
bb:110 (succs: 120 111)
 defs: [%483,%485]
  %483(int32). binop op:add(0) %64(int32) %73(int32) (flags:0)
  %484(int32). load src:%483(int32) align=1
  %485(int1). cmp2 op:icmp_ult(36) %474(int32) %484(int32)
  br %485(int1) ? 120 : 111
bb:111 (succs: 112 120)
 defs: [%486,%488]
  %486(int32). binop op:add(0) %474(int32) %76(int32) (flags:0)
  %487(int32). load src:%486(int32) align=1
  %488(int1). cmp2 op:icmp_eq(32) %487(int32) %150(int32)
  br %488(int1) ? 112 : 120
bb:112 (succs: 113 114)
 defs: [%489,%489]
  %489(int1). cmp2 op:icmp_eq(32) %477(int32) %474(int32)
  br %489(int1) ? 113 : 114
bb:113 (succs: 154)
 defs: [%490,%493]
  %490(int32). binop op:shl(7) %74(int32) %471(int32) (flags:0)
  %491(int32). binop op:xor(12) %490(int32) %80(int32) (flags:0)
  %492(int32). load src:%64(int32) align=1
  %493(int32). binop op:and(10) %492(int32) %491(int32) (flags:0)
  store dest:%64(int32) value:%493(int32) align=1
  br 154
bb:114 (succs: 115 116)
 defs: [%494,%494]
  %494(int1). cmp2 op:icmp_eq(32) %477(int32) %481(int32)
  br %494(int1) ? 115 : 116
bb:115 (succs: 118)
 defs: [%495,%495]
  %495(int32). binop op:add(0) %477(int32) %75(int32) (flags:0)
  br 118
bb:116 (succs: 119 117)
 defs: [%496,%498]
  %496(int32). binop op:add(0) %64(int32) %73(int32) (flags:0)
  %497(int32). load src:%496(int32) align=1
  %498(int1). cmp2 op:icmp_ult(36) %477(int32) %497(int32)
  br %498(int1) ? 119 : 117
bb:117 (succs: 118 119)
 defs: [%499,%501]
  %499(int32). binop op:add(0) %477(int32) %75(int32) (flags:0)
  %500(int32). load src:%499(int32) align=1
  %501(int1). cmp2 op:icmp_eq(32) %500(int32) %150(int32)
  br %501(int1) ? 118 : 119
bb:118 (succs: 154)
 defs: [%502,%503]
  %502(int32). phi bb:115=>%495(int32) bb:117=>%499(int32)
  %503(int32). binop op:add(0) %474(int32) %76(int32) (flags:0)
  store dest:%503(int32) value:%477(int32) align=1
  store dest:%502(int32) value:%474(int32) align=1
  br 154
bb:119 (succs:)
  call %3(void()) args:
  unreachable
bb:120 (succs:)
  call %3(void()) args:
  unreachable
bb:121 (succs: 127 122)
 defs: [%504,%510]
  %504(int32). binop op:add(0) %148(int32) %73(int32) (flags:0)
  %505(int32). binop op:add(0) %70(int32) %504(int32) (flags:0)
  %506(int32). load src:%505(int32) align=1
  %507(int32). binop op:or(11) %148(int32) %72(int32) (flags:0)
  %508(int32). binop op:add(0) %70(int32) %507(int32) (flags:0)
  %509(int32). load src:%508(int32) align=1
  %510(int1). cmp2 op:icmp_eq(32) %509(int32) %150(int32)
  br %510(int1) ? 127 : 122
bb:122 (succs: 126 123)
 defs: [%511,%515]
  %511(int32). binop op:add(0) %70(int32) %148(int32) (flags:0)
  %512(int32). load src:%511(int32) align=1
  %513(int32). binop op:add(0) %64(int32) %73(int32) (flags:0)
  %514(int32). load src:%513(int32) align=1
  %515(int1). cmp2 op:icmp_ult(36) %512(int32) %514(int32)
  br %515(int1) ? 126 : 123
bb:123 (succs: 124 126)
 defs: [%516,%518]
  %516(int32). binop op:add(0) %512(int32) %76(int32) (flags:0)
  %517(int32). load src:%516(int32) align=1
  %518(int1). cmp2 op:icmp_eq(32) %517(int32) %150(int32)
  br %518(int1) ? 124 : 126
bb:124 (succs: 125 126)
 defs: [%519,%521]
  %519(int32). binop op:add(0) %509(int32) %75(int32) (flags:0)
  %520(int32). load src:%519(int32) align=1
  %521(int1). cmp2 op:icmp_eq(32) %520(int32) %150(int32)
  br %521(int1) ? 125 : 126
bb:125 (succs: 134)
  store dest:%516(int32) value:%509(int32) align=1
  store dest:%519(int32) value:%512(int32) align=1
  br 134
bb:126 (succs:)
  call %3(void()) args:
  unreachable
bb:127 (succs: 128 129)
 defs: [%522,%525]
  %522(int32). binop op:add(0) %148(int32) %76(int32) (flags:0)
  %523(int32). binop op:add(0) %70(int32) %522(int32) (flags:0)
  %524(int32). load src:%523(int32) align=1
  %525(int1). cmp2 op:icmp_eq(32) %524(int32) %71(int32)
  br %525(int1) ? 128 : 129
bb:128 (succs: 134 129)
 defs: [%526,%529]
  %526(int32). binop op:add(0) %148(int32) %75(int32) (flags:0)
  %527(int32). binop op:add(0) %70(int32) %526(int32) (flags:0)
  %528(int32). load src:%527(int32) align=1
  %529(int1). cmp2 op:icmp_eq(32) %528(int32) %71(int32)
  br %529(int1) ? 134 : 129
bb:129 (succs: 130 129)
 defs: [%530,%534]
  forwardtyperef %532(int32) int32
  forwardtyperef %535(int32) int32
  %530(int32). phi bb:127=>%523(int32) bb:128=>%527(int32) bb:129=>%532(int32) bb:130=>%535(int32)
  forwardtyperef %533(int32) int32
  forwardtyperef %536(int32) int32
  %531(int32). phi bb:127=>%524(int32) bb:128=>%528(int32) bb:129=>%533(int32) bb:130=>%536(int32)
  %532(int32). binop op:add(0) %531(int32) %77(int32) (flags:0)
  %533(int32). load src:%532(int32) align=1
  %534(int1). cmp2 op:icmp_eq(32) %533(int32) %71(int32)
  br %534(int1) ? 130 : 129
bb:130 (succs: 131 129)
 defs: [%535,%537]
  %535(int32). binop op:add(0) %531(int32) %73(int32) (flags:0)
  %536(int32). load src:%535(int32) align=1
  %537(int1). cmp2 op:icmp_eq(32) %536(int32) %71(int32)
  br %537(int1) ? 131 : 129
bb:131 (succs: 133 132)
 defs: [%538,%540]
  %538(int32). binop op:add(0) %64(int32) %73(int32) (flags:0)
  %539(int32). load src:%538(int32) align=1
  %540(int1). cmp2 op:icmp_ult(36) %530(int32) %539(int32)
  br %540(int1) ? 133 : 132
bb:132 (succs: 134)
  store dest:%530(int32) value:%71(int32) align=1
  br 134
bb:133 (succs:)
  call %3(void()) args:
  unreachable
bb:134 (succs: 154 135)
 defs: [%541,%542]
  %541(int32). phi bb:125=>%509(int32) bb:132=>%531(int32) bb:128=>%71(int32)
  %542(int1). cmp2 op:icmp_eq(32) %506(int32) %71(int32)
  br %542(int1) ? 154 : 135
bb:135 (succs: 136 138)
 defs: [%543,%550]
  %543(int32). binop op:add(0) %148(int32) %77(int32) (flags:0)
  %544(int32). binop op:add(0) %70(int32) %543(int32) (flags:0)
  %545(int32). load src:%544(int32) align=1
  %546(int32). binop op:add(0) %64(int32) %93(int32) (flags:0)
  %547(int32). binop op:mul(2) %545(int32) %72(int32) (flags:0)
  %548(int32). binop op:add(0) %546(int32) %547(int32) (flags:0)
  %549(int32). load src:%548(int32) align=1
  %550(int1). cmp2 op:icmp_eq(32) %150(int32) %549(int32)
  br %550(int1) ? 136 : 138
bb:136 (succs: 137 144)
 defs: [%551,%551]
  store dest:%548(int32) value:%541(int32) align=1
  %551(int1). cmp2 op:icmp_eq(32) %541(int32) %71(int32)
  br %551(int1) ? 137 : 144
bb:137 (succs: 154)
 defs: [%552,%557]
  %552(int32). binop op:shl(7) %74(int32) %545(int32) (flags:0)
  %553(int32). binop op:xor(12) %552(int32) %80(int32) (flags:0)
  %554(int32). binop op:add(0) %64(int32) %72(int32) (flags:0)
  %555(int32). load src:%554(int32) align=1
  %556(int32). binop op:and(10) %555(int32) %553(int32) (flags:0)
  %557(int32). binop op:add(0) %64(int32) %72(int32) (flags:0)
  store dest:%557(int32) value:%556(int32) align=1
  br 154
bb:138 (succs: 142 139)
 defs: [%558,%560]
  %558(int32). binop op:add(0) %64(int32) %73(int32) (flags:0)
  %559(int32). load src:%558(int32) align=1
  %560(int1). cmp2 op:icmp_ult(36) %506(int32) %559(int32)
  br %560(int1) ? 142 : 139
bb:139 (succs: 140 141)
 defs: [%561,%563]
  %561(int32). binop op:add(0) %506(int32) %73(int32) (flags:0)
  %562(int32). load src:%561(int32) align=1
  %563(int1). cmp2 op:icmp_eq(32) %562(int32) %150(int32)
  br %563(int1) ? 140 : 141
bb:140 (succs: 143)
  store dest:%561(int32) value:%541(int32) align=1
  br 143
bb:141 (succs: 143)
 defs: [%564,%564]
  %564(int32). binop op:add(0) %506(int32) %77(int32) (flags:0)
  store dest:%564(int32) value:%541(int32) align=1
  br 143
bb:142 (succs:)
  call %3(void()) args:
  unreachable
bb:143 (succs: 154 144)
 defs: [%565,%565]
  %565(int1). cmp2 op:icmp_eq(32) %541(int32) %71(int32)
  br %565(int1) ? 154 : 144
bb:144 (succs: 153 145)
 defs: [%566,%568]
  %566(int32). binop op:add(0) %64(int32) %73(int32) (flags:0)
  %567(int32). load src:%566(int32) align=1
  %568(int1). cmp2 op:icmp_ult(36) %541(int32) %567(int32)
  br %568(int1) ? 153 : 145
bb:145 (succs: 149 146)
 defs: [%569,%573]
  %569(int32). binop op:add(0) %541(int32) %78(int32) (flags:0)
  store dest:%569(int32) value:%506(int32) align=1
  %570(int32). binop op:add(0) %148(int32) %75(int32) (flags:0)
  %571(int32). binop op:add(0) %70(int32) %570(int32) (flags:0)
  %572(int32). load src:%571(int32) align=1
  %573(int1). cmp2 op:icmp_eq(32) %572(int32) %71(int32)
  br %573(int1) ? 149 : 146
bb:146 (succs: 148 147)
 defs: [%574,%574]
  %574(int1). cmp2 op:icmp_ult(36) %572(int32) %567(int32)
  br %574(int1) ? 148 : 147
bb:147 (succs: 149)
 defs: [%575,%576]
  %575(int32). binop op:add(0) %541(int32) %73(int32) (flags:0)
  store dest:%575(int32) value:%572(int32) align=1
  %576(int32). binop op:add(0) %572(int32) %78(int32) (flags:0)
  store dest:%576(int32) value:%541(int32) align=1
  br 149
bb:148 (succs:)
  call %3(void()) args:
  unreachable
bb:149 (succs: 154 150)
 defs: [%577,%580]
  %577(int32). binop op:add(0) %148(int32) %76(int32) (flags:0)
  %578(int32). binop op:add(0) %70(int32) %577(int32) (flags:0)
  %579(int32). load src:%578(int32) align=1
  %580(int1). cmp2 op:icmp_eq(32) %579(int32) %71(int32)
  br %580(int1) ? 154 : 150
bb:150 (succs: 152 151)
 defs: [%581,%583]
  %581(int32). binop op:add(0) %64(int32) %73(int32) (flags:0)
  %582(int32). load src:%581(int32) align=1
  %583(int1). cmp2 op:icmp_ult(36) %579(int32) %582(int32)
  br %583(int1) ? 152 : 151
bb:151 (succs: 154)
 defs: [%584,%585]
  %584(int32). binop op:add(0) %541(int32) %77(int32) (flags:0)
  store dest:%584(int32) value:%579(int32) align=1
  %585(int32). binop op:add(0) %579(int32) %78(int32) (flags:0)
  store dest:%585(int32) value:%541(int32) align=1
  br 154
bb:152 (succs:)
  call %3(void()) args:
  unreachable
bb:153 (succs:)
  call %3(void()) args:
  unreachable
bb:154 (succs: 155 157)
 defs: [%586,%591]
  %586(int32). binop op:or(11) %470(int32) %74(int32) (flags:0)
  %587(int32). binop op:add(0) %297(int32) %72(int32) (flags:0)
  store dest:%587(int32) value:%586(int32) align=1
  %588(int32). binop op:add(0) %297(int32) %470(int32) (flags:0)
  store dest:%588(int32) value:%470(int32) align=1
  %589(int32). binop op:add(0) %64(int32) %77(int32) (flags:0)
  %590(int32). load src:%589(int32) align=1
  %591(int1). cmp2 op:icmp_eq(32) %297(int32) %590(int32)
  br %591(int1) ? 155 : 157
bb:155 (succs: 183)
 defs: [%592,%592]
  %592(int32). binop op:add(0) %64(int32) %75(int32) (flags:0)
  store dest:%592(int32) value:%470(int32) align=1
  br 183
bb:156 (succs: 157)
 defs: [%593,%596]
  %593(int32). binop op:and(10) %301(int32) %96(int32) (flags:0)
  store dest:%300(int32) value:%593(int32) align=1
  %594(int32). binop op:or(11) %296(int32) %74(int32) (flags:0)
  %595(int32). binop op:add(0) %297(int32) %72(int32) (flags:0)
  store dest:%595(int32) value:%594(int32) align=1
  %596(int32). binop op:add(0) %297(int32) %296(int32) (flags:0)
  store dest:%596(int32) value:%296(int32) align=1
  br 157
bb:157 (succs: 158 163)
 defs: [%597,%599]
  %597(int32). phi bb:156=>%296(int32) bb:154=>%470(int32)
  %598(int32). binop op:lshr(8) %597(int32) %84(int32) (flags:0)
  %599(int1). cmp2 op:icmp_ult(36) %597(int32) %92(int32)
  br %599(int1) ? 158 : 163
bb:158 (succs: 159 160)
 defs: [%600,%607]
  %600(int32). binop op:shl(7) %598(int32) %74(int32) (flags:0)
  %601(int32). binop op:add(0) %64(int32) %83(int32) (flags:0)
  %602(int32). binop op:mul(2) %600(int32) %72(int32) (flags:0)
  %603(int32). binop op:add(0) %601(int32) %602(int32) (flags:0)
  %604(int32). load src:%64(int32) align=1
  %605(int32). binop op:shl(7) %74(int32) %598(int32) (flags:0)
  %606(int32). binop op:and(10) %604(int32) %605(int32) (flags:0)
  %607(int1). cmp2 op:icmp_eq(32) %606(int32) %71(int32)
  br %607(int1) ? 159 : 160
bb:159 (succs: 162)
 defs: [%608,%612]
  %608(int32). binop op:or(11) %604(int32) %605(int32) (flags:0)
  store dest:%64(int32) value:%608(int32) align=1
  %609(int32). binop op:add(0) %600(int32) %82(int32) (flags:0)
  %610(int32). binop op:add(0) %64(int32) %83(int32) (flags:0)
  %611(int32). binop op:mul(2) %609(int32) %72(int32) (flags:0)
  %612(int32). binop op:add(0) %610(int32) %611(int32) (flags:0)
  br 162
bb:160 (succs: 161 162)
 defs: [%613,%620]
  %613(int32). binop op:add(0) %600(int32) %82(int32) (flags:0)
  %614(int32). binop op:add(0) %64(int32) %83(int32) (flags:0)
  %615(int32). binop op:mul(2) %613(int32) %72(int32) (flags:0)
  %616(int32). binop op:add(0) %614(int32) %615(int32) (flags:0)
  %617(int32). load src:%616(int32) align=1
  %618(int32). binop op:add(0) %64(int32) %73(int32) (flags:0)
  %619(int32). load src:%618(int32) align=1
  %620(int1). cmp2 op:icmp_ult(36) %617(int32) %619(int32)
  br %620(int1) ? 161 : 162
bb:161 (succs:)
  call %3(void()) args:
  unreachable
bb:162 (succs: 183)
 defs: [%621,%625]
  %621(int32). phi bb:160=>%616(int32) bb:159=>%612(int32)
  %622(int32). phi bb:160=>%617(int32) bb:159=>%603(int32)
  store dest:%621(int32) value:%297(int32) align=1
  %623(int32). binop op:add(0) %622(int32) %76(int32) (flags:0)
  store dest:%623(int32) value:%297(int32) align=1
  %624(int32). binop op:add(0) %297(int32) %75(int32) (flags:0)
  store dest:%624(int32) value:%622(int32) align=1
  %625(int32). binop op:add(0) %297(int32) %76(int32) (flags:0)
  store dest:%625(int32) value:%603(int32) align=1
  br 183
bb:163 (succs: 166 164)
 defs: [%626,%627]
  %626(int32). binop op:lshr(8) %597(int32) %75(int32) (flags:0)
  %627(int1). cmp2 op:icmp_eq(32) %626(int32) %71(int32)
  br %627(int1) ? 166 : 164
bb:164 (succs: 166 165)
 defs: [%628,%628]
  %628(int1). cmp2 op:icmp_ugt(34) %597(int32) %106(int32)
  br %628(int1) ? 166 : 165
bb:165 (succs: 166)
 defs: [%629,%650]
  %629(int32). binop op:add(0) %626(int32) %107(int32) (flags:0)
  %630(int32). binop op:lshr(8) %629(int32) %73(int32) (flags:0)
  %631(int32). binop op:and(10) %630(int32) %75(int32) (flags:0)
  %632(int32). binop op:shl(7) %626(int32) %631(int32) (flags:0)
  %633(int32). binop op:add(0) %632(int32) %108(int32) (flags:0)
  %634(int32). binop op:lshr(8) %633(int32) %73(int32) (flags:0)
  %635(int32). binop op:and(10) %634(int32) %72(int32) (flags:0)
  %636(int32). binop op:or(11) %635(int32) %631(int32) (flags:0)
  %637(int32). binop op:shl(7) %632(int32) %635(int32) (flags:0)
  %638(int32). binop op:add(0) %637(int32) %109(int32) (flags:0)
  %639(int32). binop op:lshr(8) %638(int32) %73(int32) (flags:0)
  %640(int32). binop op:and(10) %639(int32) %82(int32) (flags:0)
  %641(int32). binop op:or(11) %636(int32) %640(int32) (flags:0)
  %642(int32). binop op:sub(1) %110(int32) %641(int32) (flags:0)
  %643(int32). binop op:shl(7) %637(int32) %640(int32) (flags:0)
  %644(int32). binop op:lshr(8) %643(int32) %111(int32) (flags:0)
  %645(int32). binop op:add(0) %642(int32) %644(int32) (flags:0)
  %646(int32). binop op:shl(7) %645(int32) %74(int32) (flags:0)
  %647(int32). binop op:add(0) %645(int32) %88(int32) (flags:0)
  %648(int32). binop op:lshr(8) %597(int32) %647(int32) (flags:0)
  %649(int32). binop op:and(10) %648(int32) %74(int32) (flags:0)
  %650(int32). binop op:or(11) %649(int32) %646(int32) (flags:0)
  br 166
bb:166 (succs: 167 168)
 defs: [%651,%662]
  %651(int32). phi bb:165=>%650(int32) bb:163=>%71(int32) bb:164=>%94(int32)
  %652(int32). binop op:add(0) %64(int32) %93(int32) (flags:0)
  %653(int32). binop op:mul(2) %651(int32) %72(int32) (flags:0)
  %654(int32). binop op:add(0) %652(int32) %653(int32) (flags:0)
  %655(int32). binop op:add(0) %297(int32) %85(int32) (flags:0)
  store dest:%655(int32) value:%651(int32) align=1
  %656(int32). binop op:add(0) %297(int32) %73(int32) (flags:0)
  %657(int32). binop op:add(0) %297(int32) %77(int32) (flags:0)
  store dest:%657(int32) value:%71(int32) align=1
  store dest:%656(int32) value:%71(int32) align=1
  %658(int32). binop op:add(0) %64(int32) %72(int32) (flags:0)
  %659(int32). load src:%658(int32) align=1
  %660(int32). binop op:shl(7) %74(int32) %651(int32) (flags:0)
  %661(int32). binop op:and(10) %659(int32) %660(int32) (flags:0)
  %662(int1). cmp2 op:icmp_eq(32) %661(int32) %71(int32)
  br %662(int1) ? 167 : 168
bb:167 (succs: 180)
 defs: [%663,%667]
  %663(int32). binop op:or(11) %659(int32) %660(int32) (flags:0)
  %664(int32). binop op:add(0) %64(int32) %72(int32) (flags:0)
  store dest:%664(int32) value:%663(int32) align=1
  store dest:%654(int32) value:%297(int32) align=1
  %665(int32). binop op:add(0) %297(int32) %78(int32) (flags:0)
  store dest:%665(int32) value:%654(int32) align=1
  %666(int32). binop op:add(0) %297(int32) %76(int32) (flags:0)
  store dest:%666(int32) value:%297(int32) align=1
  %667(int32). binop op:add(0) %297(int32) %75(int32) (flags:0)
  store dest:%667(int32) value:%297(int32) align=1
  br 180
bb:168 (succs: 170 169)
 defs: [%668,%669]
  %668(int32). load src:%654(int32) align=1
  %669(int1). cmp2 op:icmp_eq(32) %651(int32) %94(int32)
  br %669(int1) ? 170 : 169
bb:169 (succs: 170)
 defs: [%670,%671]
  %670(int32). binop op:lshr(8) %651(int32) %74(int32) (flags:0)
  %671(int32). binop op:sub(1) %112(int32) %670(int32) (flags:0)
  br 170
bb:170 (succs: 177 171)
 defs: [%672,%676]
  %672(int32). phi bb:169=>%671(int32) bb:168=>%71(int32)
  %673(int32). binop op:add(0) %668(int32) %72(int32) (flags:0)
  %674(int32). load src:%673(int32) align=1
  %675(int32). binop op:and(10) %674(int32) %81(int32) (flags:0)
  %676(int1). cmp2 op:icmp_eq(32) %675(int32) %597(int32)
  br %676(int1) ? 177 : 171
bb:171 (succs: 173)
 defs: [%677,%677]
  %677(int32). binop op:shl(7) %597(int32) %672(int32) (flags:0)
  br 173
bb:172 (succs: 177 173)
 defs: [%678,%682]
  forwardtyperef %683(int32) int32
  %678(int32). binop op:shl(7) %683(int32) %74(int32) (flags:0)
  forwardtyperef %689(int32) int32
  %679(int32). binop op:add(0) %689(int32) %72(int32) (flags:0)
  %680(int32). load src:%679(int32) align=1
  %681(int32). binop op:and(10) %680(int32) %81(int32) (flags:0)
  %682(int1). cmp2 op:icmp_eq(32) %681(int32) %597(int32)
  br %682(int1) ? 177 : 173
bb:173 (succs: 174 172)
 defs: [%683,%690]
  %683(int32). phi bb:171=>%677(int32) bb:172=>%678(int32)
  %684(int32). phi bb:171=>%668(int32) bb:172=>%689(int32)
  %685(int32). binop op:lshr(8) %683(int32) %94(int32) (flags:0)
  %686(int32). binop op:add(0) %684(int32) %73(int32) (flags:0)
  %687(int32). binop op:mul(2) %685(int32) %72(int32) (flags:0)
  %688(int32). binop op:add(0) %686(int32) %687(int32) (flags:0)
  %689(int32). load src:%688(int32) align=1
  %690(int1). cmp2 op:icmp_eq(32) %689(int32) %71(int32)
  br %690(int1) ? 174 : 172
bb:174 (succs: 176 175)
 defs: [%691,%693]
  %691(int32). binop op:add(0) %64(int32) %73(int32) (flags:0)
  %692(int32). load src:%691(int32) align=1
  %693(int1). cmp2 op:icmp_ult(36) %688(int32) %692(int32)
  br %693(int1) ? 176 : 175
bb:175 (succs: 180)
 defs: [%694,%696]
  store dest:%688(int32) value:%297(int32) align=1
  %694(int32). binop op:add(0) %297(int32) %78(int32) (flags:0)
  store dest:%694(int32) value:%684(int32) align=1
  %695(int32). binop op:add(0) %297(int32) %76(int32) (flags:0)
  store dest:%695(int32) value:%297(int32) align=1
  %696(int32). binop op:add(0) %297(int32) %75(int32) (flags:0)
  store dest:%696(int32) value:%297(int32) align=1
  br 180
bb:176 (succs:)
  call %3(void()) args:
  unreachable
bb:177 (succs: 178 179)
 defs: [%697,%704]
  %697(int32). phi bb:170=>%668(int32) bb:172=>%689(int32)
  %698(int32). binop op:add(0) %697(int32) %75(int32) (flags:0)
  %699(int32). load src:%698(int32) align=1
  %700(int32). binop op:add(0) %64(int32) %73(int32) (flags:0)
  %701(int32). load src:%700(int32) align=1
  %702(int1). cmp2 op:icmp_uge(35) %697(int32) %701(int32)
  %703(int1). cmp2 op:icmp_uge(35) %699(int32) %701(int32)
  %704(int1). binop op:and(10) %702(int1) %703(int1) (flags:0)
  br %704(int1) ? 178 : 179
bb:178 (succs: 180)
 defs: [%705,%708]
  %705(int32). binop op:add(0) %699(int32) %76(int32) (flags:0)
  store dest:%705(int32) value:%297(int32) align=1
  store dest:%698(int32) value:%297(int32) align=1
  %706(int32). binop op:add(0) %297(int32) %75(int32) (flags:0)
  store dest:%706(int32) value:%699(int32) align=1
  %707(int32). binop op:add(0) %297(int32) %76(int32) (flags:0)
  store dest:%707(int32) value:%697(int32) align=1
  %708(int32). binop op:add(0) %297(int32) %78(int32) (flags:0)
  store dest:%708(int32) value:%71(int32) align=1
  br 180
bb:179 (succs:)
  call %3(void()) args:
  unreachable
bb:180 (succs: 181 183)
 defs: [%709,%713]
  %709(int32). binop op:add(0) %64(int32) %98(int32) (flags:0)
  %710(int32). load src:%709(int32) align=1
  %711(int32). binop op:add(0) %710(int32) %80(int32) (flags:0)
  %712(int32). binop op:add(0) %64(int32) %98(int32) (flags:0)
  store dest:%712(int32) value:%711(int32) align=1
  %713(int1). cmp2 op:icmp_eq(32) %711(int32) %71(int32)
  br %713(int1) ? 181 : 183
bb:181 (succs: 183)
 defs: [%714,%714]
  %714(int32). call %31(int32()) args:
  br 183
bb:182 (succs:)
  call %3(void()) args:
  unreachable
bb:183 (succs: 185 184)
 defs: [%715,%718]
  %715(int32). binop op:add(0) %64(int32) %90(int32) (flags:0)
  %716(int32). load src:%715(int32) align=1
  %717(int32). binop op:and(10) %716(int32) %82(int32) (flags:0)
  %718(int1). cmp2 op:icmp_eq(32) %717(int32) %71(int32)
  br %718(int1) ? 185 : 184
bb:184 (succs: 185)
 defs: [%719,%719]
  %719(int32). binop op:add(0) %64(int32) %86(int32) (flags:0)
  call %38(void(int32,int32,int32))(llvm.nacl.atomic.store.i32) args: %71(int32) %719(int32) %72(int32)
  br 185
bb:185 (succs:)
  ret
*** END BLOCK
*** SUBBLOCK FUNCTION (12)
function %31
num bbs:63
*** SUBBLOCK CONSTANTS (11)
  constants settype 0 (int32)
  %70. integer 0
  %71. integer 16
  %72. integer 4
  %73. integer 8
  %74. integer 1
  %75. integer 12
  %76. integer 24
  %77. integer 20
  %78. integer 7
  %79. integer -8
  %80. integer 31
  %81. integer 28
  %82. integer 304
  %83. integer 432
  %84. integer 4095
  %85. integer 460
  %86. integer 452
  %87. integer 9
  %88. integer 3
  %89. integer -40
  %90. integer -1
  %91. integer -1144
  %92. integer 16777215
  %93. integer 1048320
  %94. integer 520192
  %95. integer 245760
  %96. integer 2
  %97. integer 14
  %98. integer 15
  %99. integer 25
  %100. integer 32
*** END BLOCK
bb:0 (succs: 62 1)
 defs: [%101,%104]
  %101(int32). binop op:add(0) %64(int32) %85(int32) (flags:0)
  %102(int32). load src:%101(int32) align=1
  %103(int1). cmp2 op:icmp_eq(32) %102(int32) %70(int32)
  %104(int32). binop op:add(0) %64(int32) %86(int32) (flags:0)
  br %103(int1) ? 62 : 1
bb:1 (succs: 2)
 defs: [%105,%109]
  forwardtyperef %110(int32) int32
  %105(int32). phi bb:49=>%110(int32) bb:0=>%70(int32)
  forwardtyperef %118(int32) int32
  %106(int32). phi bb:49=>%118(int32) bb:0=>%70(int32)
  forwardtyperef %112(int32) int32
  %107(int32). phi bb:49=>%112(int32) bb:0=>%104(int32)
  forwardtyperef %117(int32) int32
  %108(int32). phi bb:49=>%117(int32) bb:0=>%102(int32)
  %109(int32). binop op:add(0) %107(int32) %73(int32) (flags:0)
  br 2
bb:2 (succs: 3 49)
 defs: [%110,%122]
  forwardtyperef %231(int32) int32
  %110(int32). phi bb:1=>%105(int32) bb:43=>%231(int32)
  %111(int32). phi bb:1=>%106(int32) bb:43=>%118(int32)
  %112(int32). phi bb:1=>%108(int32) bb:43=>%117(int32)
  %113(int32). load src:%112(int32) align=1
  %114(int32). binop op:add(0) %112(int32) %72(int32) (flags:0)
  %115(int32). load src:%114(int32) align=1
  %116(int32). binop op:add(0) %112(int32) %73(int32) (flags:0)
  %117(int32). load src:%116(int32) align=1
  %118(int32). binop op:add(0) %111(int32) %74(int32) (flags:0)
  %119(int32). binop op:add(0) %112(int32) %75(int32) (flags:0)
  %120(int32). load src:%119(int32) align=1
  %121(int32). binop op:and(10) %120(int32) %87(int32) (flags:0)
  %122(int1). cmp2 op:icmp_eq(32) %121(int32) %74(int32)
  br %122(int1) ? 3 : 49
bb:3 (succs: 5 4)
 defs: [%123,%125]
  %123(int32). binop op:add(0) %113(int32) %73(int32) (flags:0)
  %124(int32). binop op:and(10) %123(int32) %78(int32) (flags:0)
  %125(int1). cmp2 op:icmp_eq(32) %124(int32) %70(int32)
  br %125(int1) ? 5 : 4
bb:4 (succs: 5)
 defs: [%126,%127]
  %126(int32). binop op:sub(1) %70(int32) %123(int32) (flags:0)
  %127(int32). binop op:and(10) %126(int32) %78(int32) (flags:0)
  br 5
bb:5 (succs: 6 49)
 defs: [%128,%135]
  %128(int32). phi bb:4=>%127(int32) bb:3=>%70(int32)
  %129(int32). binop op:add(0) %113(int32) %128(int32) (flags:0)
  %130(int32). binop op:add(0) %128(int32) %72(int32) (flags:0)
  %131(int32). binop op:add(0) %113(int32) %130(int32) (flags:0)
  %132(int32). load src:%131(int32) align=1
  %133(int32). binop op:and(10) %132(int32) %79(int32) (flags:0)
  %134(int32). binop op:and(10) %132(int32) %88(int32) (flags:0)
  %135(int1). cmp2 op:icmp_eq(32) %134(int32) %74(int32)
  br %135(int1) ? 6 : 49
bb:6 (succs: 49 7)
 defs: [%136,%138]
  %136(int32). binop op:or(11) %133(int32) %128(int32) (flags:0)
  %137(int32). binop op:add(0) %115(int32) %89(int32) (flags:0)
  %138(int1). cmp2 op:icmp_slt(40) %136(int32) %137(int32)
  br %138(int1) ? 49 : 7
bb:7 (succs: 8 9)
 defs: [%139,%141]
  %139(int32). binop op:add(0) %64(int32) %77(int32) (flags:0)
  %140(int32). load src:%139(int32) align=1
  %141(int1). cmp2 op:icmp_eq(32) %129(int32) %140(int32)
  br %141(int1) ? 8 : 9
bb:8 (succs: 42)
 defs: [%142,%143]
  %142(int32). binop op:add(0) %64(int32) %77(int32) (flags:0)
  store dest:%142(int32) value:%70(int32) align=1
  %143(int32). binop op:add(0) %64(int32) %73(int32) (flags:0)
  store dest:%143(int32) value:%70(int32) align=1
  br 42
bb:9 (succs: 15 10)
 defs: [%144,%150]
  %144(int32). binop op:or(11) %128(int32) %76(int32) (flags:0)
  %145(int32). binop op:add(0) %113(int32) %144(int32) (flags:0)
  %146(int32). load src:%145(int32) align=1
  %147(int32). binop op:add(0) %128(int32) %75(int32) (flags:0)
  %148(int32). binop op:add(0) %113(int32) %147(int32) (flags:0)
  %149(int32). load src:%148(int32) align=1
  %150(int1). cmp2 op:icmp_eq(32) %149(int32) %129(int32)
  br %150(int1) ? 15 : 10
bb:10 (succs: 14 11)
 defs: [%151,%156]
  %151(int32). binop op:or(11) %128(int32) %73(int32) (flags:0)
  %152(int32). binop op:add(0) %113(int32) %151(int32) (flags:0)
  %153(int32). load src:%152(int32) align=1
  %154(int32). binop op:add(0) %64(int32) %71(int32) (flags:0)
  %155(int32). load src:%154(int32) align=1
  %156(int1). cmp2 op:icmp_ult(36) %153(int32) %155(int32)
  br %156(int1) ? 14 : 11
bb:11 (succs: 12 14)
 defs: [%157,%159]
  %157(int32). binop op:add(0) %153(int32) %75(int32) (flags:0)
  %158(int32). load src:%157(int32) align=1
  %159(int1). cmp2 op:icmp_eq(32) %158(int32) %129(int32)
  br %159(int1) ? 12 : 14
bb:12 (succs: 13 14)
 defs: [%160,%162]
  %160(int32). binop op:add(0) %149(int32) %73(int32) (flags:0)
  %161(int32). load src:%160(int32) align=1
  %162(int1). cmp2 op:icmp_eq(32) %161(int32) %129(int32)
  br %162(int1) ? 13 : 14
bb:13 (succs: 22)
  store dest:%157(int32) value:%149(int32) align=1
  store dest:%160(int32) value:%153(int32) align=1
  br 22
bb:14 (succs:)
  call %3(void()) args:
  unreachable
bb:15 (succs: 16 17)
 defs: [%163,%167]
  %163(int32). binop op:or(11) %128(int32) %71(int32) (flags:0)
  %164(int32). binop op:add(0) %163(int32) %72(int32) (flags:0)
  %165(int32). binop op:add(0) %113(int32) %164(int32) (flags:0)
  %166(int32). load src:%165(int32) align=1
  %167(int1). cmp2 op:icmp_eq(32) %166(int32) %70(int32)
  br %167(int1) ? 16 : 17
bb:16 (succs: 22 17)
 defs: [%168,%170]
  %168(int32). binop op:add(0) %113(int32) %163(int32) (flags:0)
  %169(int32). load src:%168(int32) align=1
  %170(int1). cmp2 op:icmp_eq(32) %169(int32) %70(int32)
  br %170(int1) ? 22 : 17
bb:17 (succs: 18 17)
 defs: [%171,%175]
  forwardtyperef %173(int32) int32
  forwardtyperef %176(int32) int32
  %171(int32). phi bb:15=>%165(int32) bb:16=>%168(int32) bb:17=>%173(int32) bb:18=>%176(int32)
  forwardtyperef %174(int32) int32
  forwardtyperef %177(int32) int32
  %172(int32). phi bb:15=>%166(int32) bb:16=>%169(int32) bb:17=>%174(int32) bb:18=>%177(int32)
  %173(int32). binop op:add(0) %172(int32) %77(int32) (flags:0)
  %174(int32). load src:%173(int32) align=1
  %175(int1). cmp2 op:icmp_eq(32) %174(int32) %70(int32)
  br %175(int1) ? 18 : 17
bb:18 (succs: 19 17)
 defs: [%176,%178]
  %176(int32). binop op:add(0) %172(int32) %71(int32) (flags:0)
  %177(int32). load src:%176(int32) align=1
  %178(int1). cmp2 op:icmp_eq(32) %177(int32) %70(int32)
  br %178(int1) ? 19 : 17
bb:19 (succs: 21 20)
 defs: [%179,%181]
  %179(int32). binop op:add(0) %64(int32) %71(int32) (flags:0)
  %180(int32). load src:%179(int32) align=1
  %181(int1). cmp2 op:icmp_ult(36) %171(int32) %180(int32)
  br %181(int1) ? 21 : 20
bb:20 (succs: 22)
  store dest:%171(int32) value:%70(int32) align=1
  br 22
bb:21 (succs:)
  call %3(void()) args:
  unreachable
bb:22 (succs: 42 23)
 defs: [%182,%183]
  %182(int32). phi bb:13=>%149(int32) bb:20=>%172(int32) bb:16=>%70(int32)
  %183(int1). cmp2 op:icmp_eq(32) %146(int32) %70(int32)
  br %183(int1) ? 42 : 23
bb:23 (succs: 24 26)
 defs: [%184,%191]
  %184(int32). binop op:add(0) %128(int32) %81(int32) (flags:0)
  %185(int32). binop op:add(0) %113(int32) %184(int32) (flags:0)
  %186(int32). load src:%185(int32) align=1
  %187(int32). binop op:add(0) %64(int32) %82(int32) (flags:0)
  %188(int32). binop op:mul(2) %186(int32) %72(int32) (flags:0)
  %189(int32). binop op:add(0) %187(int32) %188(int32) (flags:0)
  %190(int32). load src:%189(int32) align=1
  %191(int1). cmp2 op:icmp_eq(32) %129(int32) %190(int32)
  br %191(int1) ? 24 : 26
bb:24 (succs: 25 32)
 defs: [%192,%192]
  store dest:%189(int32) value:%182(int32) align=1
  %192(int1). cmp2 op:icmp_eq(32) %182(int32) %70(int32)
  br %192(int1) ? 25 : 32
bb:25 (succs: 42)
 defs: [%193,%198]
  %193(int32). binop op:shl(7) %74(int32) %186(int32) (flags:0)
  %194(int32). binop op:xor(12) %193(int32) %90(int32) (flags:0)
  %195(int32). binop op:add(0) %64(int32) %72(int32) (flags:0)
  %196(int32). load src:%195(int32) align=1
  %197(int32). binop op:and(10) %196(int32) %194(int32) (flags:0)
  %198(int32). binop op:add(0) %64(int32) %72(int32) (flags:0)
  store dest:%198(int32) value:%197(int32) align=1
  br 42
bb:26 (succs: 30 27)
 defs: [%199,%201]
  %199(int32). binop op:add(0) %64(int32) %71(int32) (flags:0)
  %200(int32). load src:%199(int32) align=1
  %201(int1). cmp2 op:icmp_ult(36) %146(int32) %200(int32)
  br %201(int1) ? 30 : 27
bb:27 (succs: 28 29)
 defs: [%202,%204]
  %202(int32). binop op:add(0) %146(int32) %71(int32) (flags:0)
  %203(int32). load src:%202(int32) align=1
  %204(int1). cmp2 op:icmp_eq(32) %203(int32) %129(int32)
  br %204(int1) ? 28 : 29
bb:28 (succs: 31)
  store dest:%202(int32) value:%182(int32) align=1
  br 31
bb:29 (succs: 31)
 defs: [%205,%205]
  %205(int32). binop op:add(0) %146(int32) %77(int32) (flags:0)
  store dest:%205(int32) value:%182(int32) align=1
  br 31
bb:30 (succs:)
  call %3(void()) args:
  unreachable
bb:31 (succs: 42 32)
 defs: [%206,%206]
  %206(int1). cmp2 op:icmp_eq(32) %182(int32) %70(int32)
  br %206(int1) ? 42 : 32
bb:32 (succs: 41 33)
 defs: [%207,%209]
  %207(int32). binop op:add(0) %64(int32) %71(int32) (flags:0)
  %208(int32). load src:%207(int32) align=1
  %209(int1). cmp2 op:icmp_ult(36) %182(int32) %208(int32)
  br %209(int1) ? 41 : 33
bb:33 (succs: 37 34)
 defs: [%210,%214]
  %210(int32). binop op:add(0) %182(int32) %76(int32) (flags:0)
  store dest:%210(int32) value:%146(int32) align=1
  %211(int32). binop op:or(11) %128(int32) %71(int32) (flags:0)
  %212(int32). binop op:add(0) %113(int32) %211(int32) (flags:0)
  %213(int32). load src:%212(int32) align=1
  %214(int1). cmp2 op:icmp_eq(32) %213(int32) %70(int32)
  br %214(int1) ? 37 : 34
bb:34 (succs: 36 35)
 defs: [%215,%215]
  %215(int1). cmp2 op:icmp_ult(36) %213(int32) %208(int32)
  br %215(int1) ? 36 : 35
bb:35 (succs: 37)
 defs: [%216,%217]
  %216(int32). binop op:add(0) %182(int32) %71(int32) (flags:0)
  store dest:%216(int32) value:%213(int32) align=1
  %217(int32). binop op:add(0) %213(int32) %76(int32) (flags:0)
  store dest:%217(int32) value:%182(int32) align=1
  br 37
bb:36 (succs:)
  call %3(void()) args:
  unreachable
bb:37 (succs: 42 38)
 defs: [%218,%221]
  %218(int32). binop op:add(0) %211(int32) %72(int32) (flags:0)
  %219(int32). binop op:add(0) %113(int32) %218(int32) (flags:0)
  %220(int32). load src:%219(int32) align=1
  %221(int1). cmp2 op:icmp_eq(32) %220(int32) %70(int32)
  br %221(int1) ? 42 : 38
bb:38 (succs: 40 39)
 defs: [%222,%224]
  %222(int32). binop op:add(0) %64(int32) %71(int32) (flags:0)
  %223(int32). load src:%222(int32) align=1
  %224(int1). cmp2 op:icmp_ult(36) %220(int32) %223(int32)
  br %224(int1) ? 40 : 39
bb:39 (succs: 42)
 defs: [%225,%226]
  %225(int32). binop op:add(0) %182(int32) %77(int32) (flags:0)
  store dest:%225(int32) value:%220(int32) align=1
  %226(int32). binop op:add(0) %220(int32) %76(int32) (flags:0)
  store dest:%226(int32) value:%182(int32) align=1
  br 42
bb:40 (succs:)
  call %3(void()) args:
  unreachable
bb:41 (succs:)
  call %3(void()) args:
  unreachable
bb:42 (succs: 43 44)
 defs: [%227,%230]
  %227(int32). binop op:add(0) %47(int32) %72(int32) (flags:0)
  %228(int32). load src:%227(int32) align=1
  %229(int32). call indirect %228(int32) args: %113(int32) %115(int32)
  %230(int1). cmp2 op:icmp_eq(32) %229(int32) %70(int32)
  br %230(int1) ? 43 : 44
bb:43 (succs: 62 2)
 defs: [%231,%236]
  %231(int32). binop op:add(0) %115(int32) %110(int32) (flags:0)
  %232(int32). binop op:add(0) %64(int32) %83(int32) (flags:0)
  %233(int32). load src:%232(int32) align=1
  %234(int32). binop op:sub(1) %233(int32) %115(int32) (flags:0)
  %235(int32). binop op:add(0) %64(int32) %83(int32) (flags:0)
  store dest:%235(int32) value:%234(int32) align=1
  store dest:%109(int32) value:%117(int32) align=1
  %236(int1). cmp2 op:icmp_eq(32) %117(int32) %70(int32)
  br %236(int1) ? 62 : 2
bb:44 (succs: 47 45)
 defs: [%237,%241]
  %237(int32). call %33(int32())(llvm.nacl.read.tp) args:
  %238(int32). binop op:add(0) %237(int32) %91(int32) (flags:0)
  %239(int32). load src:%238(int32) align=1
  store dest:%239(int32) value:%229(int32) align=1
  %240(int32). binop op:lshr(8) %132(int32) %73(int32) (flags:0)
  %241(int1). cmp2 op:icmp_eq(32) %240(int32) %70(int32)
  br %241(int1) ? 47 : 45
bb:45 (succs: 47 46)
 defs: [%242,%242]
  %242(int1). cmp2 op:icmp_ugt(34) %132(int32) %92(int32)
  br %242(int1) ? 47 : 46
bb:46 (succs: 47)
 defs: [%243,%264]
  %243(int32). binop op:add(0) %240(int32) %93(int32) (flags:0)
  %244(int32). binop op:lshr(8) %243(int32) %71(int32) (flags:0)
  %245(int32). binop op:and(10) %244(int32) %73(int32) (flags:0)
  %246(int32). binop op:shl(7) %240(int32) %245(int32) (flags:0)
  %247(int32). binop op:add(0) %246(int32) %94(int32) (flags:0)
  %248(int32). binop op:lshr(8) %247(int32) %71(int32) (flags:0)
  %249(int32). binop op:and(10) %248(int32) %72(int32) (flags:0)
  %250(int32). binop op:or(11) %249(int32) %245(int32) (flags:0)
  %251(int32). binop op:shl(7) %246(int32) %249(int32) (flags:0)
  %252(int32). binop op:add(0) %251(int32) %95(int32) (flags:0)
  %253(int32). binop op:lshr(8) %252(int32) %71(int32) (flags:0)
  %254(int32). binop op:and(10) %253(int32) %96(int32) (flags:0)
  %255(int32). binop op:or(11) %250(int32) %254(int32) (flags:0)
  %256(int32). binop op:sub(1) %97(int32) %255(int32) (flags:0)
  %257(int32). binop op:shl(7) %251(int32) %254(int32) (flags:0)
  %258(int32). binop op:lshr(8) %257(int32) %98(int32) (flags:0)
  %259(int32). binop op:add(0) %256(int32) %258(int32) (flags:0)
  %260(int32). binop op:shl(7) %259(int32) %74(int32) (flags:0)
  %261(int32). binop op:add(0) %259(int32) %78(int32) (flags:0)
  %262(int32). binop op:lshr(8) %133(int32) %261(int32) (flags:0)
  %263(int32). binop op:and(10) %262(int32) %74(int32) (flags:0)
  %264(int32). binop op:or(11) %263(int32) %260(int32) (flags:0)
  br 47
bb:47 (succs: 48 50)
 defs: [%265,%279]
  %265(int32). phi bb:46=>%264(int32) bb:44=>%70(int32) bb:45=>%80(int32)
  %266(int32). binop op:add(0) %64(int32) %82(int32) (flags:0)
  %267(int32). binop op:mul(2) %265(int32) %72(int32) (flags:0)
  %268(int32). binop op:add(0) %266(int32) %267(int32) (flags:0)
  %269(int32). binop op:add(0) %128(int32) %81(int32) (flags:0)
  %270(int32). binop op:add(0) %113(int32) %269(int32) (flags:0)
  store dest:%270(int32) value:%265(int32) align=1
  %271(int32). binop op:or(11) %128(int32) %71(int32) (flags:0)
  %272(int32). binop op:add(0) %113(int32) %271(int32) (flags:0)
  %273(int32). binop op:add(0) %271(int32) %72(int32) (flags:0)
  %274(int32). binop op:add(0) %113(int32) %273(int32) (flags:0)
  store dest:%274(int32) value:%70(int32) align=1
  store dest:%272(int32) value:%70(int32) align=1
  %275(int32). binop op:add(0) %64(int32) %72(int32) (flags:0)
  %276(int32). load src:%275(int32) align=1
  %277(int32). binop op:shl(7) %74(int32) %265(int32) (flags:0)
  %278(int32). binop op:and(10) %276(int32) %277(int32) (flags:0)
  %279(int1). cmp2 op:icmp_eq(32) %278(int32) %70(int32)
  br %279(int1) ? 48 : 50
bb:48 (succs: 49)
 defs: [%280,%287]
  %280(int32). binop op:or(11) %276(int32) %277(int32) (flags:0)
  %281(int32). binop op:add(0) %64(int32) %72(int32) (flags:0)
  store dest:%281(int32) value:%280(int32) align=1
  store dest:%268(int32) value:%129(int32) align=1
  %282(int32). binop op:or(11) %128(int32) %76(int32) (flags:0)
  %283(int32). binop op:add(0) %113(int32) %282(int32) (flags:0)
  store dest:%283(int32) value:%268(int32) align=1
  %284(int32). binop op:add(0) %128(int32) %75(int32) (flags:0)
  %285(int32). binop op:add(0) %113(int32) %284(int32) (flags:0)
  store dest:%285(int32) value:%129(int32) align=1
  %286(int32). binop op:or(11) %128(int32) %73(int32) (flags:0)
  %287(int32). binop op:add(0) %113(int32) %286(int32) (flags:0)
  store dest:%287(int32) value:%129(int32) align=1
  br 49
bb:49 (succs: 62 1)
 defs: [%288,%288]
  %288(int1). cmp2 op:icmp_eq(32) %117(int32) %70(int32)
  br %288(int1) ? 62 : 1
bb:50 (succs: 52 51)
 defs: [%289,%290]
  %289(int32). load src:%268(int32) align=1
  %290(int1). cmp2 op:icmp_eq(32) %265(int32) %80(int32)
  br %290(int1) ? 52 : 51
bb:51 (succs: 52)
 defs: [%291,%292]
  %291(int32). binop op:lshr(8) %265(int32) %74(int32) (flags:0)
  %292(int32). binop op:sub(1) %99(int32) %291(int32) (flags:0)
  br 52
bb:52 (succs: 59 53)
 defs: [%293,%297]
  %293(int32). phi bb:51=>%292(int32) bb:50=>%70(int32)
  %294(int32). binop op:add(0) %289(int32) %72(int32) (flags:0)
  %295(int32). load src:%294(int32) align=1
  %296(int32). binop op:and(10) %295(int32) %79(int32) (flags:0)
  %297(int1). cmp2 op:icmp_eq(32) %296(int32) %133(int32)
  br %297(int1) ? 59 : 53
bb:53 (succs: 55)
 defs: [%298,%298]
  %298(int32). binop op:shl(7) %133(int32) %293(int32) (flags:0)
  br 55
bb:54 (succs: 59 55)
 defs: [%299,%303]
  forwardtyperef %304(int32) int32
  %299(int32). binop op:shl(7) %304(int32) %74(int32) (flags:0)
  forwardtyperef %310(int32) int32
  %300(int32). binop op:add(0) %310(int32) %72(int32) (flags:0)
  %301(int32). load src:%300(int32) align=1
  %302(int32). binop op:and(10) %301(int32) %79(int32) (flags:0)
  %303(int1). cmp2 op:icmp_eq(32) %302(int32) %133(int32)
  br %303(int1) ? 59 : 55
bb:55 (succs: 56 54)
 defs: [%304,%311]
  %304(int32). phi bb:53=>%298(int32) bb:54=>%299(int32)
  %305(int32). phi bb:53=>%289(int32) bb:54=>%310(int32)
  %306(int32). binop op:lshr(8) %304(int32) %80(int32) (flags:0)
  %307(int32). binop op:add(0) %305(int32) %71(int32) (flags:0)
  %308(int32). binop op:mul(2) %306(int32) %72(int32) (flags:0)
  %309(int32). binop op:add(0) %307(int32) %308(int32) (flags:0)
  %310(int32). load src:%309(int32) align=1
  %311(int1). cmp2 op:icmp_eq(32) %310(int32) %70(int32)
  br %311(int1) ? 56 : 54
bb:56 (succs: 58 57)
 defs: [%312,%314]
  %312(int32). binop op:add(0) %64(int32) %71(int32) (flags:0)
  %313(int32). load src:%312(int32) align=1
  %314(int1). cmp2 op:icmp_ult(36) %309(int32) %313(int32)
  br %314(int1) ? 58 : 57
bb:57 (succs: 49)
 defs: [%315,%320]
  store dest:%309(int32) value:%129(int32) align=1
  %315(int32). binop op:or(11) %128(int32) %76(int32) (flags:0)
  %316(int32). binop op:add(0) %113(int32) %315(int32) (flags:0)
  store dest:%316(int32) value:%305(int32) align=1
  %317(int32). binop op:add(0) %128(int32) %75(int32) (flags:0)
  %318(int32). binop op:add(0) %113(int32) %317(int32) (flags:0)
  store dest:%318(int32) value:%129(int32) align=1
  %319(int32). binop op:or(11) %128(int32) %73(int32) (flags:0)
  %320(int32). binop op:add(0) %113(int32) %319(int32) (flags:0)
  store dest:%320(int32) value:%129(int32) align=1
  br 49
bb:58 (succs:)
  call %3(void()) args:
  unreachable
bb:59 (succs: 60 61)
 defs: [%321,%328]
  %321(int32). phi bb:52=>%289(int32) bb:54=>%310(int32)
  %322(int32). binop op:add(0) %321(int32) %73(int32) (flags:0)
  %323(int32). load src:%322(int32) align=1
  %324(int32). binop op:add(0) %64(int32) %71(int32) (flags:0)
  %325(int32). load src:%324(int32) align=1
  %326(int1). cmp2 op:icmp_uge(35) %321(int32) %325(int32)
  %327(int1). cmp2 op:icmp_uge(35) %323(int32) %325(int32)
  %328(int1). binop op:and(10) %326(int1) %327(int1) (flags:0)
  br %328(int1) ? 60 : 61
bb:60 (succs: 49)
 defs: [%329,%335]
  %329(int32). binop op:add(0) %323(int32) %75(int32) (flags:0)
  store dest:%329(int32) value:%129(int32) align=1
  store dest:%322(int32) value:%129(int32) align=1
  %330(int32). binop op:or(11) %128(int32) %73(int32) (flags:0)
  %331(int32). binop op:add(0) %113(int32) %330(int32) (flags:0)
  store dest:%331(int32) value:%323(int32) align=1
  %332(int32). binop op:add(0) %128(int32) %75(int32) (flags:0)
  %333(int32). binop op:add(0) %113(int32) %332(int32) (flags:0)
  store dest:%333(int32) value:%321(int32) align=1
  %334(int32). binop op:or(11) %128(int32) %76(int32) (flags:0)
  %335(int32). binop op:add(0) %113(int32) %334(int32) (flags:0)
  store dest:%335(int32) value:%70(int32) align=1
  br 49
bb:61 (succs:)
  call %3(void()) args:
  unreachable
bb:62 (succs:)
 defs: [%336,%340]
  %336(int32). phi bb:0=>%70(int32) bb:43=>%231(int32) bb:49=>%110(int32)
  %337(int32). phi bb:0=>%70(int32) bb:43=>%118(int32) bb:49=>%118(int32)
  %338(int1). cmp2 op:icmp_ugt(34) %337(int32) %84(int32)
  %339(int32). vselect %338(int1) ? %337(int32) : %84(int32)
  %340(int32). binop op:add(0) %64(int32) %100(int32) (flags:0)
  store dest:%340(int32) value:%339(int32) align=1
  ret %336(int32)
*** END BLOCK
*** SUBBLOCK FUNCTION (12)
function %32
  %70. function arg 0
  %71. function arg 1
num bbs:137
*** SUBBLOCK CONSTANTS (11)
  constants settype 0 (int32)
  %72. integer 0
  %73. integer 4
  %74. integer 16
  %75. integer 8
  %76. integer 1
  %77. integer 12
  %78. integer 20
  %79. integer 24
  %80. integer 3
  %81. integer 40
  %82. integer -1
  %83. integer 2
  %84. integer 256
  %85. integer 28
  %86. integer 304
  %87. integer -8
  %88. integer 31
  %89. integer 432
  %90. integer -2
  %91. integer -1144
  %92. integer 16777215
  %93. integer 1048320
  %94. integer 520192
  %95. integer 245760
  %96. integer 14
  %97. integer 15
  %98. integer 7
  %99. integer 25
*** END BLOCK
bb:0 (succs: 1 56)
 defs: [%100,%104]
  %100(int32). binop op:add(0) %70(int32) %71(int32) (flags:0)
  %101(int32). binop op:add(0) %70(int32) %73(int32) (flags:0)
  %102(int32). load src:%101(int32) align=1
  %103(int32). binop op:and(10) %102(int32) %76(int32) (flags:0)
  %104(int1). cmp2 op:icmp_eq(32) %103(int32) %72(int32)
  br %104(int1) ? 1 : 56
bb:1 (succs: 2 5)
 defs: [%105,%107]
  %105(int32). load src:%70(int32) align=1
  %106(int32). binop op:and(10) %102(int32) %80(int32) (flags:0)
  %107(int1). cmp2 op:icmp_eq(32) %106(int32) %72(int32)
  br %107(int1) ? 2 : 5
bb:2 (succs: 4 3)
 defs: [%108,%115]
  %108(int32). binop op:add(0) %71(int32) %74(int32) (flags:0)
  %109(int32). binop op:add(0) %108(int32) %105(int32) (flags:0)
  %110(int32). binop op:sub(1) %72(int32) %105(int32) (flags:0)
  %111(int32). binop op:add(0) %70(int32) %110(int32) (flags:0)
  %112(int32). binop op:add(0) %47(int32) %73(int32) (flags:0)
  %113(int32). load src:%112(int32) align=1
  %114(int32). call indirect %113(int32) args: %111(int32) %109(int32)
  %115(int1). cmp2 op:icmp_eq(32) %114(int32) %72(int32)
  br %115(int1) ? 4 : 3
bb:3 (succs: 136)
 defs: [%116,%118]
  %116(int32). call %33(int32())(llvm.nacl.read.tp) args:
  %117(int32). binop op:add(0) %116(int32) %91(int32) (flags:0)
  %118(int32). load src:%117(int32) align=1
  store dest:%118(int32) value:%114(int32) align=1
  br 136
bb:4 (succs: 136)
 defs: [%119,%122]
  %119(int32). binop op:add(0) %64(int32) %89(int32) (flags:0)
  %120(int32). load src:%119(int32) align=1
  %121(int32). binop op:sub(1) %120(int32) %109(int32) (flags:0)
  %122(int32). binop op:add(0) %64(int32) %89(int32) (flags:0)
  store dest:%122(int32) value:%121(int32) align=1
  br 136
bb:5 (succs: 55 6)
 defs: [%123,%128]
  %123(int32). binop op:sub(1) %72(int32) %105(int32) (flags:0)
  %124(int32). binop op:add(0) %70(int32) %123(int32) (flags:0)
  %125(int32). binop op:add(0) %105(int32) %71(int32) (flags:0)
  %126(int32). binop op:add(0) %64(int32) %74(int32) (flags:0)
  %127(int32). load src:%126(int32) align=1
  %128(int1). cmp2 op:icmp_ult(36) %124(int32) %127(int32)
  br %128(int1) ? 55 : 6
bb:6 (succs: 53 7)
 defs: [%129,%131]
  %129(int32). binop op:add(0) %64(int32) %78(int32) (flags:0)
  %130(int32). load src:%129(int32) align=1
  %131(int1). cmp2 op:icmp_eq(32) %124(int32) %130(int32)
  br %131(int1) ? 53 : 7
bb:7 (succs: 8 20)
 defs: [%132,%133]
  %132(int32). binop op:lshr(8) %105(int32) %80(int32) (flags:0)
  %133(int1). cmp2 op:icmp_ult(36) %105(int32) %84(int32)
  br %133(int1) ? 8 : 20
bb:8 (succs: 11 9)
 defs: [%134,%144]
  %134(int32). binop op:sub(1) %75(int32) %105(int32) (flags:0)
  %135(int32). binop op:add(0) %70(int32) %134(int32) (flags:0)
  %136(int32). load src:%135(int32) align=1
  %137(int32). binop op:sub(1) %77(int32) %105(int32) (flags:0)
  %138(int32). binop op:add(0) %70(int32) %137(int32) (flags:0)
  %139(int32). load src:%138(int32) align=1
  %140(int32). binop op:shl(7) %132(int32) %76(int32) (flags:0)
  %141(int32). binop op:add(0) %64(int32) %81(int32) (flags:0)
  %142(int32). binop op:mul(2) %140(int32) %73(int32) (flags:0)
  %143(int32). binop op:add(0) %141(int32) %142(int32) (flags:0)
  %144(int1). cmp2 op:icmp_eq(32) %136(int32) %143(int32)
  br %144(int1) ? 11 : 9
bb:9 (succs: 19 10)
 defs: [%145,%145]
  %145(int1). cmp2 op:icmp_ult(36) %136(int32) %127(int32)
  br %145(int1) ? 19 : 10
bb:10 (succs: 11 19)
 defs: [%146,%148]
  %146(int32). binop op:add(0) %136(int32) %77(int32) (flags:0)
  %147(int32). load src:%146(int32) align=1
  %148(int1). cmp2 op:icmp_eq(32) %147(int32) %124(int32)
  br %148(int1) ? 11 : 19
bb:11 (succs: 12 13)
 defs: [%149,%149]
  %149(int1). cmp2 op:icmp_eq(32) %139(int32) %136(int32)
  br %149(int1) ? 12 : 13
bb:12 (succs: 56)
 defs: [%150,%153]
  %150(int32). binop op:shl(7) %76(int32) %132(int32) (flags:0)
  %151(int32). binop op:xor(12) %150(int32) %82(int32) (flags:0)
  %152(int32). load src:%64(int32) align=1
  %153(int32). binop op:and(10) %152(int32) %151(int32) (flags:0)
  store dest:%64(int32) value:%153(int32) align=1
  br 56
bb:13 (succs: 14 15)
 defs: [%154,%154]
  %154(int1). cmp2 op:icmp_eq(32) %139(int32) %143(int32)
  br %154(int1) ? 14 : 15
bb:14 (succs: 17)
 defs: [%155,%155]
  %155(int32). binop op:add(0) %139(int32) %75(int32) (flags:0)
  br 17
bb:15 (succs: 18 16)
 defs: [%156,%156]
  %156(int1). cmp2 op:icmp_ult(36) %139(int32) %127(int32)
  br %156(int1) ? 18 : 16
bb:16 (succs: 17 18)
 defs: [%157,%159]
  %157(int32). binop op:add(0) %139(int32) %75(int32) (flags:0)
  %158(int32). load src:%157(int32) align=1
  %159(int1). cmp2 op:icmp_eq(32) %158(int32) %124(int32)
  br %159(int1) ? 17 : 18
bb:17 (succs: 56)
 defs: [%160,%161]
  %160(int32). phi bb:14=>%155(int32) bb:16=>%157(int32)
  %161(int32). binop op:add(0) %136(int32) %77(int32) (flags:0)
  store dest:%161(int32) value:%139(int32) align=1
  store dest:%160(int32) value:%136(int32) align=1
  br 56
bb:18 (succs:)
  call %3(void()) args:
  unreachable
bb:19 (succs:)
  call %3(void()) args:
  unreachable
bb:20 (succs: 26 21)
 defs: [%162,%168]
  %162(int32). binop op:sub(1) %79(int32) %105(int32) (flags:0)
  %163(int32). binop op:add(0) %70(int32) %162(int32) (flags:0)
  %164(int32). load src:%163(int32) align=1
  %165(int32). binop op:sub(1) %77(int32) %105(int32) (flags:0)
  %166(int32). binop op:add(0) %70(int32) %165(int32) (flags:0)
  %167(int32). load src:%166(int32) align=1
  %168(int1). cmp2 op:icmp_eq(32) %167(int32) %124(int32)
  br %168(int1) ? 26 : 21
bb:21 (succs: 25 22)
 defs: [%169,%172]
  %169(int32). binop op:sub(1) %75(int32) %105(int32) (flags:0)
  %170(int32). binop op:add(0) %70(int32) %169(int32) (flags:0)
  %171(int32). load src:%170(int32) align=1
  %172(int1). cmp2 op:icmp_ult(36) %171(int32) %127(int32)
  br %172(int1) ? 25 : 22
bb:22 (succs: 23 25)
 defs: [%173,%175]
  %173(int32). binop op:add(0) %171(int32) %77(int32) (flags:0)
  %174(int32). load src:%173(int32) align=1
  %175(int1). cmp2 op:icmp_eq(32) %174(int32) %124(int32)
  br %175(int1) ? 23 : 25
bb:23 (succs: 24 25)
 defs: [%176,%178]
  %176(int32). binop op:add(0) %167(int32) %75(int32) (flags:0)
  %177(int32). load src:%176(int32) align=1
  %178(int1). cmp2 op:icmp_eq(32) %177(int32) %124(int32)
  br %178(int1) ? 24 : 25
bb:24 (succs: 33)
  store dest:%173(int32) value:%167(int32) align=1
  store dest:%176(int32) value:%171(int32) align=1
  br 33
bb:25 (succs:)
  call %3(void()) args:
  unreachable
bb:26 (succs: 27 28)
 defs: [%179,%183]
  %179(int32). binop op:sub(1) %74(int32) %105(int32) (flags:0)
  %180(int32). binop op:add(0) %179(int32) %73(int32) (flags:0)
  %181(int32). binop op:add(0) %70(int32) %180(int32) (flags:0)
  %182(int32). load src:%181(int32) align=1
  %183(int1). cmp2 op:icmp_eq(32) %182(int32) %72(int32)
  br %183(int1) ? 27 : 28
bb:27 (succs: 33 28)
 defs: [%184,%186]
  %184(int32). binop op:add(0) %70(int32) %179(int32) (flags:0)
  %185(int32). load src:%184(int32) align=1
  %186(int1). cmp2 op:icmp_eq(32) %185(int32) %72(int32)
  br %186(int1) ? 33 : 28
bb:28 (succs: 29 28)
 defs: [%187,%191]
  forwardtyperef %189(int32) int32
  forwardtyperef %192(int32) int32
  %187(int32). phi bb:26=>%181(int32) bb:27=>%184(int32) bb:28=>%189(int32) bb:29=>%192(int32)
  forwardtyperef %190(int32) int32
  forwardtyperef %193(int32) int32
  %188(int32). phi bb:26=>%182(int32) bb:27=>%185(int32) bb:28=>%190(int32) bb:29=>%193(int32)
  %189(int32). binop op:add(0) %188(int32) %78(int32) (flags:0)
  %190(int32). load src:%189(int32) align=1
  %191(int1). cmp2 op:icmp_eq(32) %190(int32) %72(int32)
  br %191(int1) ? 29 : 28
bb:29 (succs: 30 28)
 defs: [%192,%194]
  %192(int32). binop op:add(0) %188(int32) %74(int32) (flags:0)
  %193(int32). load src:%192(int32) align=1
  %194(int1). cmp2 op:icmp_eq(32) %193(int32) %72(int32)
  br %194(int1) ? 30 : 28
bb:30 (succs: 32 31)
 defs: [%195,%195]
  %195(int1). cmp2 op:icmp_ult(36) %187(int32) %127(int32)
  br %195(int1) ? 32 : 31
bb:31 (succs: 33)
  store dest:%187(int32) value:%72(int32) align=1
  br 33
bb:32 (succs:)
  call %3(void()) args:
  unreachable
bb:33 (succs: 56 34)
 defs: [%196,%197]
  %196(int32). phi bb:24=>%167(int32) bb:31=>%188(int32) bb:27=>%72(int32)
  %197(int1). cmp2 op:icmp_eq(32) %164(int32) %72(int32)
  br %197(int1) ? 56 : 34
bb:34 (succs: 35 37)
 defs: [%198,%205]
  %198(int32). binop op:sub(1) %85(int32) %105(int32) (flags:0)
  %199(int32). binop op:add(0) %70(int32) %198(int32) (flags:0)
  %200(int32). load src:%199(int32) align=1
  %201(int32). binop op:add(0) %64(int32) %86(int32) (flags:0)
  %202(int32). binop op:mul(2) %200(int32) %73(int32) (flags:0)
  %203(int32). binop op:add(0) %201(int32) %202(int32) (flags:0)
  %204(int32). load src:%203(int32) align=1
  %205(int1). cmp2 op:icmp_eq(32) %124(int32) %204(int32)
  br %205(int1) ? 35 : 37
bb:35 (succs: 36 43)
 defs: [%206,%206]
  store dest:%203(int32) value:%196(int32) align=1
  %206(int1). cmp2 op:icmp_eq(32) %196(int32) %72(int32)
  br %206(int1) ? 36 : 43
bb:36 (succs: 56)
 defs: [%207,%212]
  %207(int32). binop op:shl(7) %76(int32) %200(int32) (flags:0)
  %208(int32). binop op:xor(12) %207(int32) %82(int32) (flags:0)
  %209(int32). binop op:add(0) %64(int32) %73(int32) (flags:0)
  %210(int32). load src:%209(int32) align=1
  %211(int32). binop op:and(10) %210(int32) %208(int32) (flags:0)
  %212(int32). binop op:add(0) %64(int32) %73(int32) (flags:0)
  store dest:%212(int32) value:%211(int32) align=1
  br 56
bb:37 (succs: 41 38)
 defs: [%213,%215]
  %213(int32). binop op:add(0) %64(int32) %74(int32) (flags:0)
  %214(int32). load src:%213(int32) align=1
  %215(int1). cmp2 op:icmp_ult(36) %164(int32) %214(int32)
  br %215(int1) ? 41 : 38
bb:38 (succs: 39 40)
 defs: [%216,%218]
  %216(int32). binop op:add(0) %164(int32) %74(int32) (flags:0)
  %217(int32). load src:%216(int32) align=1
  %218(int1). cmp2 op:icmp_eq(32) %217(int32) %124(int32)
  br %218(int1) ? 39 : 40
bb:39 (succs: 42)
  store dest:%216(int32) value:%196(int32) align=1
  br 42
bb:40 (succs: 42)
 defs: [%219,%219]
  %219(int32). binop op:add(0) %164(int32) %78(int32) (flags:0)
  store dest:%219(int32) value:%196(int32) align=1
  br 42
bb:41 (succs:)
  call %3(void()) args:
  unreachable
bb:42 (succs: 56 43)
 defs: [%220,%220]
  %220(int1). cmp2 op:icmp_eq(32) %196(int32) %72(int32)
  br %220(int1) ? 56 : 43
bb:43 (succs: 52 44)
 defs: [%221,%223]
  %221(int32). binop op:add(0) %64(int32) %74(int32) (flags:0)
  %222(int32). load src:%221(int32) align=1
  %223(int1). cmp2 op:icmp_ult(36) %196(int32) %222(int32)
  br %223(int1) ? 52 : 44
bb:44 (succs: 48 45)
 defs: [%224,%228]
  %224(int32). binop op:add(0) %196(int32) %79(int32) (flags:0)
  store dest:%224(int32) value:%164(int32) align=1
  %225(int32). binop op:sub(1) %74(int32) %105(int32) (flags:0)
  %226(int32). binop op:add(0) %70(int32) %225(int32) (flags:0)
  %227(int32). load src:%226(int32) align=1
  %228(int1). cmp2 op:icmp_eq(32) %227(int32) %72(int32)
  br %228(int1) ? 48 : 45
bb:45 (succs: 47 46)
 defs: [%229,%229]
  %229(int1). cmp2 op:icmp_ult(36) %227(int32) %222(int32)
  br %229(int1) ? 47 : 46
bb:46 (succs: 48)
 defs: [%230,%231]
  %230(int32). binop op:add(0) %196(int32) %74(int32) (flags:0)
  store dest:%230(int32) value:%227(int32) align=1
  %231(int32). binop op:add(0) %227(int32) %79(int32) (flags:0)
  store dest:%231(int32) value:%196(int32) align=1
  br 48
bb:47 (succs:)
  call %3(void()) args:
  unreachable
bb:48 (succs: 56 49)
 defs: [%232,%235]
  %232(int32). binop op:add(0) %225(int32) %73(int32) (flags:0)
  %233(int32). binop op:add(0) %70(int32) %232(int32) (flags:0)
  %234(int32). load src:%233(int32) align=1
  %235(int1). cmp2 op:icmp_eq(32) %234(int32) %72(int32)
  br %235(int1) ? 56 : 49
bb:49 (succs: 51 50)
 defs: [%236,%238]
  %236(int32). binop op:add(0) %64(int32) %74(int32) (flags:0)
  %237(int32). load src:%236(int32) align=1
  %238(int1). cmp2 op:icmp_ult(36) %234(int32) %237(int32)
  br %238(int1) ? 51 : 50
bb:50 (succs: 56)
 defs: [%239,%240]
  %239(int32). binop op:add(0) %196(int32) %78(int32) (flags:0)
  store dest:%239(int32) value:%234(int32) align=1
  %240(int32). binop op:add(0) %234(int32) %79(int32) (flags:0)
  store dest:%240(int32) value:%196(int32) align=1
  br 56
bb:51 (succs:)
  call %3(void()) args:
  unreachable
bb:52 (succs:)
  call %3(void()) args:
  unreachable
bb:53 (succs: 54 56)
 defs: [%241,%245]
  %241(int32). binop op:add(0) %71(int32) %73(int32) (flags:0)
  %242(int32). binop op:add(0) %70(int32) %241(int32) (flags:0)
  %243(int32). load src:%242(int32) align=1
  %244(int32). binop op:and(10) %243(int32) %80(int32) (flags:0)
  %245(int1). cmp2 op:icmp_eq(32) %244(int32) %80(int32)
  br %245(int1) ? 54 : 56
bb:54 (succs: 136)
 defs: [%246,%250]
  %246(int32). binop op:add(0) %64(int32) %75(int32) (flags:0)
  store dest:%246(int32) value:%125(int32) align=1
  %247(int32). binop op:and(10) %243(int32) %90(int32) (flags:0)
  store dest:%242(int32) value:%247(int32) align=1
  %248(int32). binop op:or(11) %125(int32) %76(int32) (flags:0)
  %249(int32). binop op:sub(1) %73(int32) %105(int32) (flags:0)
  %250(int32). binop op:add(0) %70(int32) %249(int32) (flags:0)
  store dest:%250(int32) value:%248(int32) align=1
  store dest:%100(int32) value:%125(int32) align=1
  br 136
bb:55 (succs:)
  call %3(void()) args:
  unreachable
bb:56 (succs: 135 57)
 defs: [%251,%255]
  %251(int32). phi bb:0=>%71(int32) bb:12=>%125(int32) bb:17=>%125(int32) bb:50=>%125(int32) bb:48=>%125(int32) bb:42=>%125(int32) bb:33=>%125(int32) bb:53=>%125(int32) bb:36=>%125(int32)
  %252(int32). phi bb:0=>%70(int32) bb:12=>%124(int32) bb:17=>%124(int32) bb:50=>%124(int32) bb:48=>%124(int32) bb:42=>%124(int32) bb:33=>%124(int32) bb:53=>%124(int32) bb:36=>%124(int32)
  %253(int32). binop op:add(0) %64(int32) %74(int32) (flags:0)
  %254(int32). load src:%253(int32) align=1
  %255(int1). cmp2 op:icmp_ult(36) %100(int32) %254(int32)
  br %255(int1) ? 135 : 57
bb:57 (succs: 58 111)
 defs: [%256,%260]
  %256(int32). binop op:add(0) %71(int32) %73(int32) (flags:0)
  %257(int32). binop op:add(0) %70(int32) %256(int32) (flags:0)
  %258(int32). load src:%257(int32) align=1
  %259(int32). binop op:and(10) %258(int32) %83(int32) (flags:0)
  %260(int1). cmp2 op:icmp_eq(32) %259(int32) %72(int32)
  br %260(int1) ? 58 : 111
bb:58 (succs: 59 61)
 defs: [%261,%263]
  %261(int32). binop op:add(0) %64(int32) %79(int32) (flags:0)
  %262(int32). load src:%261(int32) align=1
  %263(int1). cmp2 op:icmp_eq(32) %100(int32) %262(int32)
  br %263(int1) ? 59 : 61
bb:59 (succs: 60 136)
 defs: [%264,%273]
  %264(int32). binop op:add(0) %64(int32) %77(int32) (flags:0)
  %265(int32). load src:%264(int32) align=1
  %266(int32). binop op:add(0) %265(int32) %251(int32) (flags:0)
  %267(int32). binop op:add(0) %64(int32) %77(int32) (flags:0)
  store dest:%267(int32) value:%266(int32) align=1
  %268(int32). binop op:add(0) %64(int32) %79(int32) (flags:0)
  store dest:%268(int32) value:%252(int32) align=1
  %269(int32). binop op:or(11) %266(int32) %76(int32) (flags:0)
  %270(int32). binop op:add(0) %252(int32) %73(int32) (flags:0)
  store dest:%270(int32) value:%269(int32) align=1
  %271(int32). binop op:add(0) %64(int32) %78(int32) (flags:0)
  %272(int32). load src:%271(int32) align=1
  %273(int1). cmp2 op:icmp_eq(32) %252(int32) %272(int32)
  br %273(int1) ? 60 : 136
bb:60 (succs: 136)
 defs: [%274,%275]
  %274(int32). binop op:add(0) %64(int32) %78(int32) (flags:0)
  store dest:%274(int32) value:%72(int32) align=1
  %275(int32). binop op:add(0) %64(int32) %75(int32) (flags:0)
  store dest:%275(int32) value:%72(int32) align=1
  br 136
bb:61 (succs: 62 63)
 defs: [%276,%278]
  %276(int32). binop op:add(0) %64(int32) %78(int32) (flags:0)
  %277(int32). load src:%276(int32) align=1
  %278(int1). cmp2 op:icmp_eq(32) %100(int32) %277(int32)
  br %278(int1) ? 62 : 63
bb:62 (succs: 136)
 defs: [%279,%286]
  %279(int32). binop op:add(0) %64(int32) %75(int32) (flags:0)
  %280(int32). load src:%279(int32) align=1
  %281(int32). binop op:add(0) %280(int32) %251(int32) (flags:0)
  %282(int32). binop op:add(0) %64(int32) %75(int32) (flags:0)
  store dest:%282(int32) value:%281(int32) align=1
  %283(int32). binop op:add(0) %64(int32) %78(int32) (flags:0)
  store dest:%283(int32) value:%252(int32) align=1
  %284(int32). binop op:or(11) %281(int32) %76(int32) (flags:0)
  %285(int32). binop op:add(0) %252(int32) %73(int32) (flags:0)
  store dest:%285(int32) value:%284(int32) align=1
  %286(int32). binop op:add(0) %252(int32) %281(int32) (flags:0)
  store dest:%286(int32) value:%281(int32) align=1
  br 136
bb:63 (succs: 64 76)
 defs: [%287,%290]
  %287(int32). binop op:and(10) %258(int32) %87(int32) (flags:0)
  %288(int32). binop op:add(0) %287(int32) %251(int32) (flags:0)
  %289(int32). binop op:lshr(8) %258(int32) %80(int32) (flags:0)
  %290(int1). cmp2 op:icmp_ult(36) %258(int32) %84(int32)
  br %290(int1) ? 64 : 76
bb:64 (succs: 67 65)
 defs: [%291,%301]
  %291(int32). binop op:add(0) %71(int32) %75(int32) (flags:0)
  %292(int32). binop op:add(0) %70(int32) %291(int32) (flags:0)
  %293(int32). load src:%292(int32) align=1
  %294(int32). binop op:add(0) %71(int32) %77(int32) (flags:0)
  %295(int32). binop op:add(0) %70(int32) %294(int32) (flags:0)
  %296(int32). load src:%295(int32) align=1
  %297(int32). binop op:shl(7) %289(int32) %76(int32) (flags:0)
  %298(int32). binop op:add(0) %64(int32) %81(int32) (flags:0)
  %299(int32). binop op:mul(2) %297(int32) %73(int32) (flags:0)
  %300(int32). binop op:add(0) %298(int32) %299(int32) (flags:0)
  %301(int1). cmp2 op:icmp_eq(32) %293(int32) %300(int32)
  br %301(int1) ? 67 : 65
bb:65 (succs: 75 66)
 defs: [%302,%302]
  %302(int1). cmp2 op:icmp_ult(36) %293(int32) %254(int32)
  br %302(int1) ? 75 : 66
bb:66 (succs: 67 75)
 defs: [%303,%305]
  %303(int32). binop op:add(0) %293(int32) %77(int32) (flags:0)
  %304(int32). load src:%303(int32) align=1
  %305(int1). cmp2 op:icmp_eq(32) %304(int32) %100(int32)
  br %305(int1) ? 67 : 75
bb:67 (succs: 68 69)
 defs: [%306,%306]
  %306(int1). cmp2 op:icmp_eq(32) %296(int32) %293(int32)
  br %306(int1) ? 68 : 69
bb:68 (succs: 109)
 defs: [%307,%310]
  %307(int32). binop op:shl(7) %76(int32) %289(int32) (flags:0)
  %308(int32). binop op:xor(12) %307(int32) %82(int32) (flags:0)
  %309(int32). load src:%64(int32) align=1
  %310(int32). binop op:and(10) %309(int32) %308(int32) (flags:0)
  store dest:%64(int32) value:%310(int32) align=1
  br 109
bb:69 (succs: 70 71)
 defs: [%311,%311]
  %311(int1). cmp2 op:icmp_eq(32) %296(int32) %300(int32)
  br %311(int1) ? 70 : 71
bb:70 (succs: 73)
 defs: [%312,%312]
  %312(int32). binop op:add(0) %296(int32) %75(int32) (flags:0)
  br 73
bb:71 (succs: 74 72)
 defs: [%313,%313]
  %313(int1). cmp2 op:icmp_ult(36) %296(int32) %254(int32)
  br %313(int1) ? 74 : 72
bb:72 (succs: 73 74)
 defs: [%314,%316]
  %314(int32). binop op:add(0) %296(int32) %75(int32) (flags:0)
  %315(int32). load src:%314(int32) align=1
  %316(int1). cmp2 op:icmp_eq(32) %315(int32) %100(int32)
  br %316(int1) ? 73 : 74
bb:73 (succs: 109)
 defs: [%317,%318]
  %317(int32). phi bb:70=>%312(int32) bb:72=>%314(int32)
  %318(int32). binop op:add(0) %293(int32) %77(int32) (flags:0)
  store dest:%318(int32) value:%296(int32) align=1
  store dest:%317(int32) value:%293(int32) align=1
  br 109
bb:74 (succs:)
  call %3(void()) args:
  unreachable
bb:75 (succs:)
  call %3(void()) args:
  unreachable
bb:76 (succs: 82 77)
 defs: [%319,%325]
  %319(int32). binop op:add(0) %71(int32) %79(int32) (flags:0)
  %320(int32). binop op:add(0) %70(int32) %319(int32) (flags:0)
  %321(int32). load src:%320(int32) align=1
  %322(int32). binop op:add(0) %71(int32) %77(int32) (flags:0)
  %323(int32). binop op:add(0) %70(int32) %322(int32) (flags:0)
  %324(int32). load src:%323(int32) align=1
  %325(int1). cmp2 op:icmp_eq(32) %324(int32) %100(int32)
  br %325(int1) ? 82 : 77
bb:77 (succs: 81 78)
 defs: [%326,%329]
  %326(int32). binop op:add(0) %71(int32) %75(int32) (flags:0)
  %327(int32). binop op:add(0) %70(int32) %326(int32) (flags:0)
  %328(int32). load src:%327(int32) align=1
  %329(int1). cmp2 op:icmp_ult(36) %328(int32) %254(int32)
  br %329(int1) ? 81 : 78
bb:78 (succs: 79 81)
 defs: [%330,%332]
  %330(int32). binop op:add(0) %328(int32) %77(int32) (flags:0)
  %331(int32). load src:%330(int32) align=1
  %332(int1). cmp2 op:icmp_eq(32) %331(int32) %100(int32)
  br %332(int1) ? 79 : 81
bb:79 (succs: 80 81)
 defs: [%333,%335]
  %333(int32). binop op:add(0) %324(int32) %75(int32) (flags:0)
  %334(int32). load src:%333(int32) align=1
  %335(int1). cmp2 op:icmp_eq(32) %334(int32) %100(int32)
  br %335(int1) ? 80 : 81
bb:80 (succs: 89)
  store dest:%330(int32) value:%324(int32) align=1
  store dest:%333(int32) value:%328(int32) align=1
  br 89
bb:81 (succs:)
  call %3(void()) args:
  unreachable
bb:82 (succs: 83 84)
 defs: [%336,%339]
  %336(int32). binop op:add(0) %71(int32) %78(int32) (flags:0)
  %337(int32). binop op:add(0) %70(int32) %336(int32) (flags:0)
  %338(int32). load src:%337(int32) align=1
  %339(int1). cmp2 op:icmp_eq(32) %338(int32) %72(int32)
  br %339(int1) ? 83 : 84
bb:83 (succs: 89 84)
 defs: [%340,%343]
  %340(int32). binop op:add(0) %71(int32) %74(int32) (flags:0)
  %341(int32). binop op:add(0) %70(int32) %340(int32) (flags:0)
  %342(int32). load src:%341(int32) align=1
  %343(int1). cmp2 op:icmp_eq(32) %342(int32) %72(int32)
  br %343(int1) ? 89 : 84
bb:84 (succs: 85 84)
 defs: [%344,%348]
  forwardtyperef %346(int32) int32
  forwardtyperef %349(int32) int32
  %344(int32). phi bb:82=>%337(int32) bb:83=>%341(int32) bb:84=>%346(int32) bb:85=>%349(int32)
  forwardtyperef %347(int32) int32
  forwardtyperef %350(int32) int32
  %345(int32). phi bb:82=>%338(int32) bb:83=>%342(int32) bb:84=>%347(int32) bb:85=>%350(int32)
  %346(int32). binop op:add(0) %345(int32) %78(int32) (flags:0)
  %347(int32). load src:%346(int32) align=1
  %348(int1). cmp2 op:icmp_eq(32) %347(int32) %72(int32)
  br %348(int1) ? 85 : 84
bb:85 (succs: 86 84)
 defs: [%349,%351]
  %349(int32). binop op:add(0) %345(int32) %74(int32) (flags:0)
  %350(int32). load src:%349(int32) align=1
  %351(int1). cmp2 op:icmp_eq(32) %350(int32) %72(int32)
  br %351(int1) ? 86 : 84
bb:86 (succs: 88 87)
 defs: [%352,%352]
  %352(int1). cmp2 op:icmp_ult(36) %344(int32) %254(int32)
  br %352(int1) ? 88 : 87
bb:87 (succs: 89)
  store dest:%344(int32) value:%72(int32) align=1
  br 89
bb:88 (succs:)
  call %3(void()) args:
  unreachable
bb:89 (succs: 109 90)
 defs: [%353,%354]
  %353(int32). phi bb:80=>%324(int32) bb:87=>%345(int32) bb:83=>%72(int32)
  %354(int1). cmp2 op:icmp_eq(32) %321(int32) %72(int32)
  br %354(int1) ? 109 : 90
bb:90 (succs: 91 93)
 defs: [%355,%362]
  %355(int32). binop op:add(0) %71(int32) %85(int32) (flags:0)
  %356(int32). binop op:add(0) %70(int32) %355(int32) (flags:0)
  %357(int32). load src:%356(int32) align=1
  %358(int32). binop op:add(0) %64(int32) %86(int32) (flags:0)
  %359(int32). binop op:mul(2) %357(int32) %73(int32) (flags:0)
  %360(int32). binop op:add(0) %358(int32) %359(int32) (flags:0)
  %361(int32). load src:%360(int32) align=1
  %362(int1). cmp2 op:icmp_eq(32) %100(int32) %361(int32)
  br %362(int1) ? 91 : 93
bb:91 (succs: 92 99)
 defs: [%363,%363]
  store dest:%360(int32) value:%353(int32) align=1
  %363(int1). cmp2 op:icmp_eq(32) %353(int32) %72(int32)
  br %363(int1) ? 92 : 99
bb:92 (succs: 109)
 defs: [%364,%369]
  %364(int32). binop op:shl(7) %76(int32) %357(int32) (flags:0)
  %365(int32). binop op:xor(12) %364(int32) %82(int32) (flags:0)
  %366(int32). binop op:add(0) %64(int32) %73(int32) (flags:0)
  %367(int32). load src:%366(int32) align=1
  %368(int32). binop op:and(10) %367(int32) %365(int32) (flags:0)
  %369(int32). binop op:add(0) %64(int32) %73(int32) (flags:0)
  store dest:%369(int32) value:%368(int32) align=1
  br 109
bb:93 (succs: 97 94)
 defs: [%370,%372]
  %370(int32). binop op:add(0) %64(int32) %74(int32) (flags:0)
  %371(int32). load src:%370(int32) align=1
  %372(int1). cmp2 op:icmp_ult(36) %321(int32) %371(int32)
  br %372(int1) ? 97 : 94
bb:94 (succs: 95 96)
 defs: [%373,%375]
  %373(int32). binop op:add(0) %321(int32) %74(int32) (flags:0)
  %374(int32). load src:%373(int32) align=1
  %375(int1). cmp2 op:icmp_eq(32) %374(int32) %100(int32)
  br %375(int1) ? 95 : 96
bb:95 (succs: 98)
  store dest:%373(int32) value:%353(int32) align=1
  br 98
bb:96 (succs: 98)
 defs: [%376,%376]
  %376(int32). binop op:add(0) %321(int32) %78(int32) (flags:0)
  store dest:%376(int32) value:%353(int32) align=1
  br 98
bb:97 (succs:)
  call %3(void()) args:
  unreachable
bb:98 (succs: 109 99)
 defs: [%377,%377]
  %377(int1). cmp2 op:icmp_eq(32) %353(int32) %72(int32)
  br %377(int1) ? 109 : 99
bb:99 (succs: 108 100)
 defs: [%378,%380]
  %378(int32). binop op:add(0) %64(int32) %74(int32) (flags:0)
  %379(int32). load src:%378(int32) align=1
  %380(int1). cmp2 op:icmp_ult(36) %353(int32) %379(int32)
  br %380(int1) ? 108 : 100
bb:100 (succs: 104 101)
 defs: [%381,%385]
  %381(int32). binop op:add(0) %353(int32) %79(int32) (flags:0)
  store dest:%381(int32) value:%321(int32) align=1
  %382(int32). binop op:add(0) %71(int32) %74(int32) (flags:0)
  %383(int32). binop op:add(0) %70(int32) %382(int32) (flags:0)
  %384(int32). load src:%383(int32) align=1
  %385(int1). cmp2 op:icmp_eq(32) %384(int32) %72(int32)
  br %385(int1) ? 104 : 101
bb:101 (succs: 103 102)
 defs: [%386,%386]
  %386(int1). cmp2 op:icmp_ult(36) %384(int32) %379(int32)
  br %386(int1) ? 103 : 102
bb:102 (succs: 104)
 defs: [%387,%388]
  %387(int32). binop op:add(0) %353(int32) %74(int32) (flags:0)
  store dest:%387(int32) value:%384(int32) align=1
  %388(int32). binop op:add(0) %384(int32) %79(int32) (flags:0)
  store dest:%388(int32) value:%353(int32) align=1
  br 104
bb:103 (succs:)
  call %3(void()) args:
  unreachable
bb:104 (succs: 109 105)
 defs: [%389,%392]
  %389(int32). binop op:add(0) %71(int32) %78(int32) (flags:0)
  %390(int32). binop op:add(0) %70(int32) %389(int32) (flags:0)
  %391(int32). load src:%390(int32) align=1
  %392(int1). cmp2 op:icmp_eq(32) %391(int32) %72(int32)
  br %392(int1) ? 109 : 105
bb:105 (succs: 107 106)
 defs: [%393,%395]
  %393(int32). binop op:add(0) %64(int32) %74(int32) (flags:0)
  %394(int32). load src:%393(int32) align=1
  %395(int1). cmp2 op:icmp_ult(36) %391(int32) %394(int32)
  br %395(int1) ? 107 : 106
bb:106 (succs: 109)
 defs: [%396,%397]
  %396(int32). binop op:add(0) %353(int32) %78(int32) (flags:0)
  store dest:%396(int32) value:%391(int32) align=1
  %397(int32). binop op:add(0) %391(int32) %79(int32) (flags:0)
  store dest:%397(int32) value:%353(int32) align=1
  br 109
bb:107 (succs:)
  call %3(void()) args:
  unreachable
bb:108 (succs:)
  call %3(void()) args:
  unreachable
bb:109 (succs: 110 112)
 defs: [%398,%403]
  %398(int32). binop op:or(11) %288(int32) %76(int32) (flags:0)
  %399(int32). binop op:add(0) %252(int32) %73(int32) (flags:0)
  store dest:%399(int32) value:%398(int32) align=1
  %400(int32). binop op:add(0) %252(int32) %288(int32) (flags:0)
  store dest:%400(int32) value:%288(int32) align=1
  %401(int32). binop op:add(0) %64(int32) %78(int32) (flags:0)
  %402(int32). load src:%401(int32) align=1
  %403(int1). cmp2 op:icmp_eq(32) %252(int32) %402(int32)
  br %403(int1) ? 110 : 112
bb:110 (succs: 136)
 defs: [%404,%404]
  %404(int32). binop op:add(0) %64(int32) %75(int32) (flags:0)
  store dest:%404(int32) value:%288(int32) align=1
  br 136
bb:111 (succs: 112)
 defs: [%405,%408]
  %405(int32). binop op:and(10) %258(int32) %90(int32) (flags:0)
  store dest:%257(int32) value:%405(int32) align=1
  %406(int32). binop op:or(11) %251(int32) %76(int32) (flags:0)
  %407(int32). binop op:add(0) %252(int32) %73(int32) (flags:0)
  store dest:%407(int32) value:%406(int32) align=1
  %408(int32). binop op:add(0) %252(int32) %251(int32) (flags:0)
  store dest:%408(int32) value:%251(int32) align=1
  br 112
bb:112 (succs: 113 118)
 defs: [%409,%411]
  %409(int32). phi bb:111=>%251(int32) bb:109=>%288(int32)
  %410(int32). binop op:lshr(8) %409(int32) %80(int32) (flags:0)
  %411(int1). cmp2 op:icmp_ult(36) %409(int32) %84(int32)
  br %411(int1) ? 113 : 118
bb:113 (succs: 114 115)
 defs: [%412,%419]
  %412(int32). binop op:shl(7) %410(int32) %76(int32) (flags:0)
  %413(int32). binop op:add(0) %64(int32) %81(int32) (flags:0)
  %414(int32). binop op:mul(2) %412(int32) %73(int32) (flags:0)
  %415(int32). binop op:add(0) %413(int32) %414(int32) (flags:0)
  %416(int32). load src:%64(int32) align=1
  %417(int32). binop op:shl(7) %76(int32) %410(int32) (flags:0)
  %418(int32). binop op:and(10) %416(int32) %417(int32) (flags:0)
  %419(int1). cmp2 op:icmp_eq(32) %418(int32) %72(int32)
  br %419(int1) ? 114 : 115
bb:114 (succs: 117)
 defs: [%420,%424]
  %420(int32). binop op:or(11) %416(int32) %417(int32) (flags:0)
  store dest:%64(int32) value:%420(int32) align=1
  %421(int32). binop op:add(0) %412(int32) %83(int32) (flags:0)
  %422(int32). binop op:add(0) %64(int32) %81(int32) (flags:0)
  %423(int32). binop op:mul(2) %421(int32) %73(int32) (flags:0)
  %424(int32). binop op:add(0) %422(int32) %423(int32) (flags:0)
  br 117
bb:115 (succs: 116 117)
 defs: [%425,%432]
  %425(int32). binop op:add(0) %412(int32) %83(int32) (flags:0)
  %426(int32). binop op:add(0) %64(int32) %81(int32) (flags:0)
  %427(int32). binop op:mul(2) %425(int32) %73(int32) (flags:0)
  %428(int32). binop op:add(0) %426(int32) %427(int32) (flags:0)
  %429(int32). load src:%428(int32) align=1
  %430(int32). binop op:add(0) %64(int32) %74(int32) (flags:0)
  %431(int32). load src:%430(int32) align=1
  %432(int1). cmp2 op:icmp_ult(36) %429(int32) %431(int32)
  br %432(int1) ? 116 : 117
bb:116 (succs:)
  call %3(void()) args:
  unreachable
bb:117 (succs: 136)
 defs: [%433,%437]
  %433(int32). phi bb:115=>%428(int32) bb:114=>%424(int32)
  %434(int32). phi bb:115=>%429(int32) bb:114=>%415(int32)
  store dest:%433(int32) value:%252(int32) align=1
  %435(int32). binop op:add(0) %434(int32) %77(int32) (flags:0)
  store dest:%435(int32) value:%252(int32) align=1
  %436(int32). binop op:add(0) %252(int32) %75(int32) (flags:0)
  store dest:%436(int32) value:%434(int32) align=1
  %437(int32). binop op:add(0) %252(int32) %77(int32) (flags:0)
  store dest:%437(int32) value:%415(int32) align=1
  br 136
bb:118 (succs: 121 119)
 defs: [%438,%439]
  %438(int32). binop op:lshr(8) %409(int32) %75(int32) (flags:0)
  %439(int1). cmp2 op:icmp_eq(32) %438(int32) %72(int32)
  br %439(int1) ? 121 : 119
bb:119 (succs: 121 120)
 defs: [%440,%440]
  %440(int1). cmp2 op:icmp_ugt(34) %409(int32) %92(int32)
  br %440(int1) ? 121 : 120
bb:120 (succs: 121)
 defs: [%441,%462]
  %441(int32). binop op:add(0) %438(int32) %93(int32) (flags:0)
  %442(int32). binop op:lshr(8) %441(int32) %74(int32) (flags:0)
  %443(int32). binop op:and(10) %442(int32) %75(int32) (flags:0)
  %444(int32). binop op:shl(7) %438(int32) %443(int32) (flags:0)
  %445(int32). binop op:add(0) %444(int32) %94(int32) (flags:0)
  %446(int32). binop op:lshr(8) %445(int32) %74(int32) (flags:0)
  %447(int32). binop op:and(10) %446(int32) %73(int32) (flags:0)
  %448(int32). binop op:or(11) %447(int32) %443(int32) (flags:0)
  %449(int32). binop op:shl(7) %444(int32) %447(int32) (flags:0)
  %450(int32). binop op:add(0) %449(int32) %95(int32) (flags:0)
  %451(int32). binop op:lshr(8) %450(int32) %74(int32) (flags:0)
  %452(int32). binop op:and(10) %451(int32) %83(int32) (flags:0)
  %453(int32). binop op:or(11) %448(int32) %452(int32) (flags:0)
  %454(int32). binop op:sub(1) %96(int32) %453(int32) (flags:0)
  %455(int32). binop op:shl(7) %449(int32) %452(int32) (flags:0)
  %456(int32). binop op:lshr(8) %455(int32) %97(int32) (flags:0)
  %457(int32). binop op:add(0) %454(int32) %456(int32) (flags:0)
  %458(int32). binop op:shl(7) %457(int32) %76(int32) (flags:0)
  %459(int32). binop op:add(0) %457(int32) %98(int32) (flags:0)
  %460(int32). binop op:lshr(8) %409(int32) %459(int32) (flags:0)
  %461(int32). binop op:and(10) %460(int32) %76(int32) (flags:0)
  %462(int32). binop op:or(11) %461(int32) %458(int32) (flags:0)
  br 121
bb:121 (succs: 122 123)
 defs: [%463,%474]
  %463(int32). phi bb:120=>%462(int32) bb:118=>%72(int32) bb:119=>%88(int32)
  %464(int32). binop op:add(0) %64(int32) %86(int32) (flags:0)
  %465(int32). binop op:mul(2) %463(int32) %73(int32) (flags:0)
  %466(int32). binop op:add(0) %464(int32) %465(int32) (flags:0)
  %467(int32). binop op:add(0) %252(int32) %85(int32) (flags:0)
  store dest:%467(int32) value:%463(int32) align=1
  %468(int32). binop op:add(0) %252(int32) %74(int32) (flags:0)
  %469(int32). binop op:add(0) %252(int32) %78(int32) (flags:0)
  store dest:%469(int32) value:%72(int32) align=1
  store dest:%468(int32) value:%72(int32) align=1
  %470(int32). binop op:add(0) %64(int32) %73(int32) (flags:0)
  %471(int32). load src:%470(int32) align=1
  %472(int32). binop op:shl(7) %76(int32) %463(int32) (flags:0)
  %473(int32). binop op:and(10) %471(int32) %472(int32) (flags:0)
  %474(int1). cmp2 op:icmp_eq(32) %473(int32) %72(int32)
  br %474(int1) ? 122 : 123
bb:122 (succs: 136)
 defs: [%475,%479]
  %475(int32). binop op:or(11) %471(int32) %472(int32) (flags:0)
  %476(int32). binop op:add(0) %64(int32) %73(int32) (flags:0)
  store dest:%476(int32) value:%475(int32) align=1
  store dest:%466(int32) value:%252(int32) align=1
  %477(int32). binop op:add(0) %252(int32) %79(int32) (flags:0)
  store dest:%477(int32) value:%466(int32) align=1
  %478(int32). binop op:add(0) %252(int32) %77(int32) (flags:0)
  store dest:%478(int32) value:%252(int32) align=1
  %479(int32). binop op:add(0) %252(int32) %75(int32) (flags:0)
  store dest:%479(int32) value:%252(int32) align=1
  br 136
bb:123 (succs: 125 124)
 defs: [%480,%481]
  %480(int32). load src:%466(int32) align=1
  %481(int1). cmp2 op:icmp_eq(32) %463(int32) %88(int32)
  br %481(int1) ? 125 : 124
bb:124 (succs: 125)
 defs: [%482,%483]
  %482(int32). binop op:lshr(8) %463(int32) %76(int32) (flags:0)
  %483(int32). binop op:sub(1) %99(int32) %482(int32) (flags:0)
  br 125
bb:125 (succs: 132 126)
 defs: [%484,%488]
  %484(int32). phi bb:124=>%483(int32) bb:123=>%72(int32)
  %485(int32). binop op:add(0) %480(int32) %73(int32) (flags:0)
  %486(int32). load src:%485(int32) align=1
  %487(int32). binop op:and(10) %486(int32) %87(int32) (flags:0)
  %488(int1). cmp2 op:icmp_eq(32) %487(int32) %409(int32)
  br %488(int1) ? 132 : 126
bb:126 (succs: 128)
 defs: [%489,%489]
  %489(int32). binop op:shl(7) %409(int32) %484(int32) (flags:0)
  br 128
bb:127 (succs: 132 128)
 defs: [%490,%494]
  forwardtyperef %495(int32) int32
  %490(int32). binop op:shl(7) %495(int32) %76(int32) (flags:0)
  forwardtyperef %501(int32) int32
  %491(int32). binop op:add(0) %501(int32) %73(int32) (flags:0)
  %492(int32). load src:%491(int32) align=1
  %493(int32). binop op:and(10) %492(int32) %87(int32) (flags:0)
  %494(int1). cmp2 op:icmp_eq(32) %493(int32) %409(int32)
  br %494(int1) ? 132 : 128
bb:128 (succs: 129 127)
 defs: [%495,%502]
  %495(int32). phi bb:126=>%489(int32) bb:127=>%490(int32)
  %496(int32). phi bb:126=>%480(int32) bb:127=>%501(int32)
  %497(int32). binop op:lshr(8) %495(int32) %88(int32) (flags:0)
  %498(int32). binop op:add(0) %496(int32) %74(int32) (flags:0)
  %499(int32). binop op:mul(2) %497(int32) %73(int32) (flags:0)
  %500(int32). binop op:add(0) %498(int32) %499(int32) (flags:0)
  %501(int32). load src:%500(int32) align=1
  %502(int1). cmp2 op:icmp_eq(32) %501(int32) %72(int32)
  br %502(int1) ? 129 : 127
bb:129 (succs: 131 130)
 defs: [%503,%505]
  %503(int32). binop op:add(0) %64(int32) %74(int32) (flags:0)
  %504(int32). load src:%503(int32) align=1
  %505(int1). cmp2 op:icmp_ult(36) %500(int32) %504(int32)
  br %505(int1) ? 131 : 130
bb:130 (succs: 136)
 defs: [%506,%508]
  store dest:%500(int32) value:%252(int32) align=1
  %506(int32). binop op:add(0) %252(int32) %79(int32) (flags:0)
  store dest:%506(int32) value:%496(int32) align=1
  %507(int32). binop op:add(0) %252(int32) %77(int32) (flags:0)
  store dest:%507(int32) value:%252(int32) align=1
  %508(int32). binop op:add(0) %252(int32) %75(int32) (flags:0)
  store dest:%508(int32) value:%252(int32) align=1
  br 136
bb:131 (succs:)
  call %3(void()) args:
  unreachable
bb:132 (succs: 133 134)
 defs: [%509,%516]
  %509(int32). phi bb:125=>%480(int32) bb:127=>%501(int32)
  %510(int32). binop op:add(0) %509(int32) %75(int32) (flags:0)
  %511(int32). load src:%510(int32) align=1
  %512(int32). binop op:add(0) %64(int32) %74(int32) (flags:0)
  %513(int32). load src:%512(int32) align=1
  %514(int1). cmp2 op:icmp_uge(35) %509(int32) %513(int32)
  %515(int1). cmp2 op:icmp_uge(35) %511(int32) %513(int32)
  %516(int1). binop op:and(10) %514(int1) %515(int1) (flags:0)
  br %516(int1) ? 133 : 134
bb:133 (succs: 136)
 defs: [%517,%520]
  %517(int32). binop op:add(0) %511(int32) %77(int32) (flags:0)
  store dest:%517(int32) value:%252(int32) align=1
  store dest:%510(int32) value:%252(int32) align=1
  %518(int32). binop op:add(0) %252(int32) %75(int32) (flags:0)
  store dest:%518(int32) value:%511(int32) align=1
  %519(int32). binop op:add(0) %252(int32) %77(int32) (flags:0)
  store dest:%519(int32) value:%509(int32) align=1
  %520(int32). binop op:add(0) %252(int32) %79(int32) (flags:0)
  store dest:%520(int32) value:%72(int32) align=1
  br 136
bb:134 (succs:)
  call %3(void()) args:
  unreachable
bb:135 (succs:)
  call %3(void()) args:
  unreachable
bb:136 (succs:)
  ret
*** END BLOCK
done
