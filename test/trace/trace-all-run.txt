# FLAGS: --trace-all -r
# FILE: res/main.pexe
*** ARGS:
  [0] res/main.pexe
*** ENVIRONMENT:
module {  // BlockID = 8
  version 1;
  abbreviations {  // BlockID = 0
    valuesymtab:
      @a0 = abbrev <fixed(3), vbr(8), array(fixed(8))>;
      @a1 = abbrev <1, vbr(8), array(fixed(7))>;
      @a2 = abbrev <1, vbr(8), array(char6)>;
      @a3 = abbrev <2, vbr(8), array(char6)>;
    constants:
      @a0 = abbrev <1, fixed(5)>;
      @a1 = abbrev <4, vbr(8)>;
      @a2 = abbrev <4, 0>;
      @a3 = abbrev <6, vbr(8)>;
    function:
      @a0 = abbrev <20, vbr(6), vbr(4), vbr(4)>;
      @a1 = abbrev <2, vbr(6), vbr(6), fixed(4)>;
      @a2 = abbrev <3, vbr(6), fixed(5), fixed(4)>;
      @a3 = abbrev <10>;
      @a4 = abbrev <10, vbr(6)>;
      @a5 = abbrev <15>;
      @a6 = abbrev <43, vbr(6), fixed(5)>;
      @a7 = abbrev <24, vbr(6), vbr(6), vbr(4)>;
    globals:
      @a0 = abbrev <0, vbr(6), fixed(1)>;
      @a1 = abbrev <1, vbr(8)>;
      @a2 = abbrev <2, vbr(8)>;
      @a3 = abbrev <3, array(fixed(8))>;
      @a4 = abbrev <4, vbr(6)>;
      @a5 = abbrev <4, vbr(6), vbr(6)>;
  }
  types {  // BlockID = 17
    %a0 = abbrev <21, fixed(1), array(fixed(5))>;
    count 17;
    @t0 = i32;
    @t1 = void;
    @t2 = i1;
    @t3 = i8;
    @t4 = void (i32);
    @t5 = void ();
    @t6 = i32 (i32, i32, i32);
    @t7 = void (i32, i32, i32);
    @t8 = i32 (i32, i32, i32, i32);
    @t9 = i64;
    @t10 = i32 (i32, i32);
    @t11 = i32 ();
    @t12 = void (i32, i32, i32, i32, i1);
    @t13 = i32 (i32);
    @t14 = i32 (i32, i64, i32, i32);
    @t15 = i32 (i32, i32, i32, i32, i32, i64);
    @t16 = void (i32, i32);
  }
  declare external void @f0(i32, i32, i32, i32, i1);
  declare external void @f1();
  define internal void @f2(i32, i32, i32);
  define internal void @f3(i32);
  define internal i32 @f4(i32);
  define internal i32 @f5(i32, i32);
  define internal i32 @f6(i32, i32);
  define internal i32 @f7(i32, i32, i32, i32);
  define internal i32 @f8(i32, i32, i32, i32);
  define internal i32 @f9(i32, i64, i32, i32);
  define internal i32 @f10(i32, i32);
  define internal i32 @f11(i32, i32, i32, i32);
  define external void @f12(i32);
  define internal i32 @f13(i32, i32, i32);
  define internal void @f14();
  declare external i32 @f15();
  globals {  // BlockID = 19
    count 23;
    var @g0, align 4,
      initializers 8 {
        reloc @f4;
            write.u32 [    1024] <= 208
        reloc @f5;
            write.u32 [    1028] <= 212
        reloc @f6;
            write.u32 [    1032] <= 216
        reloc @f7;
            write.u32 [    1036] <= 220
        reloc @f8;
            write.u32 [    1040] <= 224
        reloc @f9;
            write.u32 [    1044] <= 228
        reloc @f10;
            write.u32 [    1048] <= 232
        reloc @f11;
            write.u32 [    1052] <= 236
      }
    var @g1, align 4,
      zerofill 4;
    var @g2, align 4,
      zerofill 24;
    var @g3, align 4,
      zerofill 12;
    var @g4, align 4,
      zerofill 8;
    const @g5, align 1,
      { 78, 111,  32,  73,  82,  84,  32, 105, 110, 116, 101, 114, 102,  97, 
        99, 101,  32, 113, 117, 101, 114, 121,  32, 114, 111, 117, 116, 105, 
       110, 101,  33,  10,   0}
    const @g6, align 1,
      { 73,  82,  84,  32, 105, 110, 116, 101, 114, 102,  97,  99, 101,  32, 
       113, 117, 101, 114, 121,  32, 102,  97, 105, 108, 101, 100,  32, 102, 
       111, 114,  32, 101, 115, 115, 101, 110, 116, 105,  97, 108,  32, 105, 
       110, 116, 101, 114, 102,  97,  99, 101,  10,   0}
    var @g7, align 4,
      zerofill 4;
    const @g8, align 1,
      {110,  97,  99, 108,  45, 105, 114, 116,  45, 102, 100, 105, 111,  45, 
        48,  46,  49,   0}
    const @g9, align 1,
      {110,  97,  99, 108,  45, 105, 114, 116,  45, 100, 101, 118,  45, 102, 
       100, 105, 111,  45,  48,  46,  49,   0}
    const @g10, align 1,
      {110,  97,  99, 108,  45, 105, 114, 116,  45,  98,  97, 115, 105,  99, 
        45,  48,  46,  49,   0}
    const @g11, align 1,
      {110,  97,  99, 108,  45, 105, 114, 116,  45, 109, 101, 109, 111, 114, 
       121,  45,  48,  46,  51,   0}
    const @g12, align 1,
      {110,  97,  99, 108,  45, 105, 114, 116,  45, 109, 101, 109, 111, 114, 
       121,  45,  48,  46,  50,   0}
    const @g13, align 1,
      {110,  97,  99, 108,  45, 105, 114, 116,  45, 109, 101, 109, 111, 114, 
       121,  45,  48,  46,  49,   0}
    const @g14, align 1,
      {110,  97,  99, 108,  45, 105, 114, 116,  45, 116, 108, 115,  45,  48, 
        46,  49,   0}
    var @g15, align 4,
      reloc @g16;
    var @g16, align 4,
      zerofill 4;
    var @g17, align 4,
      zerofill 4;
    var @g18, align 1,
      zerofill 1;
    var @g19, align 1,
      zerofill 1;
    var @g20, align 8,
      initializers 7 {
        zerofill 4;
        reloc @g20 + 752;
            write.u32 [    1356] <= 2104
        reloc @g20 + 880;
            write.u32 [    1360] <= 2232
        reloc @g20 + 1008;
            write.u32 [    1364] <= 2360
        zerofill 36;
        reloc @g21;
        {  0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0, 
           0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0, 
           0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0, 
           0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0, 
           0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0, 
           0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0, 
           0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0, 
           0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0, 
           1,   0,   0,   0,   0,   0,   0,   0,  14,  51, 205, 171,  52,  18, 
         109, 230, 236, 222,   5,   0,  11,   0,   0,   0,   0,   0,   0,   0, 
           0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0, 
           0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0, 
           0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0, 
           0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0, 
           0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0, 
           0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0, 
           0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0, 
           0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0, 
           0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0, 
           0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0, 
           0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0, 
           0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0, 
           0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0, 
           0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0, 
           0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0, 
           0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0, 
           0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0, 
           0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0, 
           0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0, 
           0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0, 
           0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0, 
           0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0, 
           0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0, 
           0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0, 
           0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0, 
           0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0, 
           0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0, 
           0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0, 
           0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0, 
           0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0, 
           0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0, 
           0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0, 
           0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0, 
           0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0, 
           0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0, 
           0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0, 
           0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0, 
           0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0, 
           0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0, 
           0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0, 
           0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0, 
           0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0, 
           0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0, 
           0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0, 
           0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0, 
           0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0, 
           0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0, 
           0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0, 
           0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0, 
           0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0, 
           0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0, 
           0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0, 
           0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0, 
           0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0, 
           0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0, 
           0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0, 
           0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0, 
           0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0, 
           0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0, 
           0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0, 
           0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0, 
           0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0, 
           0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0, 
           0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0, 
           0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0, 
           0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0, 
           0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0, 
           0,   0}
      }
    const @g21, align 1,
      { 67,   0}
    const @g22, align 8,
      initializers 7 {
        {255, 255, 255, 255,   0,   0,   0,   0,   0,   0,   0,   0}
        reloc @g20 + 752;
            write.u32 [    2508] <= 2104
        reloc @g20 + 880;
            write.u32 [    2512] <= 2232
        reloc @g20 + 1008;
            write.u32 [    2516] <= 2360
        zerofill 36;
        reloc @g21;
            write.u32 [    2556] <= 2488
        {  0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0, 
           0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0, 
           0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0, 
           0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0, 
           0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0, 
           0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0, 
           0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0, 
           0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0, 
           1,   0,   0,   0,   0,   0,   0,   0,  14,  51, 205, 171,  52,  18, 
         109, 230, 236, 222,   5,   0,  11,   0,   0,   0,   0,   0,   0,   0, 
           0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0, 
           0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0, 
           0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0, 
           0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0, 
           0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0, 
           0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0, 
           0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0, 
           0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0, 
           0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0, 
           0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0, 
           0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0, 
           0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0, 
           0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0, 
           0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0, 
           0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0, 
           0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0, 
           0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0, 
           0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0, 
           0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0, 
           0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0, 
           0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0, 
           0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0, 
           0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0, 
           0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0, 
           0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0, 
           0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0, 
           0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0, 
           0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0, 
           0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0, 
           0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0, 
           0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0, 
           0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0, 
           0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0, 
           0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0, 
           0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0, 
           0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0, 
           0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0, 
           0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0, 
           0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0, 
           0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0, 
           0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0, 
           0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0, 
           0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0, 
           0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0, 
           0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0, 
           0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0, 
           0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0, 
           0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0, 
           0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0, 
           0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0, 
           0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0, 
           0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0, 
           0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0, 
           0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0, 
           0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0, 
           0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0, 
           0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0, 
           0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0, 
           0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0, 
           0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0, 
           0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0, 
           0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0, 
           0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0, 
           0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0, 
           0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0, 
           0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0, 
           0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0, 
           0,   0}
      }
  }
      write.u32 [    1332] <= 1336
      write.u32 [    1404] <= 2488
  valuesymtab {  // BlockID = 14
    @g15 : "environ";
    @g0 : "__libnacl_irt_fdio";
    @g2 : "__libnacl_irt_basic";
    @f15 : "llvm.nacl.read.tp";
    intrinsic "llvm.nacl.read.tp" (28)
    @f2 : "__libnacl_mandatory_irt_query";
    @f9 : "stub_seek";
    @g5 : ".str";
    @g17 : "cached_tls_info.0";
    @g18 : "cached_tls_info.1";
    @g19 : "cached_tls_info.3";
    @f6 : "stub_dup2";
    @g6 : ".str1";
    @g10 : ".str2";
    @g11 : ".str3";
    @g3 : "__libnacl_irt_memory";
    @g13 : ".str5";
    @g12 : ".str4";
    @f10 : "stub_fstat";
    @g8 : ".str9";
    @f1 : "llvm.trap";
    intrinsic "llvm.trap" (34)
    @g21 : ".str39";
    @g14 : ".str6";
    @f5 : "stub_dup";
    @g16 : "__env";
    @g9 : ".str110";
    @f8 : "stub_write";
    @g7 : "__nacl_initial_thread_stack_end";
    @f12 : "_start";
    intrinsic "_start" (35)
    @f0 : "llvm.memcpy.p0i8.p0i8.i32";
    intrinsic "llvm.memcpy.p0i8.p0i8.i32" (8)
    @f13 : "__libnacl_irt_mprotect";
    @f4 : "stub_close";
    @g22 : "__tls_template_start";
    @g4 : "__libnacl_irt_tls";
    @f3 : "__libnacl_fatal";
    @f11 : "stub_getdents";
    @f14 : "__libc_fini_array";
    @f7 : "stub_read";
    @g20 : "global_impure_data";
    @g1 : "__nacl_irt_query";
  }
  function void @f2(i32 %p0, i32 %p1, i32 %p2) {  // BlockID = 12
    blocks 5;
    constants {  // BlockID = 11
      i32:
        %c0 = i32 0;
      }
  %b0:
    %v0 = load i32* @g1, align 1;
    %v1 = icmp eq i32 %v0, %c0;
    br i1 %v1, label %b1, label %b2;
  %b1:
    tail call void @f3(i32 @g5);
    unreachable;
  %b2:
    %v2 = tail call i32 %v0(i32 %p0, i32 %p1, i32 %p2);
    %v3 = icmp eq i32 %v2, %p2;
    br i1 %v3, label %b4, label %b3;
  %b3:
    tail call void @f3(i32 @g6);
    unreachable;
  %b4:
    ret void;
  }
  function void @f3(i32 %p0) {  // BlockID = 12
    blocks 5;
    constants {  // BlockID = 11
      i32:
        %c0 = i32 0;
        %c1 = i32 1;
        %c2 = i32 4;
        %c3 = i32 16;
        %c4 = i32 2;
      i8:
        %c5 = i8 0;
      }
  %b0:
    %v0 = alloca i8, i32 %c2, align 4;
    %v1 = add i32 @g0, %c3;
    %v2 = load i32* %v1, align 1;
    %v3 = icmp eq i32 %v2, %c0;
    br i1 %v3, label %b4, label %b1;
  %b1:
    %v4 = load i8* %p0, align 1;
    %v5 = icmp eq i8 %v4, %c5;
    br i1 %v5, label %b3, label %b2;
   phi assigns: %b2, %v6 = %c0; %b2, %v7 = %p0; %b3, %v12 = %c0;
  %b2:
   phi uses: [%v9, %b2], [%c0, %b1], [%v8, %b2], [%p0, %b1];
    declare i32 %v9;
    %v6 = phi i32 [%v9, %b2], [%c0, %b1];
    declare i32 %v8;
    %v7 = phi i32 [%v8, %b2], [%p0, %b1];
    %v8 = add i32 %v7, %c1;
    %v9 = add i32 %v6, %c1;
    %v10 = load i8* %v8, align 1;
    %v11 = icmp eq i8 %v10, %c5;
    br i1 %v11, label %b3, label %b2;
   phi assigns: %b2, %v6 = %v9; %b2, %v7 = %v8; %b3, %v12 = %v9;
  %b3:
   phi uses: [%c0, %b1], [%v9, %b2];
    %v12 = phi i32 [%c0, %b1], [%v9, %b2];
    %v13 = call i32 %v2(i32 %c4, i32 %p0, i32 %v12, i32 %v0);
    br label %b4;
  %b4:
    call void @f1();
    unreachable;
  }
  function i32 @f4(i32 %p0) {  // BlockID = 12
    blocks 1;
    constants {  // BlockID = 11
      i32:
        %c0 = i32 38;
      }
  %b0:
    ret i32 %c0;
  }
  function i32 @f5(i32 %p0, i32 %p1) {  // BlockID = 12
    blocks 1;
    constants {  // BlockID = 11
      i32:
        %c0 = i32 38;
      }
  %b0:
    ret i32 %c0;
  }
  function i32 @f6(i32 %p0, i32 %p1) {  // BlockID = 12
    blocks 1;
    constants {  // BlockID = 11
      i32:
        %c0 = i32 38;
      }
  %b0:
    ret i32 %c0;
  }
  function i32 @f7(i32 %p0, i32 %p1, i32 %p2, i32 %p3) {  // BlockID = 12
    blocks 1;
    constants {  // BlockID = 11
      i32:
        %c0 = i32 38;
      }
  %b0:
    ret i32 %c0;
  }
  function i32 @f8(i32 %p0, i32 %p1, i32 %p2, i32 %p3) {  // BlockID = 12
    blocks 1;
    constants {  // BlockID = 11
      i32:
        %c0 = i32 38;
      }
  %b0:
    ret i32 %c0;
  }
  function i32 @f9(i32 %p0, i64 %p1, i32 %p2, i32 %p3) {  // BlockID = 12
    blocks 1;
    constants {  // BlockID = 11
      i32:
        %c0 = i32 38;
      }
  %b0:
    ret i32 %c0;
  }
  function i32 @f10(i32 %p0, i32 %p1) {  // BlockID = 12
    blocks 1;
    constants {  // BlockID = 11
      i32:
        %c0 = i32 38;
      }
  %b0:
    ret i32 %c0;
  }
  function i32 @f11(i32 %p0, i32 %p1, i32 %p2, i32 %p3) {  // BlockID = 12
    blocks 1;
    constants {  // BlockID = 11
      i32:
        %c0 = i32 38;
      }
  %b0:
    ret i32 %c0;
  }
  function void @f12(i32 %p0) {  // BlockID = 12
    blocks 57;
    constants {  // BlockID = 11
      i32:
        %c0 = i32 0;
        %c1 = i32 4;
        %c2 = i32 8;
        %c3 = i32 328;
        %c4 = i32 1;
        %c5 = i32 332;
        %c6 = i32 16;
        %c7 = i32 32;
        %c8 = i32 12;
        %c9 = i32 -1;
        %c10 = i32 31;
        %c11 = i32 1155;
        %c12 = i32 11;
        %c13 = i32 -1144;
        %c14 = i32 1144;
        %c15 = i32 5;
        %c16 = i32 24;
        %c17 = i32 3;
        %c18 = i32 34;
        %c19 = i32 7;
        %c20 = i32 -8;
        %c21 = i32 -1136;
        %c22 = i32 392;
        %c23 = i32 396;
        %c24 = i32 136;
        %c25 = i32 60;
      i1:
        %c26 = i1 1;
        %c27 = i1 0;
      i64:
        %c28 = i64 0;
      }
  %b0:
    %v0 = alloca i8, i32 %c1, align 4;
    %v1 = alloca i8, i32 %c6, align 4;
    %v2 = alloca i8, i32 %c1, align 4;
    store i32 %p0, i32* %v2, align 1;
    %v3 = load i32* %p0, align 1;
    %v4 = add i32 %p0, %c2;
    %v5 = load i32* %v4, align 1;
    %v6 = add i32 %v5, %c1;
    %v7 = mul i32 %v6, %c1;
    %v8 = add i32 %p0, %v7;
    %v9 = add i32 %p0, %c1;
    %v10 = load i32* %v9, align 1;
    %v11 = add i32 %v5, %c15;
    %v12 = add i32 %v11, %v10;
    %v13 = mul i32 %v12, %c1;
    %v14 = add i32 %p0, %v13;
    store i32 %v8, i32* @g15, align 1;
    store i32 %v2, i32* @g7, align 1;
    br label %b1;
   phi assigns: %b1, %v15 = %v14;
  %b1:
   phi uses: [%v14, %b0], [%v19, %b3];
    declare i32 %v19;
    %v15 = phi i32 [%v14, %b0], [%v19, %b3];
    %v16 = load i32* %v15, align 1;
    switch i32 %v16 {
      default: br label %b3;
      i32 0: br label %b4;
      i32 32: br label %b2;
    }
  %b2:
    %v17 = add i32 %v15, %c1;
    %v18 = load i32* %v17, align 1;
    store i32 %v18, i32* @g1, align 1;
    br label %b3;
  %b3:
    %v19 = add i32 %v15, %c2;
    br label %b1;
   phi assigns: %b1, %v15 = %v19;
  %b4:
    %v20 = load i32* @g1, align 1;
    %v21 = icmp eq i32 %v20, %c0;
    br i1 %v21, label %b5, label %b6;
  %b5:
    call void @f3(i32 @g5);
    unreachable;
  %b6:
    %v22 = call i32 %v20(i32 @g8, i32 @g0, i32 %c7);
    %v23 = icmp eq i32 %v22, %c7;
    br i1 %v23, label %b10, label %b7;
  %b7:
    %v24 = load i32* @g1, align 1;
    %v25 = icmp eq i32 %v24, %c0;
    br i1 %v25, label %b8, label %b9;
  %b8:
    call void @f3(i32 @g5);
    unreachable;
  %b9:
    %v26 = call i32 %v24(i32 @g9, i32 @g0, i32 %c7);
    br label %b10;
  %b10:
    call void @f2(i32 @g10, i32 @g2, i32 %c16);
    %v27 = load i32* @g1, align 1;
    %v28 = icmp eq i32 %v27, %c0;
    br i1 %v28, label %b11, label %b12;
  %b11:
    call void @f3(i32 @g5);
    unreachable;
  %b12:
    %v29 = call i32 %v27(i32 @g11, i32 @g3, i32 %c8);
    %v30 = icmp eq i32 %v29, %c8;
    br i1 %v30, label %b18, label %b13;
  %b13:
    %v31 = load i32* @g1, align 1;
    %v32 = icmp eq i32 %v31, %c0;
    br i1 %v32, label %b14, label %b15;
  %b14:
    call void @f3(i32 @g5);
    unreachable;
  %b15:
    %v33 = call i32 %v31(i32 @g12, i32 %v1, i32 %c6);
    %v34 = icmp eq i32 %v33, %c6;
    br i1 %v34, label %b17, label %b16;
  %b16:
    call void @f2(i32 @g13, i32 %v1, i32 %c8);
    %v35 = add i32 @g3, %c2;
    store i32 @f13, i32* %v35, align 1;
    br label %b17;
  %b17:
    %v36 = add i32 %v1, %c1;
    %v37 = load i32* %v36, align 1;
    store i32 %v37, i32* @g3, align 1;
    %v38 = add i32 %v1, %c2;
    %v39 = load i32* %v38, align 1;
    %v40 = add i32 @g3, %c1;
    store i32 %v39, i32* %v40, align 1;
    br label %b18;
  %b18:
    call void @f2(i32 @g14, i32 @g4, i32 %c2);
    %v41 = icmp eq i32 %v3, %c0;
    br i1 %v41, label %b23, label %b19;
  %b19:
    %v42 = add i32 @g20, %c3;
    %v43 = load i32* %v42, align 1;
    %v44 = icmp eq i32 %v43, %c0;
    br i1 %v44, label %b20, label %b21;
   phi assigns: %b21, %v48 = %v43;
  %b20:
    %v45 = add i32 @g20, %c5;
    %v46 = add i32 @g20, %c3;
    store i32 %v45, i32* %v46, align 1;
    %v47 = add i32 @g20, %c5;
    br label %b21;
   phi assigns: %b21, %v48 = %v47;
  %b21:
   phi uses: [%v47, %b20], [%v43, %b19];
    %v48 = phi i32 [%v47, %b20], [%v43, %b19];
    %v49 = add i32 %v48, %c1;
    %v50 = load i32* %v49, align 1;
    %v51 = icmp sgt i32 %v50, %c10;
    br i1 %v51, label %b23, label %b22;
  %b22:
    %v52 = add i32 %v50, %c4;
    store i32 %v52, i32* %v49, align 1;
    %v53 = add i32 %v48, %c2;
    %v54 = mul i32 %v50, %c1;
    %v55 = add i32 %v53, %v54;
    store i32 %v3, i32* %v55, align 1;
    br label %b23;
  %b23:
    %v56 = add i32 @g20, %c3;
    %v57 = load i32* %v56, align 1;
    %v58 = icmp eq i32 %v57, %c0;
    br i1 %v58, label %b24, label %b25;
   phi assigns: %b25, %v62 = %v57;
  %b24:
    %v59 = add i32 @g20, %c5;
    %v60 = add i32 @g20, %c3;
    store i32 %v59, i32* %v60, align 1;
    %v61 = add i32 @g20, %c5;
    br label %b25;
   phi assigns: %b25, %v62 = %v61;
  %b25:
   phi uses: [%v61, %b24], [%v57, %b23];
    %v62 = phi i32 [%v61, %b24], [%v57, %b23];
    %v63 = add i32 %v62, %c1;
    %v64 = load i32* %v63, align 1;
    %v65 = icmp sgt i32 %v64, %c10;
    br i1 %v65, label %b27, label %b26;
  %b26:
    %v66 = add i32 %v64, %c4;
    store i32 %v66, i32* %v63, align 1;
    %v67 = add i32 %v62, %c2;
    %v68 = mul i32 %v64, %c1;
    %v69 = add i32 %v67, %v68;
    store i32 @f14, i32* %v69, align 1;
    br label %b27;
  %b27:
    %v70 = load i8* @g19, align 1;
    %v71 = trunc i8 %v70 to i1;
    br i1 %v71, label %b28, label %b29;
  %b28:
    %v72 = load i8* @g18, align 1;
    %v73 = trunc i8 %v72 to i1;
    br label %b30;
   phi assigns: %b30, %v76 = %v73;
  %b29:
    %v74 = zext i1 %c26 to i8;
    store i8 %v74, i8* @g19, align 1;
    store i32 @g22, i32* @g17, align 1;
    %v75 = zext i1 %c26 to i8;
    store i8 %v75, i8* @g18, align 1;
    br label %b30;
   phi assigns: %b30, %v76 = %c26;
  %b30:
   phi uses: [%v73, %b28], [%c26, %b29];
    %v76 = phi i1 [%v73, %b28], [%c26, %b29];
    %v77 = select i1 %v76, i32 %c11, i32 %c12;
    store i32 %c0, i32* %v0, align 1;
    %v78 = load i32* @g3, align 1;
    %v79 = call i32 %v78(i32 %v0, i32 %v77, i32 %c17, i32 %c18, i32 %c9, i64 %c28);
    %v80 = icmp eq i32 %v79, %c0;
    br i1 %v80, label %b32, label %b31;
  %b31:
    %v81 = call i32 @f15();
    %v82 = add i32 %v81, %c13;
    %v83 = load i32* %v82, align 1;
    store i32 %v79, i32* %v83, align 1;
    br label %b33;
   phi assigns: %b33, %v85 = %c9;
  %b32:
    %v84 = load i32* %v0, align 1;
    br label %b33;
   phi assigns: %b33, %v85 = %v84;
  %b33:
   phi uses: [%c9, %b31], [%v84, %b32];
    %v85 = phi i32 [%c9, %b31], [%v84, %b32];
    %v86 = load i8* @g19, align 1;
    %v87 = trunc i8 %v86 to i1;
    br i1 %v87, label %b34, label %b35;
  %b34:
    %v88 = load i8* @g18, align 1;
    %v89 = trunc i8 %v88 to i1;
    br label %b36;
   phi assigns: %b36, %v92 = %v89;
  %b35:
    %v90 = zext i1 %c26 to i8;
    store i8 %v90, i8* @g19, align 1;
    store i32 @g22, i32* @g17, align 1;
    %v91 = zext i1 %c26 to i8;
    store i8 %v91, i8* @g18, align 1;
    br label %b36;
   phi assigns: %b36, %v92 = %c26;
  %b36:
   phi uses: [%v89, %b34], [%c26, %b35];
    %v92 = phi i1 [%v89, %b34], [%c26, %b35];
    %v93 = select i1 %v92, i32 %c11, i32 %c12;
    %v94 = add i32 %v85, %v93;
    %v95 = select i1 %v92, i32 %c14, i32 %c0;
    %v96 = add i32 %v85, %c19;
    %v97 = and i32 %v96, %c20;
    %v98 = add i32 %v97, %v95;
    %v99 = select i1 %v92, i32 %c14, i32 %c0;
    %v100 = add i32 %v97, %v99;
    %v101 = icmp ugt i32 %v100, %v94;
    br i1 %v101, label %b37, label %b38;
  %b37:
    call void @f1();
    unreachable;
  %b38:
    %v102 = load i32* @g17, align 1;
    call void @f0(i32 %v97, i32 %v102, i32 %v99, i32 %c4, i1 %c27);
    store i32 %v98, i32* %v98, align 1;
    %v103 = load i32* @g4, align 1;
    %v104 = call i32 %v103(i32 %v98);
    %v105 = call i32 @f15();
    %v106 = add i32 %v105, %c13;
    %v107 = add i32 %v105, %c21;
    store i32 %v107, i32* %v106, align 1;
    %v108 = add i32 @g20, %c3;
    %v109 = load i32* %v108, align 1;
    %v110 = icmp eq i32 %v109, %c0;
    br i1 %v110, label %b54, label %b40;
   phi assigns: %b40, %v112 = %v109;
  %b39:
    declare i32 %v144;
    %v111 = icmp eq i32 %v144, %c0;
    br i1 %v111, label %b54, label %b40;
   phi assigns: %b40, %v112 = %v144;
  %b40:
   phi uses: [%v144, %b39], [%v109, %b38];
    %v112 = phi i32 [%v144, %b39], [%v109, %b38];
    %v113 = add i32 %v112, %c1;
    %v114 = load i32* %v113, align 1;
    %v115 = icmp sgt i32 %v114, %c0;
    br i1 %v115, label %b41, label %b54;
  %b41:
    %v116 = add i32 %v112, %c22;
    %v117 = add i32 %v112, %c23;
    br label %b42;
   phi assigns: %b42, %v118 = %v114; %b42, %v119 = %v114;
  %b42:
   phi uses: [%v114, %b41], [%v128, %b44], [%v114, %b41], [%v120, %b44];
    declare i32 %v128;
    %v118 = phi i32 [%v114, %b41], [%v128, %b44];
    declare i32 %v120;
    %v119 = phi i32 [%v114, %b41], [%v120, %b44];
    %v120 = add i32 %v119, %c9;
    %v121 = shl i32 %c4, %v120;
    %v122 = add i32 %v112, %c2;
    %v123 = mul i32 %v120, %c1;
    %v124 = add i32 %v122, %v123;
    %v125 = load i32* %v124, align 1;
    %v126 = icmp eq i32 %v119, %v118;
    br i1 %v126, label %b45, label %b46;
  %b43:
    %v127 = icmp sgt i32 %v119, %c4;
    br i1 %v127, label %b44, label %b54;
  %b44:
    %v128 = load i32* %v113, align 1;
    br label %b42;
   phi assigns: %b42, %v118 = %v128; %b42, %v119 = %v120;
  %b45:
    store i32 %v120, i32* %v113, align 1;
    br label %b47;
  %b46:
    store i32 %c0, i32* %v124, align 1;
    br label %b47;
  %b47:
    %v129 = icmp eq i32 %v125, %c0;
    br i1 %v129, label %b43, label %b48;
  %b48:
    %v130 = load i32* %v113, align 1;
    %v131 = load i32* %v116, align 1;
    %v132 = and i32 %v131, %v121;
    %v133 = icmp eq i32 %v132, %c0;
    br i1 %v133, label %b49, label %b50;
  %b49:
    call void %v125();
    br label %b53;
  %b50:
    %v134 = load i32* %v117, align 1;
    %v135 = and i32 %v134, %v121;
    %v136 = icmp eq i32 %v135, %c0;
    %v137 = add i32 %v112, %c24;
    %v138 = mul i32 %v120, %c1;
    %v139 = add i32 %v137, %v138;
    %v140 = load i32* %v139, align 1;
    br i1 %v136, label %b51, label %b52;
  %b51:
    call void %v125(i32 %c0, i32 %v140);
    br label %b53;
  %b52:
    call void %v125(i32 %v140);
    br label %b53;
  %b53:
    %v141 = load i32* %v113, align 1;
    %v142 = icmp eq i32 %v130, %v141;
    %v143 = add i32 @g20, %c3;
    %v144 = load i32* %v143, align 1;
    %v145 = icmp eq i32 %v144, %v112;
    %v146 = and i1 %v142, %v145;
    br i1 %v146, label %b43, label %b39;
  %b54:
    %v147 = add i32 @g20, %c25;
    %v148 = load i32* %v147, align 1;
    %v149 = icmp eq i32 %v148, %c0;
    br i1 %v149, label %b56, label %b55;
  %b55:
    call void %v148(i32 @g20);
    br label %b56;
  %b56:
    %v150 = load i32* @g2, align 1;
    call void %v150(i32 %c0);
    call void @f1();
    unreachable;
  }
  function i32 @f13(i32 %p0, i32 %p1, i32 %p2) {  // BlockID = 12
    blocks 1;
    constants {  // BlockID = 11
      i32:
        %c0 = i32 38;
      }
  %b0:
    ret i32 %c0;
  }
  function void @f14() {  // BlockID = 12
    blocks 1;
  %b0:
    ret void;
  }
}
startinfo = 3640
envc = 3644 (0)
argc = 3648 (1)
argv = 3652
envp = 3660
auxv = 3664
  %v0 = alloca i8, i32 %c1, align 4;
    %v0 = 1048572  %c1 = 4
  %v1 = alloca i8, i32 %c6, align 4;
    %v1 = 1048556  %c6 = 16
  %v2 = alloca i8, i32 %c1, align 4;
    %v2 = 1048552  %c1 = 4
  store i32 %p0, i32* %v2, align 1;
    %v2 = 1048552  %p0 = 3640
    write.u32 [ 1048552] <= 3640
  %v3 = load i32* %p0, align 1;
     read.u32 [    3640] >= 0
    %v3 = 0  %p0 = 3640
  %v4 = add i32 %p0, %c2;
    %v4 = 3648  %p0 = 3640  %c2 = 8
  %v5 = load i32* %v4, align 1;
     read.u32 [    3648] >= 1
    %v5 = 1  %v4 = 3648
  %v6 = add i32 %v5, %c1;
    %v6 = 5  %v5 = 1  %c1 = 4
  %v7 = mul i32 %v6, %c1;
    %v7 = 20  %v6 = 5  %c1 = 4
  %v8 = add i32 %p0, %v7;
    %v8 = 3660  %p0 = 3640  %v7 = 20
  %v9 = add i32 %p0, %c1;
    %v9 = 3644  %p0 = 3640  %c1 = 4
  %v10 = load i32* %v9, align 1;
     read.u32 [    3644] >= 0
    %v10 = 0  %v9 = 3644
  %v11 = add i32 %v5, %c15;
    %v11 = 6  %v5 = 1  %c15 = 5
  %v12 = add i32 %v11, %v10;
    %v12 = 6  %v11 = 6  %v10 = 0
  %v13 = mul i32 %v12, %c1;
    %v13 = 24  %v12 = 6  %c1 = 4
  %v14 = add i32 %p0, %v13;
    %v14 = 3664  %p0 = 3640  %v13 = 24
  store i32 %v8, i32* @g15, align 1;
    @g15 = 1332  %v8 = 3660
    write.u32 [    1332] <= 3660
  store i32 %v2, i32* @g7, align 1;
    @g7 = 1192  %v2 = 1048552
    write.u32 [    1192] <= 1048552
  br label %324;
    %v15 <= %v14
pc = %324
  %v16 = load i32* %v15, align 1;
     read.u32 [    3664] >= 32
    %v16 = 32  %v15 = 3664
  switch i32 %v16 {
    default: br label %468;
    i32 0: br label %520;
    i32 32: br label %400;
  }
    %v16 = 32
pc = %400
  %v17 = add i32 %v15, %c1;
    %v17 = 3668  %v15 = 3664  %c1 = 4
  %v18 = load i32* %v17, align 1;
     read.u32 [    3668] >= 4
    %v18 = 4  %v17 = 3668
  store i32 %v18, i32* @g1, align 1;
    @g1 = 1056  %v18 = 4
    write.u32 [    1056] <= 4
  br label %468;
pc = %468
  %v19 = add i32 %v15, %c2;
    %v19 = 3672  %v15 = 3664  %c2 = 8
  br label %324;
    %v15 <= %v19
pc = %324
  %v16 = load i32* %v15, align 1;
     read.u32 [    3672] >= 0
    %v16 = 0  %v15 = 3672
  switch i32 %v16 {
    default: br label %468;
    i32 0: br label %520;
    i32 32: br label %400;
  }
    %v16 = 0
pc = %520
  %v20 = load i32* @g1, align 1;
     read.u32 [    1056] >= 4
    %v20 = 4  @g1 = 1056
  %v21 = icmp eq i32 %v20, %c0;
    %v21 = 0  %v20 = 4  %c0 = 0
  br i1 %v21, label %580, label %604;
    %v21 = 0
pc = %604
  %v22 = call i32 %v20(i32 @g8, i32 @g0, i32 %c7);
     read.u8 [    1196] >= 110
     read.u8 [    1197] >= 97
     read.u8 [    1198] >= 99
     read.u8 [    1199] >= 108
     read.u8 [    1200] >= 45
     read.u8 [    1201] >= 105
     read.u8 [    1202] >= 114
     read.u8 [    1203] >= 116
     read.u8 [    1204] >= 45
     read.u8 [    1205] >= 102
     read.u8 [    1206] >= 100
     read.u8 [    1207] >= 105
     read.u8 [    1208] >= 111
     read.u8 [    1209] >= 45
     read.u8 [    1210] >= 48
     read.u8 [    1211] >= 46
     read.u8 [    1212] >= 49
     read.u8 [    1213] >= 0
    NACL_IRT_QUERY(1196 (nacl-irt-fdio-0.1), 1024, 32)
    write.u32 [    1024] <= 32
    write.u32 [    1028] <= 36
    write.u32 [    1032] <= 40
    write.u32 [    1036] <= 44
    write.u32 [    1040] <= 48
    write.u32 [    1044] <= 52
    write.u32 [    1048] <= 56
    write.u32 [    1052] <= 60
  %v23 = icmp eq i32 %v22, %c7;
    %v23 = 1  %v22 = 32  %c7 = 32
  br i1 %v23, label %808, label %676;
    %v23 = 1
pc = %808
  call void @f2(i32 @g10, i32 @g2, i32 %c16);
    @g10 = 1236  @g2 = 1060  %c16 = 24  
function = %f2  pc = %0
  %v0 = load i32* @g1, align 1;
     read.u32 [    1056] >= 4
    %v0 = 4  @g1 = 1056
  %v1 = icmp eq i32 %v0, %c0;
    %v1 = 0  %v0 = 4  %c0 = 0
  br i1 %v1, label %60, label %84;
    %v1 = 0
pc = %84
  %v2 = tail call i32 %v0(i32 %p0, i32 %p1, i32 %p2);
     read.u8 [    1236] >= 110
     read.u8 [    1237] >= 97
     read.u8 [    1238] >= 99
     read.u8 [    1239] >= 108
     read.u8 [    1240] >= 45
     read.u8 [    1241] >= 105
     read.u8 [    1242] >= 114
     read.u8 [    1243] >= 116
     read.u8 [    1244] >= 45
     read.u8 [    1245] >= 98
     read.u8 [    1246] >= 97
     read.u8 [    1247] >= 115
     read.u8 [    1248] >= 105
     read.u8 [    1249] >= 99
     read.u8 [    1250] >= 45
     read.u8 [    1251] >= 48
     read.u8 [    1252] >= 46
     read.u8 [    1253] >= 49
     read.u8 [    1254] >= 0
    NACL_IRT_QUERY(1236 (nacl-irt-basic-0.1), 1060, 24)
    write.u32 [    1060] <= 8
    write.u32 [    1064] <= 12
    write.u32 [    1068] <= 16
    write.u32 [    1072] <= 20
    write.u32 [    1076] <= 24
    write.u32 [    1080] <= 28
  %v3 = icmp eq i32 %v2, %p2;
    %v3 = 1  %v2 = 24  %p2 = 24
  br i1 %v3, label %180, label %156;
    %v3 = 1
pc = %180
  ret void;
function = %f12  pc = %808
  %v27 = load i32* @g1, align 1;
     read.u32 [    1056] >= 4
    %v27 = 4  @g1 = 1056
  %v28 = icmp eq i32 %v27, %c0;
    %v28 = 0  %v27 = 4  %c0 = 0
  br i1 %v28, label %896, label %920;
    %v28 = 0
pc = %920
  %v29 = call i32 %v27(i32 @g11, i32 @g3, i32 %c8);
     read.u8 [    1255] >= 110
     read.u8 [    1256] >= 97
     read.u8 [    1257] >= 99
     read.u8 [    1258] >= 108
     read.u8 [    1259] >= 45
     read.u8 [    1260] >= 105
     read.u8 [    1261] >= 114
     read.u8 [    1262] >= 116
     read.u8 [    1263] >= 45
     read.u8 [    1264] >= 109
     read.u8 [    1265] >= 101
     read.u8 [    1266] >= 109
     read.u8 [    1267] >= 111
     read.u8 [    1268] >= 114
     read.u8 [    1269] >= 121
     read.u8 [    1270] >= 45
     read.u8 [    1271] >= 48
     read.u8 [    1272] >= 46
     read.u8 [    1273] >= 51
     read.u8 [    1274] >= 0
    NACL_IRT_QUERY(1255 (nacl-irt-memory-0.3), 1084, 12)
    write.u32 [    1084] <= 152
    write.u32 [    1088] <= 156
    write.u32 [    1092] <= 160
  %v30 = icmp eq i32 %v29, %c8;
    %v30 = 1  %v29 = 12  %c8 = 12
  br i1 %v30, label %1360, label %992;
    %v30 = 1
pc = %1360
  call void @f2(i32 @g14, i32 @g4, i32 %c2);
    @g14 = 1315  @g4 = 1096  %c2 = 8  
function = %f2  pc = %0
  %v0 = load i32* @g1, align 1;
     read.u32 [    1056] >= 4
    %v0 = 4  @g1 = 1056
  %v1 = icmp eq i32 %v0, %c0;
    %v1 = 0  %v0 = 4  %c0 = 0
  br i1 %v1, label %60, label %84;
    %v1 = 0
pc = %84
  %v2 = tail call i32 %v0(i32 %p0, i32 %p1, i32 %p2);
     read.u8 [    1315] >= 110
     read.u8 [    1316] >= 97
     read.u8 [    1317] >= 99
     read.u8 [    1318] >= 108
     read.u8 [    1319] >= 45
     read.u8 [    1320] >= 105
     read.u8 [    1321] >= 114
     read.u8 [    1322] >= 116
     read.u8 [    1323] >= 45
     read.u8 [    1324] >= 116
     read.u8 [    1325] >= 108
     read.u8 [    1326] >= 115
     read.u8 [    1327] >= 45
     read.u8 [    1328] >= 48
     read.u8 [    1329] >= 46
     read.u8 [    1330] >= 49
     read.u8 [    1331] >= 0
    NACL_IRT_QUERY(1315 (nacl-irt-tls-0.1), 1096, 8)
    write.u32 [    1096] <= 164
    write.u32 [    1100] <= 168
  %v3 = icmp eq i32 %v2, %p2;
    %v3 = 1  %v2 = 8  %p2 = 8
  br i1 %v3, label %180, label %156;
    %v3 = 1
pc = %180
  ret void;
function = %f12  pc = %1360
  %v41 = icmp eq i32 %v3, %c0;
    %v41 = 1  %v3 = 0  %c0 = 0
  br i1 %v41, label %1816, label %1432;
    %v41 = 1
pc = %1816
  %v56 = add i32 @g20, %c3;
    %v56 = 1680  @g20 = 1352  %c3 = 328
  %v57 = load i32* %v56, align 1;
     read.u32 [    1680] >= 0
    %v57 = 0  %v56 = 1680
  %v58 = icmp eq i32 %v57, %c0;
    %v58 = 1  %v57 = 0  %c0 = 0
  br i1 %v58, label %1908, label %2008;
    %v58 = 1
pc = %1908
  %v59 = add i32 @g20, %c5;
    %v59 = 1684  @g20 = 1352  %c5 = 332
  %v60 = add i32 @g20, %c3;
    %v60 = 1680  @g20 = 1352  %c3 = 328
  store i32 %v59, i32* %v60, align 1;
    %v60 = 1680  %v59 = 1684
    write.u32 [    1680] <= 1684
  %v61 = add i32 @g20, %c5;
    %v61 = 1684  @g20 = 1352  %c5 = 332
  br label %2008;
    %v62 <= %v61
pc = %2008
  %v63 = add i32 %v62, %c1;
    %v63 = 1688  %v62 = 1684  %c1 = 4
  %v64 = load i32* %v63, align 1;
     read.u32 [    1688] >= 0
    %v64 = 0  %v63 = 1688
  %v65 = icmp sgt i32 %v64, %c10;
    %v65 = 0  %v64 = 0  %c10 = 31
  br i1 %v65, label %2200, label %2084;
    %v65 = 0
pc = %2084
  %v66 = add i32 %v64, %c4;
    %v66 = 1  %v64 = 0  %c4 = 1
  store i32 %v66, i32* %v63, align 1;
    %v63 = 1688  %v66 = 1
    write.u32 [    1688] <= 1
  %v67 = add i32 %v62, %c2;
    %v67 = 1692  %v62 = 1684  %c2 = 8
  %v68 = mul i32 %v64, %c1;
    %v68 = 0  %v64 = 0  %c1 = 4
  %v69 = add i32 %v67, %v68;
    %v69 = 1692  %v67 = 1692  %v68 = 0
  store i32 @f14, i32* %v69, align 1;
    %v69 = 1692  @f14 = 248
    write.u32 [    1692] <= 248
  br label %2200;
pc = %2200
  %v70 = load i8* @g19, align 1;
     read.u8 [    1345] >= 0
    %v70 = 0  @g19 = 1345
  %v71 = trunc i8 %v70 to i1;
    %v71 = 0  %v70 = 0
  br i1 %v71, label %2256, label %2320;
    %v71 = 0
pc = %2320
  %v74 = zext i1 %c26 to i8;
    %v74 = 1  %c26 = 1
  store i8 %v74, i8* @g19, align 1;
    @g19 = 1345  %v74 = 1
    write.u8 [    1345] <= 1
  store i32 @g22, i32* @g17, align 1;
    @g17 = 1340  @g22 = 2496
    write.u32 [    1340] <= 2496
  %v75 = zext i1 %c26 to i8;
    %v75 = 1  %c26 = 1
  store i8 %v75, i8* @g18, align 1;
    @g18 = 1344  %v75 = 1
    write.u8 [    1344] <= 1
  br label %2428;
    %v76 <= %c26
pc = %2428
  %v77 = select i1 %v76, i32 %c11, i32 %c12;
    %v77 = 1155  %v76 = 1  %c11 = 1155
  store i32 %c0, i32* %v0, align 1;
    %v0 = 1048572  %c0 = 0
    write.u32 [ 1048572] <= 0
  %v78 = load i32* @g3, align 1;
     read.u32 [    1084] >= 152
    %v78 = 152  @g3 = 1084
  %v79 = call i32 %v78(i32 %v0, i32 %v77, i32 %c17, i32 %c18, i32 %c9, i64 %c28);
    NACL_IRT_MEMORY_MMAP(1048572, 1155, 3, 34, -1, 0)
      Searching from [1, 1)
    write.u32 [ 1048572] <= 4096
      returning 4096, errno = 0
  %v80 = icmp eq i32 %v79, %c0;
    %v80 = 1  %v79 = 0  %c0 = 0
  br i1 %v80, label %2664, label %2564;
    %v80 = 1
pc = %2664
  %v84 = load i32* %v0, align 1;
     read.u32 [ 1048572] >= 4096
    %v84 = 4096  %v0 = 1048572
  br label %2716;
    %v85 <= %v84
pc = %2716
  %v86 = load i8* @g19, align 1;
     read.u8 [    1345] >= 1
    %v86 = 1  @g19 = 1345
  %v87 = trunc i8 %v86 to i1;
    %v87 = 1  %v86 = 1
  br i1 %v87, label %2772, label %2836;
    %v87 = 1
pc = %2772
  %v88 = load i8* @g18, align 1;
     read.u8 [    1344] >= 1
    %v88 = 1  @g18 = 1344
  %v89 = trunc i8 %v88 to i1;
    %v89 = 1  %v88 = 1
  br label %2944;
    %v92 <= %v89
pc = %2944
  %v93 = select i1 %v92, i32 %c11, i32 %c12;
    %v93 = 1155  %v92 = 1  %c11 = 1155
  %v94 = add i32 %v85, %v93;
    %v94 = 5251  %v85 = 4096  %v93 = 1155
  %v95 = select i1 %v92, i32 %c14, i32 %c0;
    %v95 = 1144  %v92 = 1  %c14 = 1144
  %v96 = add i32 %v85, %c19;
    %v96 = 4103  %v85 = 4096  %c19 = 7
  %v97 = and i32 %v96, %c20;
    %v97 = 4096  %v96 = 4103  %c20 = 4294967288
  %v98 = add i32 %v97, %v95;
    %v98 = 5240  %v97 = 4096  %v95 = 1144
  %v99 = select i1 %v92, i32 %c14, i32 %c0;
    %v99 = 1144  %v92 = 1  %c14 = 1144
  %v100 = add i32 %v97, %v99;
    %v100 = 5240  %v97 = 4096  %v99 = 1144
  %v101 = icmp ugt i32 %v100, %v94;
    %v101 = 0  %v100 = 5240  %v94 = 5251
  br i1 %v101, label %3128, label %3148;
    %v101 = 0
pc = %3148
  %v102 = load i32* @g17, align 1;
     read.u32 [    1340] >= 2496
    %v102 = 2496  @g17 = 1340
  call void @f0(i32 %v97, i32 %v102, i32 %v99, i32 %c4, i1 %c27);
    llvm.memcpy(dst_p:4096, src_p:2496, len:1144, align:1, is_volatile:0)
    %v97 = 4096  %v102 = 2496  %v99 = 1144  %c4 = 1  %c27 = 0
  store i32 %v98, i32* %v98, align 1;
    %v98 = 5240  %v98 = 5240
    write.u32 [    5240] <= 5240
  %v103 = load i32* @g4, align 1;
     read.u32 [    1096] >= 164
    %v103 = 164  @g4 = 1096
  %v104 = call i32 %v103(i32 %v98);
    NACL_IRT_TLS_INIT(5240)
  %v105 = call i32 @f15();
    llvm.nacl.read.tp()
    %v105 = 5240
  %v106 = add i32 %v105, %c13;
    %v106 = 4096  %v105 = 5240  %c13 = 4294966152
  %v107 = add i32 %v105, %c21;
    %v107 = 4104  %v105 = 5240  %c21 = 4294966160
  store i32 %v107, i32* %v106, align 1;
    %v106 = 4096  %v107 = 4104
    write.u32 [    4096] <= 4104
  %v108 = add i32 @g20, %c3;
    %v108 = 1680  @g20 = 1352  %c3 = 328
  %v109 = load i32* %v108, align 1;
     read.u32 [    1680] >= 1684
    %v109 = 1684  %v108 = 1680
  %v110 = icmp eq i32 %v109, %c0;
    %v110 = 0  %v109 = 1684  %c0 = 0
  br i1 %v110, label %4472, label %3468;
    %v112 <= %v109
    %v110 = 0
pc = %3468
  %v113 = add i32 %v112, %c1;
    %v113 = 1688  %v112 = 1684  %c1 = 4
  %v114 = load i32* %v113, align 1;
     read.u32 [    1688] >= 1
    %v114 = 1  %v113 = 1688
  %v115 = icmp sgt i32 %v114, %c0;
    %v115 = 1  %v114 = 1  %c0 = 0
  br i1 %v115, label %3544, label %4472;
    %v115 = 1
pc = %3544
  %v116 = add i32 %v112, %c22;
    %v116 = 2076  %v112 = 1684  %c22 = 392
  %v117 = add i32 %v112, %c23;
    %v117 = 2080  %v112 = 1684  %c23 = 396
  br label %3628;
    %v118 <= %v114
    %v119 <= %v114
pc = %3628
  %v120 = add i32 %v119, %c9;
    %v120 = 0  %v119 = 1  %c9 = 4294967295
  %v121 = shl i32 %c4, %v120;
    %v121 = 1  %c4 = 1  %v120 = 0
  %v122 = add i32 %v112, %c2;
    %v122 = 1692  %v112 = 1684  %c2 = 8
  %v123 = mul i32 %v120, %c1;
    %v123 = 0  %v120 = 0  %c1 = 4
  %v124 = add i32 %v122, %v123;
    %v124 = 1692  %v122 = 1692  %v123 = 0
  %v125 = load i32* %v124, align 1;
     read.u32 [    1692] >= 248
    %v125 = 248  %v124 = 1692
  %v126 = icmp eq i32 %v119, %v118;
    %v126 = 1  %v119 = 1  %v118 = 1
  br i1 %v126, label %3880, label %3916;
    %v126 = 1
pc = %3880
  store i32 %v120, i32* %v113, align 1;
    %v113 = 1688  %v120 = 0
    write.u32 [    1688] <= 0
  br label %3952;
pc = %3952
  %v129 = icmp eq i32 %v125, %c0;
    %v129 = 0  %v125 = 248  %c0 = 0
  br i1 %v129, label %3768, label %3996;
    %v129 = 0
pc = %3996
  %v130 = load i32* %v113, align 1;
     read.u32 [    1688] >= 0
    %v130 = 0  %v113 = 1688
  %v131 = load i32* %v116, align 1;
     read.u32 [    2076] >= 0
    %v131 = 0  %v116 = 2076
  %v132 = and i32 %v131, %v121;
    %v132 = 0  %v131 = 0  %v121 = 1
  %v133 = icmp eq i32 %v132, %c0;
    %v133 = 1  %v132 = 0  %c0 = 0
  br i1 %v133, label %4088, label %4124;
    %v133 = 1
pc = %4088
  call void %v125();
    %v125 = 248 
function = %f14  pc = %0
  ret void;
function = %f12  pc = %4088
  br label %4348;
pc = %4348
  %v141 = load i32* %v113, align 1;
     read.u32 [    1688] >= 0
    %v141 = 0  %v113 = 1688
  %v142 = icmp eq i32 %v130, %v141;
    %v142 = 1  %v130 = 0  %v141 = 0
  %v143 = add i32 @g20, %c3;
    %v143 = 1680  @g20 = 1352  %c3 = 328
  %v144 = load i32* %v143, align 1;
     read.u32 [    1680] >= 1684
    %v144 = 1684  %v143 = 1680
  %v145 = icmp eq i32 %v144, %v112;
    %v145 = 1  %v144 = 1684  %v112 = 1684
  %v146 = and i1 %v142, %v145;
    %v146 = 1  %v142 = 1  %v145 = 1
  br i1 %v146, label %3768, label %3408;
    %v146 = 1
pc = %3768
  %v127 = icmp sgt i32 %v119, %c4;
    %v127 = 0  %v119 = 1  %c4 = 1
  br i1 %v127, label %3812, label %4472;
    %v127 = 0
pc = %4472
  %v147 = add i32 @g20, %c25;
    %v147 = 1412  @g20 = 1352  %c25 = 60
  %v148 = load i32* %v147, align 1;
     read.u32 [    1412] >= 0
    %v148 = 0  %v147 = 1412
  %v149 = icmp eq i32 %v148, %c0;
    %v149 = 1  %v148 = 0  %c0 = 0
  br i1 %v149, label %4588, label %4548;
    %v149 = 1
pc = %4588
  %v150 = load i32* @g2, align 1;
     read.u32 [    1060] >= 8
    %v150 = 8  @g2 = 1060
  call void %v150(i32 %c0);
    NACL_IRT_BASIC_EXIT(0)
